
Lab_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800421c  0800421c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004224  08004224  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004228  08004228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800422c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000005c  08004288  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004288  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4bb  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219b  00000000  00000000  0002f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00031728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a45  00000000  00000000  00032458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002773a  00000000  00000000  00032e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011420  00000000  00000000  0005a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f966e  00000000  00000000  0006b9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b68  00000000  00000000  00165068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00168bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080041a8 	.word	0x080041a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080041a8 	.word	0x080041a8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x2c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <displayTime>:
void displayNumber(count){
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
	snprintf(buffer,100,"%d\r",count);
	HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
}
extern void displayTime (uint32_t sec){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    sprintf(str, "%02d:%02d\r", sec/60,sec%60);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <displayTime+0x50>)
 8000628:	fba2 2303 	umull	r2, r3, r2, r3
 800062c:	0958      	lsrs	r0, r3, #5
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <displayTime+0x50>)
 8000632:	fba3 2301 	umull	r2, r3, r3, r1
 8000636:	095a      	lsrs	r2, r3, #5
 8000638:	4613      	mov	r3, r2
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	1aca      	subs	r2, r1, r3
 8000642:	4613      	mov	r3, r2
 8000644:	4602      	mov	r2, r0
 8000646:	490a      	ldr	r1, [pc, #40]	; (8000670 <displayTime+0x54>)
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <displayTime+0x58>)
 800064a:	f003 f909 	bl	8003860 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 100);
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <displayTime+0x58>)
 8000650:	f7ff fdf6 	bl	8000240 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	4906      	ldr	r1, [pc, #24]	; (8000674 <displayTime+0x58>)
 800065c:	4806      	ldr	r0, [pc, #24]	; (8000678 <displayTime+0x5c>)
 800065e:	f002 fc61 	bl	8002f24 <HAL_UART_Transmit>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	88888889 	.word	0x88888889
 8000670:	080041c4 	.word	0x080041c4
 8000674:	2000007c 	.word	0x2000007c
 8000678:	20000168 	.word	0x20000168

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fae5 	bl	8000c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f81a 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f7ff ffb0 	bl	80005ec <MX_GPIO_Init>
  MX_TIM1_Init();
 800068c:	f000 f946 	bl	800091c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000690:	f000 f998 	bl	80009c4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000694:	f000 fa22 	bl	8000adc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <main+0x38>)
 800069a:	f001 ff7b 	bl	8002594 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  displayNumber(count);
	  displayTime(count);
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <main+0x3c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffba 	bl	800061c <displayTime>
	  HAL_Delay(400);
 80006a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006ac:	f000 fb2c 	bl	8000d08 <HAL_Delay>
	  displayTime(count);
 80006b0:	e7f5      	b.n	800069e <main+0x22>
 80006b2:	bf00      	nop
 80006b4:	200000d0 	.word	0x200000d0
 80006b8:	20000078 	.word	0x20000078

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f8e8 	bl	80038a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemClock_Config+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <SystemClock_Config+0xd8>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000728:	23d8      	movs	r3, #216	; 0xd8
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fe15 	bl	800136c <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000748:	f000 f826 	bl	8000798 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f000 fdbe 	bl	80012cc <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000756:	f000 f81f 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2107      	movs	r1, #7
 8000778:	4618      	mov	r0, r3
 800077a:	f001 f8a5 	bl	80018c8 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000784:	f000 f808 	bl	8000798 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000838:	f000 fa46 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	4a03      	ldr	r2, [pc, #12]	; (8000858 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800084c:	6013      	str	r3, [r2, #0]
//	displayTime(count);

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000850:	f001 ff18 	bl	8002684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000078 	.word	0x20000078
 800085c:	200000d0 	.word	0x200000d0

08000860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <TIM2_IRQHandler+0x20>)
 8000866:	f001 ff0d 	bl	8002684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  displayTime(count/1000);
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <TIM2_IRQHandler+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a06      	ldr	r2, [pc, #24]	; (8000888 <TIM2_IRQHandler+0x28>)
 8000870:	fba2 2303 	umull	r2, r3, r2, r3
 8000874:	099b      	lsrs	r3, r3, #6
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fed0 	bl	800061c <displayTime>
  /* USER CODE END TIM2_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000011c 	.word	0x2000011c
 8000884:	20000078 	.word	0x20000078
 8000888:	10624dd3 	.word	0x10624dd3

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f002 fff8 	bl	80038b0 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20080000 	.word	0x20080000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	200000cc 	.word	0x200000cc
 80008f4:	20000340 	.word	0x20000340

080008f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_TIM1_Init+0xa0>)
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <MX_TIM1_Init+0xa4>)
 800093e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000942:	f245 425f 	movw	r2, #21599	; 0x545f
 8000946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_TIM1_Init+0xa0>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000950:	f242 720f 	movw	r2, #9999	; 0x270f
 8000954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_TIM1_Init+0xa0>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_TIM1_Init+0xa0>)
 800096a:	f001 fdbb 	bl	80024e4 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000974:	f7ff ff10 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000986:	f001 ff9d 	bl	80028c4 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000990:	f7ff ff02 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_TIM1_Init+0xa0>)
 80009a6:	f002 f9c3 	bl	8002d30 <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009b0:	f7ff fef2 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000d0 	.word	0x200000d0
 80009c0:	40010000 	.word	0x40010000

080009c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a0a:	f001 fd6b 	bl	80024e4 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a14:	f7ff fec0 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a26:	f001 ff4d 	bl	80028c4 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a30:	f7ff feb2 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a42:	f002 f975 	bl	8002d30 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f7ff fea4 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000011c 	.word	0x2000011c

08000a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <HAL_TIM_Base_MspInit+0x78>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d114      	bne.n	8000a98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2101      	movs	r1, #1
 8000a8a:	2019      	movs	r0, #25
 8000a8c:	f000 fa3b 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a90:	2019      	movs	r0, #25
 8000a92:	f000 fa54 	bl	8000f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a96:	e018      	b.n	8000aca <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa0:	d113      	bne.n	8000aca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2102      	movs	r1, #2
 8000abe:	201c      	movs	r0, #28
 8000ac0:	f000 fa21 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ac4:	201c      	movs	r0, #28
 8000ac6:	f000 fa3a 	bl	8000f3e <HAL_NVIC_EnableIRQ>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	40023800 	.word	0x40023800

08000adc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <MX_USART3_UART_Init+0x5c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b20:	f002 f9b2 	bl	8002e88 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f7ff fe35 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000168 	.word	0x20000168
 8000b38:	40004800 	.word	0x40004800

08000b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0ae      	sub	sp, #184	; 0xb8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2290      	movs	r2, #144	; 0x90
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 fe9f 	bl	80038a0 <memset>
  if(uartHandle->Instance==USART3)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <HAL_UART_MspInit+0xb4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d13c      	bne.n	8000be6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 f88a 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b86:	f7ff fe07 	bl	8000798 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_UART_MspInit+0xbc>)
 8000be2:	f000 f9c7 	bl	8000f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	37b8      	adds	r7, #184	; 0xb8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40004800 	.word	0x40004800
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c26:	f7ff fe67 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f002 fe47 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fd25 	bl	800067c <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c40:	0800422c 	.word	0x0800422c
  ldr r2, =_sbss
 8000c44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c48:	2000033c 	.word	0x2000033c

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>

08000c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c52:	2003      	movs	r0, #3
 8000c54:	f000 f94c 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 f805 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5e:	f7ff fda1 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f967 	bl	8000f5a <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f92f 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	200001f0 	.word	0x200001f0

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200001f0 	.word	0x200001f0

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffde 	bl	8000cf0 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <__NVIC_SetPriorityGrouping+0x40>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x40>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	05fa0000 	.word	0x05fa0000

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff3e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff31 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e175      	b.n	8001280 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8164 	bne.w	800127a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x56>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80be 	beq.w	800127a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b66      	ldr	r3, [pc, #408]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a65      	ldr	r2, [pc, #404]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_GPIO_Init+0x324>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001116:	4a61      	ldr	r2, [pc, #388]	; (800129c <HAL_GPIO_Init+0x328>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a58      	ldr	r2, [pc, #352]	; (80012a0 <HAL_GPIO_Init+0x32c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d037      	beq.n	80011b2 <HAL_GPIO_Init+0x23e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a57      	ldr	r2, [pc, #348]	; (80012a4 <HAL_GPIO_Init+0x330>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d031      	beq.n	80011ae <HAL_GPIO_Init+0x23a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <HAL_GPIO_Init+0x334>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d02b      	beq.n	80011aa <HAL_GPIO_Init+0x236>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a55      	ldr	r2, [pc, #340]	; (80012ac <HAL_GPIO_Init+0x338>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d025      	beq.n	80011a6 <HAL_GPIO_Init+0x232>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a54      	ldr	r2, [pc, #336]	; (80012b0 <HAL_GPIO_Init+0x33c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01f      	beq.n	80011a2 <HAL_GPIO_Init+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a53      	ldr	r2, [pc, #332]	; (80012b4 <HAL_GPIO_Init+0x340>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0x22a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a52      	ldr	r2, [pc, #328]	; (80012b8 <HAL_GPIO_Init+0x344>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a51      	ldr	r2, [pc, #324]	; (80012bc <HAL_GPIO_Init+0x348>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <HAL_GPIO_Init+0x34c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <HAL_GPIO_Init+0x350>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x21a>
 800118a:	2309      	movs	r3, #9
 800118c:	e012      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800118e:	230a      	movs	r3, #10
 8001190:	e010      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 8001192:	2308      	movs	r3, #8
 8001194:	e00e      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 8001196:	2307      	movs	r3, #7
 8001198:	e00c      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800119a:	2306      	movs	r3, #6
 800119c:	e00a      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011b2:	2300      	movs	r3, #0
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	; (800129c <HAL_GPIO_Init+0x328>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <HAL_GPIO_Init+0x354>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a34      	ldr	r2, [pc, #208]	; (80012c8 <HAL_GPIO_Init+0x354>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <HAL_GPIO_Init+0x354>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <HAL_GPIO_Init+0x354>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <HAL_GPIO_Init+0x354>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_GPIO_Init+0x354>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_GPIO_Init+0x354>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_GPIO_Init+0x354>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	f67f ae86 	bls.w	8000f94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	40022000 	.word	0x40022000
 80012c4:	40022400 	.word	0x40022400
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_PWREx_EnableOverDrive+0x98>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a22      	ldr	r2, [pc, #136]	; (8001364 <HAL_PWREx_EnableOverDrive+0x98>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_PWREx_EnableOverDrive+0x98>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012fa:	f7ff fcf9 	bl	8000cf0 <HAL_GetTick>
 80012fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001300:	e009      	b.n	8001316 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001302:	f7ff fcf5 	bl	8000cf0 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001310:	d901      	bls.n	8001316 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e022      	b.n	800135c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001322:	d1ee      	bne.n	8001302 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_PWREx_EnableOverDrive+0x9c>)
 800132a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001330:	f7ff fcde 	bl	8000cf0 <HAL_GetTick>
 8001334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001336:	e009      	b.n	800134c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001338:	f7ff fcda 	bl	8000cf0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001346:	d901      	bls.n	800134c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e007      	b.n	800135c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_PWREx_EnableOverDrive+0x9c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001358:	d1ee      	bne.n	8001338 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000

0800136c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e29b      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8087 	beq.w	800149e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001390:	4b96      	ldr	r3, [pc, #600]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b04      	cmp	r3, #4
 800139a:	d00c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139c:	4b93      	ldr	r3, [pc, #588]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d112      	bne.n	80013ce <HAL_RCC_OscConfig+0x62>
 80013a8:	4b90      	ldr	r3, [pc, #576]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013b4:	d10b      	bne.n	80013ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	4b8d      	ldr	r3, [pc, #564]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d06c      	beq.n	800149c <HAL_RCC_OscConfig+0x130>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d168      	bne.n	800149c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e275      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x7a>
 80013d8:	4b84      	ldr	r3, [pc, #528]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a83      	ldr	r2, [pc, #524]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80013de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e02e      	b.n	8001444 <HAL_RCC_OscConfig+0xd8>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x9c>
 80013ee:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7e      	ldr	r2, [pc, #504]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80013f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b7c      	ldr	r3, [pc, #496]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a7b      	ldr	r2, [pc, #492]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e01d      	b.n	8001444 <HAL_RCC_OscConfig+0xd8>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0xc0>
 8001412:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a75      	ldr	r2, [pc, #468]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b73      	ldr	r3, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a72      	ldr	r2, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0xd8>
 800142c:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6b      	ldr	r2, [pc, #428]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fc50 	bl	8000cf0 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fc4c 	bl	8000cf0 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e229      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b61      	ldr	r3, [pc, #388]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0xe8>
 8001472:	e014      	b.n	800149e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc3c 	bl	8000cf0 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fc38 	bl	8000cf0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e215      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x110>
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d069      	beq.n	800157e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014aa:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b6:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d11c      	bne.n	80014fc <HAL_RCC_OscConfig+0x190>
 80014c2:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d116      	bne.n	80014fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x17a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e1e9      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	493d      	ldr	r1, [pc, #244]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	e040      	b.n	800157e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d023      	beq.n	800154c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a38      	ldr	r2, [pc, #224]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fbee 	bl	8000cf0 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fbea 	bl	8000cf0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1c7      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4929      	ldr	r1, [pc, #164]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
 800154a:	e018      	b.n	800157e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fbca 	bl	8000cf0 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fbc6 	bl	8000cf0 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1a3      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d038      	beq.n	80015fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d019      	beq.n	80015c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fba7 	bl	8000cf0 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fba3 	bl	8000cf0 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e180      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80015ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x23a>
 80015c4:	e01a      	b.n	80015fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80015c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_RCC_OscConfig+0x280>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb8d 	bl	8000cf0 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fb89 	bl	8000cf0 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d903      	bls.n	80015f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e166      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
 80015ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ee      	bne.n	80015da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80a4 	beq.w	8001752 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160a:	4b8c      	ldr	r3, [pc, #560]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10d      	bne.n	8001632 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b89      	ldr	r3, [pc, #548]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a88      	ldr	r2, [pc, #544]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b86      	ldr	r3, [pc, #536]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001632:	4b83      	ldr	r3, [pc, #524]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800163e:	4b80      	ldr	r3, [pc, #512]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7f      	ldr	r2, [pc, #508]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fb51 	bl	8000cf0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fb4d 	bl	8000cf0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b64      	cmp	r3, #100	; 0x64
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e12a      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001664:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x31a>
 8001678:	4b70      	ldr	r3, [pc, #448]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a6f      	ldr	r2, [pc, #444]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e02d      	b.n	80016e2 <HAL_RCC_OscConfig+0x376>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x33c>
 800168e:	4b6b      	ldr	r3, [pc, #428]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a6a      	ldr	r2, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a67      	ldr	r2, [pc, #412]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	e01c      	b.n	80016e2 <HAL_RCC_OscConfig+0x376>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d10c      	bne.n	80016ca <HAL_RCC_OscConfig+0x35e>
 80016b0:	4b62      	ldr	r3, [pc, #392]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a61      	ldr	r2, [pc, #388]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
 80016bc:	4b5f      	ldr	r3, [pc, #380]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a5e      	ldr	r2, [pc, #376]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	e00b      	b.n	80016e2 <HAL_RCC_OscConfig+0x376>
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	4a5b      	ldr	r2, [pc, #364]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6713      	str	r3, [r2, #112]	; 0x70
 80016d6:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d015      	beq.n	8001716 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff fb01 	bl	8000cf0 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7ff fafd 	bl	8000cf0 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0d8      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ee      	beq.n	80016f2 <HAL_RCC_OscConfig+0x386>
 8001714:	e014      	b.n	8001740 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff faeb 	bl	8000cf0 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fae7 	bl	8000cf0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0c2      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1ee      	bne.n	800171e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d105      	bne.n	8001752 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a3c      	ldr	r2, [pc, #240]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800174c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80ae 	beq.w	80018b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175c:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d06d      	beq.n	8001844 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d14b      	bne.n	8001808 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a31      	ldr	r2, [pc, #196]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800177a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fab8 	bl	8000cf0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fab4 	bl	8000cf0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e091      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	071b      	lsls	r3, r3, #28
 80017ce:	491b      	ldr	r1, [pc, #108]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a18      	ldr	r2, [pc, #96]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80017da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fa86 	bl	8000cf0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fa82 	bl	8000cf0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e05f      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x47c>
 8001806:	e057      	b.n	80018b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 800180e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fa6c 	bl	8000cf0 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff fa68 	bl	8000cf0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e045      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_RCC_OscConfig+0x4d0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x4b0>
 800183a:	e03d      	b.n	80018b8 <HAL_RCC_OscConfig+0x54c>
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_RCC_OscConfig+0x558>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d030      	beq.n	80018b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d129      	bne.n	80018b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d122      	bne.n	80018b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800187a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800187c:	4293      	cmp	r3, r2
 800187e:	d119      	bne.n	80018b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d10f      	bne.n	80018b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 020f 	bic.w	r2, r3, #15
 80018f6:	4965      	ldr	r1, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800192e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001932:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800194a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d040      	beq.n	80019ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e073      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4936      	ldr	r1, [pc, #216]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019bc:	f7ff f998 	bl	8000cf0 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff f994 	bl	8000cf0 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e053      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d210      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 020f 	bic.w	r2, r3, #15
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1cc>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1d0>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1d4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f8f4 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00
 8001a90:	40023800 	.word	0x40023800
 8001a94:	080041d0 	.word	0x080041d0
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa4:	b090      	sub	sp, #64	; 0x40
 8001aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8001aac:	2300      	movs	r3, #0
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	f200 80a1 	bhi.w	8001c0c <HAL_RCC_GetSysClockFreq+0x16c>
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d003      	beq.n	8001ada <HAL_RCC_GetSysClockFreq+0x3a>
 8001ad2:	e09b      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ad8:	e09b      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ada:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ade:	e098      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001aea:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d028      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af6:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	099b      	lsrs	r3, r3, #6
 8001afc:	2200      	movs	r2, #0
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	627a      	str	r2, [r7, #36]	; 0x24
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b0c:	fb03 f201 	mul.w	r2, r3, r1
 8001b10:	2300      	movs	r3, #0
 8001b12:	fb00 f303 	mul.w	r3, r0, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	4a43      	ldr	r2, [pc, #268]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b1a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b20:	460a      	mov	r2, r1
 8001b22:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b26:	4413      	add	r3, r2
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	61fa      	str	r2, [r7, #28]
 8001b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b3a:	f7fe fbd9 	bl	80002f0 <__aeabi_uldivmod>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4613      	mov	r3, r2
 8001b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b46:	e053      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	2200      	movs	r2, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	617a      	str	r2, [r7, #20]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b5a:	f04f 0b00 	mov.w	fp, #0
 8001b5e:	4652      	mov	r2, sl
 8001b60:	465b      	mov	r3, fp
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	0159      	lsls	r1, r3, #5
 8001b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b70:	0150      	lsls	r0, r2, #5
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	ebb2 080a 	subs.w	r8, r2, sl
 8001b7a:	eb63 090b 	sbc.w	r9, r3, fp
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b92:	ebb2 0408 	subs.w	r4, r2, r8
 8001b96:	eb63 0509 	sbc.w	r5, r3, r9
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	00eb      	lsls	r3, r5, #3
 8001ba4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ba8:	00e2      	lsls	r2, r4, #3
 8001baa:	4614      	mov	r4, r2
 8001bac:	461d      	mov	r5, r3
 8001bae:	eb14 030a 	adds.w	r3, r4, sl
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	eb45 030b 	adc.w	r3, r5, fp
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	028b      	lsls	r3, r1, #10
 8001bca:	4621      	mov	r1, r4
 8001bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	028a      	lsls	r2, r1, #10
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	60fa      	str	r2, [r7, #12]
 8001be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001be4:	f7fe fb84 	bl	80002f0 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3740      	adds	r7, #64	; 0x40
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	017d7840 	.word	0x017d7840

08001c2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a9b      	lsrs	r3, r3, #10
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	080041e0 	.word	0x080041e0

08001c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c70:	f7ff ffdc 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	080041e0 	.word	0x080041e0

08001c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d012      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cbc:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a68      	ldr	r2, [pc, #416]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cc6:	6093      	str	r3, [r2, #8]
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	4964      	ldr	r1, [pc, #400]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d017      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cee:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	4959      	ldr	r1, [pc, #356]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d017      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	494a      	ldr	r1, [pc, #296]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d48:	d101      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 808b 	beq.w	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a39      	ldr	r2, [pc, #228]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d90:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a34      	ldr	r2, [pc, #208]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d9c:	f7fe ffa8 	bl	8000cf0 <HAL_GetTick>
 8001da0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7fe ffa4 	bl	8000cf0 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e38f      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d035      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d02e      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e02:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d114      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff6c 	bl	8000cf0 <HAL_GetTick>
 8001e18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7fe ff68 	bl	8000cf0 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e351      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ee      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e4a:	d111      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	4901      	ldr	r1, [pc, #4]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	0ffffcff 	.word	0x0ffffcff
 8001e70:	4bac      	ldr	r3, [pc, #688]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4aab      	ldr	r2, [pc, #684]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e7a:	6093      	str	r3, [r2, #8]
 8001e7c:	4ba9      	ldr	r3, [pc, #676]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	49a6      	ldr	r1, [pc, #664]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d010      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e9a:	4ba2      	ldr	r3, [pc, #648]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea0:	4aa0      	ldr	r2, [pc, #640]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eaa:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	499b      	ldr	r1, [pc, #620]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec8:	4b96      	ldr	r3, [pc, #600]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed6:	4993      	ldr	r1, [pc, #588]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eea:	4b8e      	ldr	r3, [pc, #568]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef8:	498a      	ldr	r1, [pc, #552]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f0c:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f1a:	4982      	ldr	r1, [pc, #520]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f2e:	4b7d      	ldr	r3, [pc, #500]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	4979      	ldr	r1, [pc, #484]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f50:	4b74      	ldr	r3, [pc, #464]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4971      	ldr	r1, [pc, #452]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f023 020c 	bic.w	r2, r3, #12
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	4968      	ldr	r1, [pc, #416]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f94:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4960      	ldr	r1, [pc, #384]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc4:	4957      	ldr	r1, [pc, #348]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fd8:	4b52      	ldr	r3, [pc, #328]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	494f      	ldr	r1, [pc, #316]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4946      	ldr	r1, [pc, #280]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	493e      	ldr	r1, [pc, #248]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	4935      	ldr	r1, [pc, #212]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002060:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800206e:	492d      	ldr	r1, [pc, #180]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d011      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002090:	4924      	ldr	r1, [pc, #144]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800209c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	4914      	ldr	r1, [pc, #80]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f4:	490b      	ldr	r1, [pc, #44]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00f      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002118:	4902      	ldr	r1, [pc, #8]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002120:	e002      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00b      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002134:	4b8a      	ldr	r3, [pc, #552]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800213a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	4986      	ldr	r1, [pc, #536]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002158:	4b81      	ldr	r3, [pc, #516]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800215e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002168:	497d      	ldr	r1, [pc, #500]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d006      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80d6 	beq.w	8002330 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002184:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800218e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002190:	f7fe fdae 	bl	8000cf0 <HAL_GetTick>
 8002194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002198:	f7fe fdaa 	bl	8000cf0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e195      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d021      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11d      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021ca:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021d8:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021de:	0e1b      	lsrs	r3, r3, #24
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	019a      	lsls	r2, r3, #6
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	071b      	lsls	r3, r3, #28
 80021fe:	4958      	ldr	r1, [pc, #352]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002224:	2b00      	cmp	r3, #0
 8002226:	d02e      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002230:	d129      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002232:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002246:	0f1b      	lsrs	r3, r3, #28
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	019a      	lsls	r2, r3, #6
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	061b      	lsls	r3, r3, #24
 8002260:	431a      	orrs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	071b      	lsls	r3, r3, #28
 8002266:	493e      	ldr	r1, [pc, #248]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800226e:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002274:	f023 021f 	bic.w	r2, r3, #31
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	3b01      	subs	r3, #1
 800227e:	4938      	ldr	r1, [pc, #224]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01d      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002298:	0e1b      	lsrs	r3, r3, #24
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a6:	0f1b      	lsrs	r3, r3, #28
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	019a      	lsls	r2, r3, #6
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	071b      	lsls	r3, r3, #28
 80022c6:	4926      	ldr	r1, [pc, #152]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d011      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	019a      	lsls	r2, r3, #6
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	071b      	lsls	r3, r3, #28
 80022f6:	491a      	ldr	r1, [pc, #104]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002304:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230a:	f7fe fcf1 	bl	8000cf0 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002312:	f7fe fced 	bl	8000cf0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0d8      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b01      	cmp	r3, #1
 8002334:	f040 80ce 	bne.w	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe fcd4 	bl	8000cf0 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800234a:	e00b      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800234c:	f7fe fcd0 	bl	8000cf0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d904      	bls.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0bb      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002364:	4b5e      	ldr	r3, [pc, #376]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800236c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002370:	d0ec      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02e      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d12a      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800239a:	4b51      	ldr	r3, [pc, #324]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023a8:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	0f1b      	lsrs	r3, r3, #28
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	019a      	lsls	r2, r3, #6
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	041b      	lsls	r3, r3, #16
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	431a      	orrs	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	071b      	lsls	r3, r3, #28
 80023ce:	4944      	ldr	r1, [pc, #272]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023d6:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	3b01      	subs	r3, #1
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	493d      	ldr	r1, [pc, #244]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d022      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002404:	d11d      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	0e1b      	lsrs	r3, r3, #24
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002414:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	0f1b      	lsrs	r3, r3, #28
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	019a      	lsls	r2, r3, #6
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	061b      	lsls	r3, r3, #24
 8002434:	431a      	orrs	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	071b      	lsls	r3, r3, #28
 800243a:	4929      	ldr	r1, [pc, #164]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d028      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	0e1b      	lsrs	r3, r3, #24
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	019a      	lsls	r2, r3, #6
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	431a      	orrs	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	071b      	lsls	r3, r3, #28
 8002482:	4917      	ldr	r1, [pc, #92]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	4911      	ldr	r1, [pc, #68]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ac:	f7fe fc20 	bl	8000cf0 <HAL_GetTick>
 80024b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024b4:	f7fe fc1c 	bl	8000cf0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e007      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d2:	d1ef      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e049      	b.n	800258a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe faa6 	bl	8000a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 faca 	bl	8002abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d001      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e054      	b.n	8002656 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <HAL_TIM_Base_Start_IT+0xd0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d022      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x80>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d01d      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x80>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a22      	ldr	r2, [pc, #136]	; (8002668 <HAL_TIM_Base_Start_IT+0xd4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d018      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x80>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a21      	ldr	r2, [pc, #132]	; (800266c <HAL_TIM_Base_Start_IT+0xd8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x80>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <HAL_TIM_Base_Start_IT+0xdc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00e      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x80>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1e      	ldr	r2, [pc, #120]	; (8002674 <HAL_TIM_Base_Start_IT+0xe0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d009      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x80>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <HAL_TIM_Base_Start_IT+0xe4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x80>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1b      	ldr	r2, [pc, #108]	; (800267c <HAL_TIM_Base_Start_IT+0xe8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d115      	bne.n	8002640 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_TIM_Base_Start_IT+0xec>)
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d015      	beq.n	8002652 <HAL_TIM_Base_Start_IT+0xbe>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262c:	d011      	beq.n	8002652 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263e:	e008      	b.n	8002652 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e000      	b.n	8002654 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40010000 	.word	0x40010000
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800
 8002670:	40000c00 	.word	0x40000c00
 8002674:	40010400 	.word	0x40010400
 8002678:	40014000 	.word	0x40014000
 800267c:	40001800 	.word	0x40001800
 8002680:	00010007 	.word	0x00010007

08002684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0202 	mvn.w	r2, #2
 80026b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f9da 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f9cc 	bl	8002a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f9dd 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0204 	mvn.w	r2, #4
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f9b0 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f9a2 	bl	8002a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f9b3 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b08      	cmp	r3, #8
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b08      	cmp	r3, #8
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0208 	mvn.w	r2, #8
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2204      	movs	r2, #4
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f986 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f978 	bl	8002a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f989 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b10      	cmp	r3, #16
 8002794:	d122      	bne.n	80027dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d11b      	bne.n	80027dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0210 	mvn.w	r2, #16
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2208      	movs	r2, #8
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f95c 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f94e 	bl	8002a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f95f 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0201 	mvn.w	r2, #1
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f928 	bl	8002a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b80      	cmp	r3, #128	; 0x80
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fb16 	bl	8002e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002842:	d10e      	bne.n	8002862 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d107      	bne.n	8002862 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800285a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fb09 	bl	8002e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d10e      	bne.n	800288e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d107      	bne.n	800288e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f90d 	bl	8002aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b20      	cmp	r3, #32
 800289a:	d10e      	bne.n	80028ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d107      	bne.n	80028ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f06f 0220 	mvn.w	r2, #32
 80028b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fac9 	bl	8002e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_ConfigClockSource+0x1c>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0b4      	b.n	8002a4a <HAL_TIM_ConfigClockSource+0x186>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <HAL_TIM_ConfigClockSource+0x190>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002918:	d03e      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0xd4>
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	f200 8087 	bhi.w	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	f000 8086 	beq.w	8002a36 <HAL_TIM_ConfigClockSource+0x172>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	d87f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b70      	cmp	r3, #112	; 0x70
 8002932:	d01a      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xa6>
 8002934:	2b70      	cmp	r3, #112	; 0x70
 8002936:	d87b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b60      	cmp	r3, #96	; 0x60
 800293a:	d050      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x11a>
 800293c:	2b60      	cmp	r3, #96	; 0x60
 800293e:	d877      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b50      	cmp	r3, #80	; 0x50
 8002942:	d03c      	beq.n	80029be <HAL_TIM_ConfigClockSource+0xfa>
 8002944:	2b50      	cmp	r3, #80	; 0x50
 8002946:	d873      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d058      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x13a>
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d86f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b30      	cmp	r3, #48	; 0x30
 8002952:	d064      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002954:	2b30      	cmp	r3, #48	; 0x30
 8002956:	d86b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b20      	cmp	r3, #32
 800295a:	d060      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 800295c:	2b20      	cmp	r3, #32
 800295e:	d867      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05c      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002964:	2b10      	cmp	r3, #16
 8002966:	d05a      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002968:	e062      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800297a:	f000 f9b9 	bl	8002cf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800298c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	609a      	str	r2, [r3, #8]
      break;
 8002996:	e04f      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029a8:	f000 f9a2 	bl	8002cf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ba:	609a      	str	r2, [r3, #8]
      break;
 80029bc:	e03c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f916 	bl	8002bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2150      	movs	r1, #80	; 0x50
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f96f 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 80029dc:	e02c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f935 	bl	8002c5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2160      	movs	r1, #96	; 0x60
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f95f 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 80029fc:	e01c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 f8f6 	bl	8002bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f94f 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e00c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f000 f946 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 8002a2e:	e003      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      break;
 8002a34:	e000      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	fffeff88 	.word	0xfffeff88

08002a58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a40      	ldr	r2, [pc, #256]	; (8002bd0 <TIM_Base_SetConfig+0x114>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ada:	d00f      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3d      	ldr	r2, [pc, #244]	; (8002bd4 <TIM_Base_SetConfig+0x118>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00b      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3c      	ldr	r2, [pc, #240]	; (8002bd8 <TIM_Base_SetConfig+0x11c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <TIM_Base_SetConfig+0x120>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3a      	ldr	r2, [pc, #232]	; (8002be0 <TIM_Base_SetConfig+0x124>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d108      	bne.n	8002b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <TIM_Base_SetConfig+0x114>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02b      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d027      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a2c      	ldr	r2, [pc, #176]	; (8002bd4 <TIM_Base_SetConfig+0x118>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d023      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a2b      	ldr	r2, [pc, #172]	; (8002bd8 <TIM_Base_SetConfig+0x11c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01f      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2a      	ldr	r2, [pc, #168]	; (8002bdc <TIM_Base_SetConfig+0x120>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01b      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <TIM_Base_SetConfig+0x124>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d017      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a28      	ldr	r2, [pc, #160]	; (8002be4 <TIM_Base_SetConfig+0x128>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a27      	ldr	r2, [pc, #156]	; (8002be8 <TIM_Base_SetConfig+0x12c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a26      	ldr	r2, [pc, #152]	; (8002bec <TIM_Base_SetConfig+0x130>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <TIM_Base_SetConfig+0x134>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <TIM_Base_SetConfig+0x138>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <TIM_Base_SetConfig+0x13c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <TIM_Base_SetConfig+0x114>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d003      	beq.n	8002bb4 <TIM_Base_SetConfig+0xf8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <TIM_Base_SetConfig+0x124>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d103      	bne.n	8002bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	615a      	str	r2, [r3, #20]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40000800 	.word	0x40000800
 8002bdc:	40000c00 	.word	0x40000c00
 8002be0:	40010400 	.word	0x40010400
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800
 8002bf0:	40001800 	.word	0x40001800
 8002bf4:	40001c00 	.word	0x40001c00
 8002bf8:	40002000 	.word	0x40002000

08002bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 030a 	bic.w	r3, r3, #10
 8002c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b087      	sub	sp, #28
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f023 0210 	bic.w	r2, r3, #16
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	031b      	lsls	r3, r3, #12
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	621a      	str	r2, [r3, #32]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f043 0307 	orr.w	r3, r3, #7
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	021a      	lsls	r2, r3, #8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	609a      	str	r2, [r3, #8]
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e06d      	b.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d004      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d108      	bne.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d022      	beq.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dba:	d01d      	beq.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d018      	beq.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00e      	beq.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d009      	beq.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d10c      	bne.n	8002e12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40010000 	.word	0x40010000
 8002e34:	40010400 	.word	0x40010400
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	40014000 	.word	0x40014000
 8002e48:	40001800 	.word	0x40001800

08002e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e040      	b.n	8002f1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd fe46 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	; 0x24
 8002eb4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f8b0 	bl	800302c <UART_SetConfig>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fb08 	bl	80034f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fb8f 	bl	8003638 <UART_CheckIdleState>
 8002f1a:	4603      	mov	r3, r0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d171      	bne.n	8003020 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_UART_Transmit+0x24>
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e06a      	b.n	8003022 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2221      	movs	r2, #33	; 0x21
 8002f58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5a:	f7fd fec9 	bl	8000cf0 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d108      	bne.n	8002f8c <HAL_UART_Transmit+0x68>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	e003      	b.n	8002f94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f94:	e02c      	b.n	8002ff0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fb96 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e038      	b.n	8003022 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e007      	b.n	8002fde <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1cc      	bne.n	8002f96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2200      	movs	r2, #0
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fb63 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e005      	b.n	8003022 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4ba6      	ldr	r3, [pc, #664]	; (80032f0 <UART_SetConfig+0x2c4>)
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	6979      	ldr	r1, [r7, #20]
 8003060:	430b      	orrs	r3, r1
 8003062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a94      	ldr	r2, [pc, #592]	; (80032f4 <UART_SetConfig+0x2c8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d120      	bne.n	80030ea <UART_SetConfig+0xbe>
 80030a8:	4b93      	ldr	r3, [pc, #588]	; (80032f8 <UART_SetConfig+0x2cc>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d816      	bhi.n	80030e4 <UART_SetConfig+0xb8>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <UART_SetConfig+0x90>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030d9 	.word	0x080030d9
 80030c4:	080030d3 	.word	0x080030d3
 80030c8:	080030df 	.word	0x080030df
 80030cc:	2301      	movs	r3, #1
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e150      	b.n	8003374 <UART_SetConfig+0x348>
 80030d2:	2302      	movs	r3, #2
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e14d      	b.n	8003374 <UART_SetConfig+0x348>
 80030d8:	2304      	movs	r3, #4
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e14a      	b.n	8003374 <UART_SetConfig+0x348>
 80030de:	2308      	movs	r3, #8
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e147      	b.n	8003374 <UART_SetConfig+0x348>
 80030e4:	2310      	movs	r3, #16
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e144      	b.n	8003374 <UART_SetConfig+0x348>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a83      	ldr	r2, [pc, #524]	; (80032fc <UART_SetConfig+0x2d0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d132      	bne.n	800315a <UART_SetConfig+0x12e>
 80030f4:	4b80      	ldr	r3, [pc, #512]	; (80032f8 <UART_SetConfig+0x2cc>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d828      	bhi.n	8003154 <UART_SetConfig+0x128>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0xdc>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	0800313d 	.word	0x0800313d
 800310c:	08003155 	.word	0x08003155
 8003110:	08003155 	.word	0x08003155
 8003114:	08003155 	.word	0x08003155
 8003118:	08003149 	.word	0x08003149
 800311c:	08003155 	.word	0x08003155
 8003120:	08003155 	.word	0x08003155
 8003124:	08003155 	.word	0x08003155
 8003128:	08003143 	.word	0x08003143
 800312c:	08003155 	.word	0x08003155
 8003130:	08003155 	.word	0x08003155
 8003134:	08003155 	.word	0x08003155
 8003138:	0800314f 	.word	0x0800314f
 800313c:	2300      	movs	r3, #0
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e118      	b.n	8003374 <UART_SetConfig+0x348>
 8003142:	2302      	movs	r3, #2
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e115      	b.n	8003374 <UART_SetConfig+0x348>
 8003148:	2304      	movs	r3, #4
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e112      	b.n	8003374 <UART_SetConfig+0x348>
 800314e:	2308      	movs	r3, #8
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e10f      	b.n	8003374 <UART_SetConfig+0x348>
 8003154:	2310      	movs	r3, #16
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e10c      	b.n	8003374 <UART_SetConfig+0x348>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a68      	ldr	r2, [pc, #416]	; (8003300 <UART_SetConfig+0x2d4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d120      	bne.n	80031a6 <UART_SetConfig+0x17a>
 8003164:	4b64      	ldr	r3, [pc, #400]	; (80032f8 <UART_SetConfig+0x2cc>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800316e:	2b30      	cmp	r3, #48	; 0x30
 8003170:	d013      	beq.n	800319a <UART_SetConfig+0x16e>
 8003172:	2b30      	cmp	r3, #48	; 0x30
 8003174:	d814      	bhi.n	80031a0 <UART_SetConfig+0x174>
 8003176:	2b20      	cmp	r3, #32
 8003178:	d009      	beq.n	800318e <UART_SetConfig+0x162>
 800317a:	2b20      	cmp	r3, #32
 800317c:	d810      	bhi.n	80031a0 <UART_SetConfig+0x174>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <UART_SetConfig+0x15c>
 8003182:	2b10      	cmp	r3, #16
 8003184:	d006      	beq.n	8003194 <UART_SetConfig+0x168>
 8003186:	e00b      	b.n	80031a0 <UART_SetConfig+0x174>
 8003188:	2300      	movs	r3, #0
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e0f2      	b.n	8003374 <UART_SetConfig+0x348>
 800318e:	2302      	movs	r3, #2
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e0ef      	b.n	8003374 <UART_SetConfig+0x348>
 8003194:	2304      	movs	r3, #4
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e0ec      	b.n	8003374 <UART_SetConfig+0x348>
 800319a:	2308      	movs	r3, #8
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e0e9      	b.n	8003374 <UART_SetConfig+0x348>
 80031a0:	2310      	movs	r3, #16
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e0e6      	b.n	8003374 <UART_SetConfig+0x348>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a56      	ldr	r2, [pc, #344]	; (8003304 <UART_SetConfig+0x2d8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d120      	bne.n	80031f2 <UART_SetConfig+0x1c6>
 80031b0:	4b51      	ldr	r3, [pc, #324]	; (80032f8 <UART_SetConfig+0x2cc>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031ba:	2bc0      	cmp	r3, #192	; 0xc0
 80031bc:	d013      	beq.n	80031e6 <UART_SetConfig+0x1ba>
 80031be:	2bc0      	cmp	r3, #192	; 0xc0
 80031c0:	d814      	bhi.n	80031ec <UART_SetConfig+0x1c0>
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d009      	beq.n	80031da <UART_SetConfig+0x1ae>
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d810      	bhi.n	80031ec <UART_SetConfig+0x1c0>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <UART_SetConfig+0x1a8>
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d006      	beq.n	80031e0 <UART_SetConfig+0x1b4>
 80031d2:	e00b      	b.n	80031ec <UART_SetConfig+0x1c0>
 80031d4:	2300      	movs	r3, #0
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e0cc      	b.n	8003374 <UART_SetConfig+0x348>
 80031da:	2302      	movs	r3, #2
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e0c9      	b.n	8003374 <UART_SetConfig+0x348>
 80031e0:	2304      	movs	r3, #4
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e0c6      	b.n	8003374 <UART_SetConfig+0x348>
 80031e6:	2308      	movs	r3, #8
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e0c3      	b.n	8003374 <UART_SetConfig+0x348>
 80031ec:	2310      	movs	r3, #16
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e0c0      	b.n	8003374 <UART_SetConfig+0x348>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a44      	ldr	r2, [pc, #272]	; (8003308 <UART_SetConfig+0x2dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d125      	bne.n	8003248 <UART_SetConfig+0x21c>
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <UART_SetConfig+0x2cc>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320a:	d017      	beq.n	800323c <UART_SetConfig+0x210>
 800320c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003210:	d817      	bhi.n	8003242 <UART_SetConfig+0x216>
 8003212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003216:	d00b      	beq.n	8003230 <UART_SetConfig+0x204>
 8003218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321c:	d811      	bhi.n	8003242 <UART_SetConfig+0x216>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <UART_SetConfig+0x1fe>
 8003222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003226:	d006      	beq.n	8003236 <UART_SetConfig+0x20a>
 8003228:	e00b      	b.n	8003242 <UART_SetConfig+0x216>
 800322a:	2300      	movs	r3, #0
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e0a1      	b.n	8003374 <UART_SetConfig+0x348>
 8003230:	2302      	movs	r3, #2
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e09e      	b.n	8003374 <UART_SetConfig+0x348>
 8003236:	2304      	movs	r3, #4
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e09b      	b.n	8003374 <UART_SetConfig+0x348>
 800323c:	2308      	movs	r3, #8
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e098      	b.n	8003374 <UART_SetConfig+0x348>
 8003242:	2310      	movs	r3, #16
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e095      	b.n	8003374 <UART_SetConfig+0x348>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2f      	ldr	r2, [pc, #188]	; (800330c <UART_SetConfig+0x2e0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d125      	bne.n	800329e <UART_SetConfig+0x272>
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <UART_SetConfig+0x2cc>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800325c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003260:	d017      	beq.n	8003292 <UART_SetConfig+0x266>
 8003262:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003266:	d817      	bhi.n	8003298 <UART_SetConfig+0x26c>
 8003268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326c:	d00b      	beq.n	8003286 <UART_SetConfig+0x25a>
 800326e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003272:	d811      	bhi.n	8003298 <UART_SetConfig+0x26c>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <UART_SetConfig+0x254>
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x260>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x26c>
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e076      	b.n	8003374 <UART_SetConfig+0x348>
 8003286:	2302      	movs	r3, #2
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e073      	b.n	8003374 <UART_SetConfig+0x348>
 800328c:	2304      	movs	r3, #4
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e070      	b.n	8003374 <UART_SetConfig+0x348>
 8003292:	2308      	movs	r3, #8
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	e06d      	b.n	8003374 <UART_SetConfig+0x348>
 8003298:	2310      	movs	r3, #16
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e06a      	b.n	8003374 <UART_SetConfig+0x348>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <UART_SetConfig+0x2e4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d138      	bne.n	800331a <UART_SetConfig+0x2ee>
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <UART_SetConfig+0x2cc>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032b6:	d017      	beq.n	80032e8 <UART_SetConfig+0x2bc>
 80032b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032bc:	d82a      	bhi.n	8003314 <UART_SetConfig+0x2e8>
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	d00b      	beq.n	80032dc <UART_SetConfig+0x2b0>
 80032c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c8:	d824      	bhi.n	8003314 <UART_SetConfig+0x2e8>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <UART_SetConfig+0x2aa>
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d006      	beq.n	80032e2 <UART_SetConfig+0x2b6>
 80032d4:	e01e      	b.n	8003314 <UART_SetConfig+0x2e8>
 80032d6:	2300      	movs	r3, #0
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e04b      	b.n	8003374 <UART_SetConfig+0x348>
 80032dc:	2302      	movs	r3, #2
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e048      	b.n	8003374 <UART_SetConfig+0x348>
 80032e2:	2304      	movs	r3, #4
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e045      	b.n	8003374 <UART_SetConfig+0x348>
 80032e8:	2308      	movs	r3, #8
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e042      	b.n	8003374 <UART_SetConfig+0x348>
 80032ee:	bf00      	nop
 80032f0:	efff69f3 	.word	0xefff69f3
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40004400 	.word	0x40004400
 8003300:	40004800 	.word	0x40004800
 8003304:	40004c00 	.word	0x40004c00
 8003308:	40005000 	.word	0x40005000
 800330c:	40011400 	.word	0x40011400
 8003310:	40007800 	.word	0x40007800
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e02c      	b.n	8003374 <UART_SetConfig+0x348>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a72      	ldr	r2, [pc, #456]	; (80034e8 <UART_SetConfig+0x4bc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d125      	bne.n	8003370 <UART_SetConfig+0x344>
 8003324:	4b71      	ldr	r3, [pc, #452]	; (80034ec <UART_SetConfig+0x4c0>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800332e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003332:	d017      	beq.n	8003364 <UART_SetConfig+0x338>
 8003334:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003338:	d817      	bhi.n	800336a <UART_SetConfig+0x33e>
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d00b      	beq.n	8003358 <UART_SetConfig+0x32c>
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d811      	bhi.n	800336a <UART_SetConfig+0x33e>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <UART_SetConfig+0x326>
 800334a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800334e:	d006      	beq.n	800335e <UART_SetConfig+0x332>
 8003350:	e00b      	b.n	800336a <UART_SetConfig+0x33e>
 8003352:	2300      	movs	r3, #0
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e00d      	b.n	8003374 <UART_SetConfig+0x348>
 8003358:	2302      	movs	r3, #2
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e00a      	b.n	8003374 <UART_SetConfig+0x348>
 800335e:	2304      	movs	r3, #4
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e007      	b.n	8003374 <UART_SetConfig+0x348>
 8003364:	2308      	movs	r3, #8
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e004      	b.n	8003374 <UART_SetConfig+0x348>
 800336a:	2310      	movs	r3, #16
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e001      	b.n	8003374 <UART_SetConfig+0x348>
 8003370:	2310      	movs	r3, #16
 8003372:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337c:	d15b      	bne.n	8003436 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800337e:	7ffb      	ldrb	r3, [r7, #31]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d828      	bhi.n	80033d6 <UART_SetConfig+0x3aa>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <UART_SetConfig+0x360>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033c1 	.word	0x080033c1
 8003398:	080033d7 	.word	0x080033d7
 800339c:	080033c7 	.word	0x080033c7
 80033a0:	080033d7 	.word	0x080033d7
 80033a4:	080033d7 	.word	0x080033d7
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033cf 	.word	0x080033cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7fe fc48 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 80033b4:	61b8      	str	r0, [r7, #24]
        break;
 80033b6:	e013      	b.n	80033e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b8:	f7fe fc58 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 80033bc:	61b8      	str	r0, [r7, #24]
        break;
 80033be:	e00f      	b.n	80033e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <UART_SetConfig+0x4c4>)
 80033c2:	61bb      	str	r3, [r7, #24]
        break;
 80033c4:	e00c      	b.n	80033e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7fe fb6b 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 80033ca:	61b8      	str	r0, [r7, #24]
        break;
 80033cc:	e008      	b.n	80033e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	61bb      	str	r3, [r7, #24]
        break;
 80033d4:	e004      	b.n	80033e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	77bb      	strb	r3, [r7, #30]
        break;
 80033de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d074      	beq.n	80034d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	005a      	lsls	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	441a      	add	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	d916      	bls.n	8003430 <UART_SetConfig+0x404>
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d212      	bcs.n	8003430 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f023 030f 	bic.w	r3, r3, #15
 8003412:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	b29b      	uxth	r3, r3
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	b29a      	uxth	r2, r3
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	4313      	orrs	r3, r2
 8003424:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	89fa      	ldrh	r2, [r7, #14]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e04f      	b.n	80034d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77bb      	strb	r3, [r7, #30]
 8003434:	e04c      	b.n	80034d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003436:	7ffb      	ldrb	r3, [r7, #31]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d828      	bhi.n	800348e <UART_SetConfig+0x462>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <UART_SetConfig+0x418>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003469 	.word	0x08003469
 8003448:	08003471 	.word	0x08003471
 800344c:	08003479 	.word	0x08003479
 8003450:	0800348f 	.word	0x0800348f
 8003454:	0800347f 	.word	0x0800347f
 8003458:	0800348f 	.word	0x0800348f
 800345c:	0800348f 	.word	0x0800348f
 8003460:	0800348f 	.word	0x0800348f
 8003464:	08003487 	.word	0x08003487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003468:	f7fe fbec 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 800346c:	61b8      	str	r0, [r7, #24]
        break;
 800346e:	e013      	b.n	8003498 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003470:	f7fe fbfc 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 8003474:	61b8      	str	r0, [r7, #24]
        break;
 8003476:	e00f      	b.n	8003498 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <UART_SetConfig+0x4c4>)
 800347a:	61bb      	str	r3, [r7, #24]
        break;
 800347c:	e00c      	b.n	8003498 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347e:	f7fe fb0f 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8003482:	61b8      	str	r0, [r7, #24]
        break;
 8003484:	e008      	b.n	8003498 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348a:	61bb      	str	r3, [r7, #24]
        break;
 800348c:	e004      	b.n	8003498 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	77bb      	strb	r3, [r7, #30]
        break;
 8003496:	bf00      	nop
    }

    if (pclk != 0U)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d018      	beq.n	80034d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	085a      	lsrs	r2, r3, #1
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	441a      	add	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b0f      	cmp	r3, #15
 80034b6:	d909      	bls.n	80034cc <UART_SetConfig+0x4a0>
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d205      	bcs.n	80034cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	e001      	b.n	80034d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40007c00 	.word	0x40007c00
 80034ec:	40023800 	.word	0x40023800
 80034f0:	00f42400 	.word	0x00f42400

080034f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01a      	beq.n	800360a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f2:	d10a      	bne.n	800360a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003648:	f7fd fb52 	bl	8000cf0 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d10e      	bne.n	800367a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f831 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e027      	b.n	80036ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d10e      	bne.n	80036a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f81b 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e011      	b.n	80036ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b09c      	sub	sp, #112	; 0x70
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e2:	e0a7      	b.n	8003834 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	f000 80a3 	beq.w	8003834 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fd faff 	bl	8000cf0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <UART_WaitOnFlagUntilTimeout+0x32>
 80036fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003700:	2b00      	cmp	r3, #0
 8003702:	d13f      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003718:	667b      	str	r3, [r7, #100]	; 0x64
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003724:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e6      	bne.n	8003704 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3308      	adds	r3, #8
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	663b      	str	r3, [r7, #96]	; 0x60
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3308      	adds	r3, #8
 8003754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003756:	64ba      	str	r2, [r7, #72]	; 0x48
 8003758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800375c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e5      	bne.n	8003736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e068      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d050      	beq.n	8003834 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a0:	d148      	bne.n	8003834 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
 80037cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e6      	bne.n	80037ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	613b      	str	r3, [r7, #16]
   return(result);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3308      	adds	r3, #8
 80037fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037fe:	623a      	str	r2, [r7, #32]
 8003800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	69f9      	ldr	r1, [r7, #28]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	61bb      	str	r3, [r7, #24]
   return(result);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e5      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e010      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4013      	ands	r3, r2
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	429a      	cmp	r2, r3
 8003850:	f43f af48 	beq.w	80036e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3770      	adds	r7, #112	; 0x70
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <siprintf>:
 8003860:	b40e      	push	{r1, r2, r3}
 8003862:	b500      	push	{lr}
 8003864:	b09c      	sub	sp, #112	; 0x70
 8003866:	ab1d      	add	r3, sp, #116	; 0x74
 8003868:	9002      	str	r0, [sp, #8]
 800386a:	9006      	str	r0, [sp, #24]
 800386c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003870:	4809      	ldr	r0, [pc, #36]	; (8003898 <siprintf+0x38>)
 8003872:	9107      	str	r1, [sp, #28]
 8003874:	9104      	str	r1, [sp, #16]
 8003876:	4909      	ldr	r1, [pc, #36]	; (800389c <siprintf+0x3c>)
 8003878:	f853 2b04 	ldr.w	r2, [r3], #4
 800387c:	9105      	str	r1, [sp, #20]
 800387e:	6800      	ldr	r0, [r0, #0]
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	a902      	add	r1, sp, #8
 8003884:	f000 f992 	bl	8003bac <_svfiprintf_r>
 8003888:	9b02      	ldr	r3, [sp, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	b01c      	add	sp, #112	; 0x70
 8003890:	f85d eb04 	ldr.w	lr, [sp], #4
 8003894:	b003      	add	sp, #12
 8003896:	4770      	bx	lr
 8003898:	20000058 	.word	0x20000058
 800389c:	ffff0208 	.word	0xffff0208

080038a0 <memset>:
 80038a0:	4402      	add	r2, r0
 80038a2:	4603      	mov	r3, r0
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d100      	bne.n	80038aa <memset+0xa>
 80038a8:	4770      	bx	lr
 80038aa:	f803 1b01 	strb.w	r1, [r3], #1
 80038ae:	e7f9      	b.n	80038a4 <memset+0x4>

080038b0 <__errno>:
 80038b0:	4b01      	ldr	r3, [pc, #4]	; (80038b8 <__errno+0x8>)
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000058 	.word	0x20000058

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4d0d      	ldr	r5, [pc, #52]	; (80038f4 <__libc_init_array+0x38>)
 80038c0:	4c0d      	ldr	r4, [pc, #52]	; (80038f8 <__libc_init_array+0x3c>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2600      	movs	r6, #0
 80038c8:	42a6      	cmp	r6, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	4d0b      	ldr	r5, [pc, #44]	; (80038fc <__libc_init_array+0x40>)
 80038ce:	4c0c      	ldr	r4, [pc, #48]	; (8003900 <__libc_init_array+0x44>)
 80038d0:	f000 fc6a 	bl	80041a8 <_init>
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	2600      	movs	r6, #0
 80038da:	42a6      	cmp	r6, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e4:	4798      	blx	r3
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ee:	4798      	blx	r3
 80038f0:	3601      	adds	r6, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	08004224 	.word	0x08004224
 80038f8:	08004224 	.word	0x08004224
 80038fc:	08004224 	.word	0x08004224
 8003900:	08004228 	.word	0x08004228

08003904 <__retarget_lock_acquire_recursive>:
 8003904:	4770      	bx	lr

08003906 <__retarget_lock_release_recursive>:
 8003906:	4770      	bx	lr

08003908 <_free_r>:
 8003908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800390a:	2900      	cmp	r1, #0
 800390c:	d044      	beq.n	8003998 <_free_r+0x90>
 800390e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003912:	9001      	str	r0, [sp, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f1a1 0404 	sub.w	r4, r1, #4
 800391a:	bfb8      	it	lt
 800391c:	18e4      	addlt	r4, r4, r3
 800391e:	f000 f8df 	bl	8003ae0 <__malloc_lock>
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <_free_r+0x94>)
 8003924:	9801      	ldr	r0, [sp, #4]
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	b933      	cbnz	r3, 8003938 <_free_r+0x30>
 800392a:	6063      	str	r3, [r4, #4]
 800392c:	6014      	str	r4, [r2, #0]
 800392e:	b003      	add	sp, #12
 8003930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003934:	f000 b8da 	b.w	8003aec <__malloc_unlock>
 8003938:	42a3      	cmp	r3, r4
 800393a:	d908      	bls.n	800394e <_free_r+0x46>
 800393c:	6825      	ldr	r5, [r4, #0]
 800393e:	1961      	adds	r1, r4, r5
 8003940:	428b      	cmp	r3, r1
 8003942:	bf01      	itttt	eq
 8003944:	6819      	ldreq	r1, [r3, #0]
 8003946:	685b      	ldreq	r3, [r3, #4]
 8003948:	1949      	addeq	r1, r1, r5
 800394a:	6021      	streq	r1, [r4, #0]
 800394c:	e7ed      	b.n	800392a <_free_r+0x22>
 800394e:	461a      	mov	r2, r3
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	b10b      	cbz	r3, 8003958 <_free_r+0x50>
 8003954:	42a3      	cmp	r3, r4
 8003956:	d9fa      	bls.n	800394e <_free_r+0x46>
 8003958:	6811      	ldr	r1, [r2, #0]
 800395a:	1855      	adds	r5, r2, r1
 800395c:	42a5      	cmp	r5, r4
 800395e:	d10b      	bne.n	8003978 <_free_r+0x70>
 8003960:	6824      	ldr	r4, [r4, #0]
 8003962:	4421      	add	r1, r4
 8003964:	1854      	adds	r4, r2, r1
 8003966:	42a3      	cmp	r3, r4
 8003968:	6011      	str	r1, [r2, #0]
 800396a:	d1e0      	bne.n	800392e <_free_r+0x26>
 800396c:	681c      	ldr	r4, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	6053      	str	r3, [r2, #4]
 8003972:	440c      	add	r4, r1
 8003974:	6014      	str	r4, [r2, #0]
 8003976:	e7da      	b.n	800392e <_free_r+0x26>
 8003978:	d902      	bls.n	8003980 <_free_r+0x78>
 800397a:	230c      	movs	r3, #12
 800397c:	6003      	str	r3, [r0, #0]
 800397e:	e7d6      	b.n	800392e <_free_r+0x26>
 8003980:	6825      	ldr	r5, [r4, #0]
 8003982:	1961      	adds	r1, r4, r5
 8003984:	428b      	cmp	r3, r1
 8003986:	bf04      	itt	eq
 8003988:	6819      	ldreq	r1, [r3, #0]
 800398a:	685b      	ldreq	r3, [r3, #4]
 800398c:	6063      	str	r3, [r4, #4]
 800398e:	bf04      	itt	eq
 8003990:	1949      	addeq	r1, r1, r5
 8003992:	6021      	streq	r1, [r4, #0]
 8003994:	6054      	str	r4, [r2, #4]
 8003996:	e7ca      	b.n	800392e <_free_r+0x26>
 8003998:	b003      	add	sp, #12
 800399a:	bd30      	pop	{r4, r5, pc}
 800399c:	20000334 	.word	0x20000334

080039a0 <sbrk_aligned>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	4e0e      	ldr	r6, [pc, #56]	; (80039dc <sbrk_aligned+0x3c>)
 80039a4:	460c      	mov	r4, r1
 80039a6:	6831      	ldr	r1, [r6, #0]
 80039a8:	4605      	mov	r5, r0
 80039aa:	b911      	cbnz	r1, 80039b2 <sbrk_aligned+0x12>
 80039ac:	f000 fba6 	bl	80040fc <_sbrk_r>
 80039b0:	6030      	str	r0, [r6, #0]
 80039b2:	4621      	mov	r1, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	f000 fba1 	bl	80040fc <_sbrk_r>
 80039ba:	1c43      	adds	r3, r0, #1
 80039bc:	d00a      	beq.n	80039d4 <sbrk_aligned+0x34>
 80039be:	1cc4      	adds	r4, r0, #3
 80039c0:	f024 0403 	bic.w	r4, r4, #3
 80039c4:	42a0      	cmp	r0, r4
 80039c6:	d007      	beq.n	80039d8 <sbrk_aligned+0x38>
 80039c8:	1a21      	subs	r1, r4, r0
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 fb96 	bl	80040fc <_sbrk_r>
 80039d0:	3001      	adds	r0, #1
 80039d2:	d101      	bne.n	80039d8 <sbrk_aligned+0x38>
 80039d4:	f04f 34ff 	mov.w	r4, #4294967295
 80039d8:	4620      	mov	r0, r4
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	20000338 	.word	0x20000338

080039e0 <_malloc_r>:
 80039e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e4:	1ccd      	adds	r5, r1, #3
 80039e6:	f025 0503 	bic.w	r5, r5, #3
 80039ea:	3508      	adds	r5, #8
 80039ec:	2d0c      	cmp	r5, #12
 80039ee:	bf38      	it	cc
 80039f0:	250c      	movcc	r5, #12
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	4607      	mov	r7, r0
 80039f6:	db01      	blt.n	80039fc <_malloc_r+0x1c>
 80039f8:	42a9      	cmp	r1, r5
 80039fa:	d905      	bls.n	8003a08 <_malloc_r+0x28>
 80039fc:	230c      	movs	r3, #12
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	2600      	movs	r6, #0
 8003a02:	4630      	mov	r0, r6
 8003a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003adc <_malloc_r+0xfc>
 8003a0c:	f000 f868 	bl	8003ae0 <__malloc_lock>
 8003a10:	f8d8 3000 	ldr.w	r3, [r8]
 8003a14:	461c      	mov	r4, r3
 8003a16:	bb5c      	cbnz	r4, 8003a70 <_malloc_r+0x90>
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	f7ff ffc0 	bl	80039a0 <sbrk_aligned>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	4604      	mov	r4, r0
 8003a24:	d155      	bne.n	8003ad2 <_malloc_r+0xf2>
 8003a26:	f8d8 4000 	ldr.w	r4, [r8]
 8003a2a:	4626      	mov	r6, r4
 8003a2c:	2e00      	cmp	r6, #0
 8003a2e:	d145      	bne.n	8003abc <_malloc_r+0xdc>
 8003a30:	2c00      	cmp	r4, #0
 8003a32:	d048      	beq.n	8003ac6 <_malloc_r+0xe6>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	4631      	mov	r1, r6
 8003a38:	4638      	mov	r0, r7
 8003a3a:	eb04 0903 	add.w	r9, r4, r3
 8003a3e:	f000 fb5d 	bl	80040fc <_sbrk_r>
 8003a42:	4581      	cmp	r9, r0
 8003a44:	d13f      	bne.n	8003ac6 <_malloc_r+0xe6>
 8003a46:	6821      	ldr	r1, [r4, #0]
 8003a48:	1a6d      	subs	r5, r5, r1
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f7ff ffa7 	bl	80039a0 <sbrk_aligned>
 8003a52:	3001      	adds	r0, #1
 8003a54:	d037      	beq.n	8003ac6 <_malloc_r+0xe6>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	442b      	add	r3, r5
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d038      	beq.n	8003ad6 <_malloc_r+0xf6>
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	42a2      	cmp	r2, r4
 8003a68:	d12b      	bne.n	8003ac2 <_malloc_r+0xe2>
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	e00f      	b.n	8003a90 <_malloc_r+0xb0>
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	1b52      	subs	r2, r2, r5
 8003a74:	d41f      	bmi.n	8003ab6 <_malloc_r+0xd6>
 8003a76:	2a0b      	cmp	r2, #11
 8003a78:	d917      	bls.n	8003aaa <_malloc_r+0xca>
 8003a7a:	1961      	adds	r1, r4, r5
 8003a7c:	42a3      	cmp	r3, r4
 8003a7e:	6025      	str	r5, [r4, #0]
 8003a80:	bf18      	it	ne
 8003a82:	6059      	strne	r1, [r3, #4]
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	bf08      	it	eq
 8003a88:	f8c8 1000 	streq.w	r1, [r8]
 8003a8c:	5162      	str	r2, [r4, r5]
 8003a8e:	604b      	str	r3, [r1, #4]
 8003a90:	4638      	mov	r0, r7
 8003a92:	f104 060b 	add.w	r6, r4, #11
 8003a96:	f000 f829 	bl	8003aec <__malloc_unlock>
 8003a9a:	f026 0607 	bic.w	r6, r6, #7
 8003a9e:	1d23      	adds	r3, r4, #4
 8003aa0:	1af2      	subs	r2, r6, r3
 8003aa2:	d0ae      	beq.n	8003a02 <_malloc_r+0x22>
 8003aa4:	1b9b      	subs	r3, r3, r6
 8003aa6:	50a3      	str	r3, [r4, r2]
 8003aa8:	e7ab      	b.n	8003a02 <_malloc_r+0x22>
 8003aaa:	42a3      	cmp	r3, r4
 8003aac:	6862      	ldr	r2, [r4, #4]
 8003aae:	d1dd      	bne.n	8003a6c <_malloc_r+0x8c>
 8003ab0:	f8c8 2000 	str.w	r2, [r8]
 8003ab4:	e7ec      	b.n	8003a90 <_malloc_r+0xb0>
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	6864      	ldr	r4, [r4, #4]
 8003aba:	e7ac      	b.n	8003a16 <_malloc_r+0x36>
 8003abc:	4634      	mov	r4, r6
 8003abe:	6876      	ldr	r6, [r6, #4]
 8003ac0:	e7b4      	b.n	8003a2c <_malloc_r+0x4c>
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	e7cc      	b.n	8003a60 <_malloc_r+0x80>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4638      	mov	r0, r7
 8003acc:	f000 f80e 	bl	8003aec <__malloc_unlock>
 8003ad0:	e797      	b.n	8003a02 <_malloc_r+0x22>
 8003ad2:	6025      	str	r5, [r4, #0]
 8003ad4:	e7dc      	b.n	8003a90 <_malloc_r+0xb0>
 8003ad6:	605b      	str	r3, [r3, #4]
 8003ad8:	deff      	udf	#255	; 0xff
 8003ada:	bf00      	nop
 8003adc:	20000334 	.word	0x20000334

08003ae0 <__malloc_lock>:
 8003ae0:	4801      	ldr	r0, [pc, #4]	; (8003ae8 <__malloc_lock+0x8>)
 8003ae2:	f7ff bf0f 	b.w	8003904 <__retarget_lock_acquire_recursive>
 8003ae6:	bf00      	nop
 8003ae8:	20000330 	.word	0x20000330

08003aec <__malloc_unlock>:
 8003aec:	4801      	ldr	r0, [pc, #4]	; (8003af4 <__malloc_unlock+0x8>)
 8003aee:	f7ff bf0a 	b.w	8003906 <__retarget_lock_release_recursive>
 8003af2:	bf00      	nop
 8003af4:	20000330 	.word	0x20000330

08003af8 <__ssputs_r>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	688e      	ldr	r6, [r1, #8]
 8003afe:	461f      	mov	r7, r3
 8003b00:	42be      	cmp	r6, r7
 8003b02:	680b      	ldr	r3, [r1, #0]
 8003b04:	4682      	mov	sl, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	4690      	mov	r8, r2
 8003b0a:	d82c      	bhi.n	8003b66 <__ssputs_r+0x6e>
 8003b0c:	898a      	ldrh	r2, [r1, #12]
 8003b0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b12:	d026      	beq.n	8003b62 <__ssputs_r+0x6a>
 8003b14:	6965      	ldr	r5, [r4, #20]
 8003b16:	6909      	ldr	r1, [r1, #16]
 8003b18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b1c:	eba3 0901 	sub.w	r9, r3, r1
 8003b20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b24:	1c7b      	adds	r3, r7, #1
 8003b26:	444b      	add	r3, r9
 8003b28:	106d      	asrs	r5, r5, #1
 8003b2a:	429d      	cmp	r5, r3
 8003b2c:	bf38      	it	cc
 8003b2e:	461d      	movcc	r5, r3
 8003b30:	0553      	lsls	r3, r2, #21
 8003b32:	d527      	bpl.n	8003b84 <__ssputs_r+0x8c>
 8003b34:	4629      	mov	r1, r5
 8003b36:	f7ff ff53 	bl	80039e0 <_malloc_r>
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	b360      	cbz	r0, 8003b98 <__ssputs_r+0xa0>
 8003b3e:	6921      	ldr	r1, [r4, #16]
 8003b40:	464a      	mov	r2, r9
 8003b42:	f000 faeb 	bl	800411c <memcpy>
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	6126      	str	r6, [r4, #16]
 8003b54:	6165      	str	r5, [r4, #20]
 8003b56:	444e      	add	r6, r9
 8003b58:	eba5 0509 	sub.w	r5, r5, r9
 8003b5c:	6026      	str	r6, [r4, #0]
 8003b5e:	60a5      	str	r5, [r4, #8]
 8003b60:	463e      	mov	r6, r7
 8003b62:	42be      	cmp	r6, r7
 8003b64:	d900      	bls.n	8003b68 <__ssputs_r+0x70>
 8003b66:	463e      	mov	r6, r7
 8003b68:	6820      	ldr	r0, [r4, #0]
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	f000 faab 	bl	80040c8 <memmove>
 8003b72:	68a3      	ldr	r3, [r4, #8]
 8003b74:	1b9b      	subs	r3, r3, r6
 8003b76:	60a3      	str	r3, [r4, #8]
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	4433      	add	r3, r6
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b84:	462a      	mov	r2, r5
 8003b86:	f000 fad7 	bl	8004138 <_realloc_r>
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d1e0      	bne.n	8003b52 <__ssputs_r+0x5a>
 8003b90:	6921      	ldr	r1, [r4, #16]
 8003b92:	4650      	mov	r0, sl
 8003b94:	f7ff feb8 	bl	8003908 <_free_r>
 8003b98:	230c      	movs	r3, #12
 8003b9a:	f8ca 3000 	str.w	r3, [sl]
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8003baa:	e7e9      	b.n	8003b80 <__ssputs_r+0x88>

08003bac <_svfiprintf_r>:
 8003bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	4698      	mov	r8, r3
 8003bb2:	898b      	ldrh	r3, [r1, #12]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	b09d      	sub	sp, #116	; 0x74
 8003bb8:	4607      	mov	r7, r0
 8003bba:	460d      	mov	r5, r1
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	d50e      	bpl.n	8003bde <_svfiprintf_r+0x32>
 8003bc0:	690b      	ldr	r3, [r1, #16]
 8003bc2:	b963      	cbnz	r3, 8003bde <_svfiprintf_r+0x32>
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	f7ff ff0b 	bl	80039e0 <_malloc_r>
 8003bca:	6028      	str	r0, [r5, #0]
 8003bcc:	6128      	str	r0, [r5, #16]
 8003bce:	b920      	cbnz	r0, 8003bda <_svfiprintf_r+0x2e>
 8003bd0:	230c      	movs	r3, #12
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd8:	e0d0      	b.n	8003d7c <_svfiprintf_r+0x1d0>
 8003bda:	2340      	movs	r3, #64	; 0x40
 8003bdc:	616b      	str	r3, [r5, #20]
 8003bde:	2300      	movs	r3, #0
 8003be0:	9309      	str	r3, [sp, #36]	; 0x24
 8003be2:	2320      	movs	r3, #32
 8003be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bec:	2330      	movs	r3, #48	; 0x30
 8003bee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d94 <_svfiprintf_r+0x1e8>
 8003bf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bf6:	f04f 0901 	mov.w	r9, #1
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	469a      	mov	sl, r3
 8003bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c02:	b10a      	cbz	r2, 8003c08 <_svfiprintf_r+0x5c>
 8003c04:	2a25      	cmp	r2, #37	; 0x25
 8003c06:	d1f9      	bne.n	8003bfc <_svfiprintf_r+0x50>
 8003c08:	ebba 0b04 	subs.w	fp, sl, r4
 8003c0c:	d00b      	beq.n	8003c26 <_svfiprintf_r+0x7a>
 8003c0e:	465b      	mov	r3, fp
 8003c10:	4622      	mov	r2, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	4638      	mov	r0, r7
 8003c16:	f7ff ff6f 	bl	8003af8 <__ssputs_r>
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	f000 80a9 	beq.w	8003d72 <_svfiprintf_r+0x1c6>
 8003c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c22:	445a      	add	r2, fp
 8003c24:	9209      	str	r2, [sp, #36]	; 0x24
 8003c26:	f89a 3000 	ldrb.w	r3, [sl]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80a1 	beq.w	8003d72 <_svfiprintf_r+0x1c6>
 8003c30:	2300      	movs	r3, #0
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295
 8003c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c3a:	f10a 0a01 	add.w	sl, sl, #1
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	9307      	str	r3, [sp, #28]
 8003c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c46:	931a      	str	r3, [sp, #104]	; 0x68
 8003c48:	4654      	mov	r4, sl
 8003c4a:	2205      	movs	r2, #5
 8003c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c50:	4850      	ldr	r0, [pc, #320]	; (8003d94 <_svfiprintf_r+0x1e8>)
 8003c52:	f7fc fafd 	bl	8000250 <memchr>
 8003c56:	9a04      	ldr	r2, [sp, #16]
 8003c58:	b9d8      	cbnz	r0, 8003c92 <_svfiprintf_r+0xe6>
 8003c5a:	06d0      	lsls	r0, r2, #27
 8003c5c:	bf44      	itt	mi
 8003c5e:	2320      	movmi	r3, #32
 8003c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c64:	0711      	lsls	r1, r2, #28
 8003c66:	bf44      	itt	mi
 8003c68:	232b      	movmi	r3, #43	; 0x2b
 8003c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c72:	2b2a      	cmp	r3, #42	; 0x2a
 8003c74:	d015      	beq.n	8003ca2 <_svfiprintf_r+0xf6>
 8003c76:	9a07      	ldr	r2, [sp, #28]
 8003c78:	4654      	mov	r4, sl
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f04f 0c0a 	mov.w	ip, #10
 8003c80:	4621      	mov	r1, r4
 8003c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c86:	3b30      	subs	r3, #48	; 0x30
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d94d      	bls.n	8003d28 <_svfiprintf_r+0x17c>
 8003c8c:	b1b0      	cbz	r0, 8003cbc <_svfiprintf_r+0x110>
 8003c8e:	9207      	str	r2, [sp, #28]
 8003c90:	e014      	b.n	8003cbc <_svfiprintf_r+0x110>
 8003c92:	eba0 0308 	sub.w	r3, r0, r8
 8003c96:	fa09 f303 	lsl.w	r3, r9, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	9304      	str	r3, [sp, #16]
 8003c9e:	46a2      	mov	sl, r4
 8003ca0:	e7d2      	b.n	8003c48 <_svfiprintf_r+0x9c>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	1d19      	adds	r1, r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	9103      	str	r1, [sp, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfbb      	ittet	lt
 8003cae:	425b      	neglt	r3, r3
 8003cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cb4:	9307      	strge	r3, [sp, #28]
 8003cb6:	9307      	strlt	r3, [sp, #28]
 8003cb8:	bfb8      	it	lt
 8003cba:	9204      	strlt	r2, [sp, #16]
 8003cbc:	7823      	ldrb	r3, [r4, #0]
 8003cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8003cc0:	d10c      	bne.n	8003cdc <_svfiprintf_r+0x130>
 8003cc2:	7863      	ldrb	r3, [r4, #1]
 8003cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc6:	d134      	bne.n	8003d32 <_svfiprintf_r+0x186>
 8003cc8:	9b03      	ldr	r3, [sp, #12]
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	9203      	str	r2, [sp, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bfb8      	it	lt
 8003cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cd8:	3402      	adds	r4, #2
 8003cda:	9305      	str	r3, [sp, #20]
 8003cdc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003da4 <_svfiprintf_r+0x1f8>
 8003ce0:	7821      	ldrb	r1, [r4, #0]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	f7fc fab3 	bl	8000250 <memchr>
 8003cea:	b138      	cbz	r0, 8003cfc <_svfiprintf_r+0x150>
 8003cec:	9b04      	ldr	r3, [sp, #16]
 8003cee:	eba0 000a 	sub.w	r0, r0, sl
 8003cf2:	2240      	movs	r2, #64	; 0x40
 8003cf4:	4082      	lsls	r2, r0
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	3401      	adds	r4, #1
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d00:	4825      	ldr	r0, [pc, #148]	; (8003d98 <_svfiprintf_r+0x1ec>)
 8003d02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d06:	2206      	movs	r2, #6
 8003d08:	f7fc faa2 	bl	8000250 <memchr>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d038      	beq.n	8003d82 <_svfiprintf_r+0x1d6>
 8003d10:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <_svfiprintf_r+0x1f0>)
 8003d12:	bb1b      	cbnz	r3, 8003d5c <_svfiprintf_r+0x1b0>
 8003d14:	9b03      	ldr	r3, [sp, #12]
 8003d16:	3307      	adds	r3, #7
 8003d18:	f023 0307 	bic.w	r3, r3, #7
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d22:	4433      	add	r3, r6
 8003d24:	9309      	str	r3, [sp, #36]	; 0x24
 8003d26:	e768      	b.n	8003bfa <_svfiprintf_r+0x4e>
 8003d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	2001      	movs	r0, #1
 8003d30:	e7a6      	b.n	8003c80 <_svfiprintf_r+0xd4>
 8003d32:	2300      	movs	r3, #0
 8003d34:	3401      	adds	r4, #1
 8003d36:	9305      	str	r3, [sp, #20]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f04f 0c0a 	mov.w	ip, #10
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d44:	3a30      	subs	r2, #48	; 0x30
 8003d46:	2a09      	cmp	r2, #9
 8003d48:	d903      	bls.n	8003d52 <_svfiprintf_r+0x1a6>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0c6      	beq.n	8003cdc <_svfiprintf_r+0x130>
 8003d4e:	9105      	str	r1, [sp, #20]
 8003d50:	e7c4      	b.n	8003cdc <_svfiprintf_r+0x130>
 8003d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d56:	4604      	mov	r4, r0
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e7f0      	b.n	8003d3e <_svfiprintf_r+0x192>
 8003d5c:	ab03      	add	r3, sp, #12
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	462a      	mov	r2, r5
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <_svfiprintf_r+0x1f4>)
 8003d64:	a904      	add	r1, sp, #16
 8003d66:	4638      	mov	r0, r7
 8003d68:	f3af 8000 	nop.w
 8003d6c:	1c42      	adds	r2, r0, #1
 8003d6e:	4606      	mov	r6, r0
 8003d70:	d1d6      	bne.n	8003d20 <_svfiprintf_r+0x174>
 8003d72:	89ab      	ldrh	r3, [r5, #12]
 8003d74:	065b      	lsls	r3, r3, #25
 8003d76:	f53f af2d 	bmi.w	8003bd4 <_svfiprintf_r+0x28>
 8003d7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d7c:	b01d      	add	sp, #116	; 0x74
 8003d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d82:	ab03      	add	r3, sp, #12
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	462a      	mov	r2, r5
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <_svfiprintf_r+0x1f4>)
 8003d8a:	a904      	add	r1, sp, #16
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f000 f879 	bl	8003e84 <_printf_i>
 8003d92:	e7eb      	b.n	8003d6c <_svfiprintf_r+0x1c0>
 8003d94:	080041e8 	.word	0x080041e8
 8003d98:	080041f2 	.word	0x080041f2
 8003d9c:	00000000 	.word	0x00000000
 8003da0:	08003af9 	.word	0x08003af9
 8003da4:	080041ee 	.word	0x080041ee

08003da8 <_printf_common>:
 8003da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	4616      	mov	r6, r2
 8003dae:	4699      	mov	r9, r3
 8003db0:	688a      	ldr	r2, [r1, #8]
 8003db2:	690b      	ldr	r3, [r1, #16]
 8003db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bfb8      	it	lt
 8003dbc:	4613      	movlt	r3, r2
 8003dbe:	6033      	str	r3, [r6, #0]
 8003dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	b10a      	cbz	r2, 8003dce <_printf_common+0x26>
 8003dca:	3301      	adds	r3, #1
 8003dcc:	6033      	str	r3, [r6, #0]
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	0699      	lsls	r1, r3, #26
 8003dd2:	bf42      	ittt	mi
 8003dd4:	6833      	ldrmi	r3, [r6, #0]
 8003dd6:	3302      	addmi	r3, #2
 8003dd8:	6033      	strmi	r3, [r6, #0]
 8003dda:	6825      	ldr	r5, [r4, #0]
 8003ddc:	f015 0506 	ands.w	r5, r5, #6
 8003de0:	d106      	bne.n	8003df0 <_printf_common+0x48>
 8003de2:	f104 0a19 	add.w	sl, r4, #25
 8003de6:	68e3      	ldr	r3, [r4, #12]
 8003de8:	6832      	ldr	r2, [r6, #0]
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	42ab      	cmp	r3, r5
 8003dee:	dc26      	bgt.n	8003e3e <_printf_common+0x96>
 8003df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003df4:	1e13      	subs	r3, r2, #0
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	bf18      	it	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	0692      	lsls	r2, r2, #26
 8003dfe:	d42b      	bmi.n	8003e58 <_printf_common+0xb0>
 8003e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e04:	4649      	mov	r1, r9
 8003e06:	4638      	mov	r0, r7
 8003e08:	47c0      	blx	r8
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d01e      	beq.n	8003e4c <_printf_common+0xa4>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	f003 0306 	and.w	r3, r3, #6
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	bf02      	ittt	eq
 8003e1a:	68e5      	ldreq	r5, [r4, #12]
 8003e1c:	6833      	ldreq	r3, [r6, #0]
 8003e1e:	1aed      	subeq	r5, r5, r3
 8003e20:	68a3      	ldr	r3, [r4, #8]
 8003e22:	bf0c      	ite	eq
 8003e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e28:	2500      	movne	r5, #0
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	bfc4      	itt	gt
 8003e2e:	1a9b      	subgt	r3, r3, r2
 8003e30:	18ed      	addgt	r5, r5, r3
 8003e32:	2600      	movs	r6, #0
 8003e34:	341a      	adds	r4, #26
 8003e36:	42b5      	cmp	r5, r6
 8003e38:	d11a      	bne.n	8003e70 <_printf_common+0xc8>
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e008      	b.n	8003e50 <_printf_common+0xa8>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4652      	mov	r2, sl
 8003e42:	4649      	mov	r1, r9
 8003e44:	4638      	mov	r0, r7
 8003e46:	47c0      	blx	r8
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d103      	bne.n	8003e54 <_printf_common+0xac>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e54:	3501      	adds	r5, #1
 8003e56:	e7c6      	b.n	8003de6 <_printf_common+0x3e>
 8003e58:	18e1      	adds	r1, r4, r3
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	2030      	movs	r0, #48	; 0x30
 8003e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e62:	4422      	add	r2, r4
 8003e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	e7c7      	b.n	8003e00 <_printf_common+0x58>
 8003e70:	2301      	movs	r3, #1
 8003e72:	4622      	mov	r2, r4
 8003e74:	4649      	mov	r1, r9
 8003e76:	4638      	mov	r0, r7
 8003e78:	47c0      	blx	r8
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d0e6      	beq.n	8003e4c <_printf_common+0xa4>
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7d9      	b.n	8003e36 <_printf_common+0x8e>
	...

08003e84 <_printf_i>:
 8003e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	7e0f      	ldrb	r7, [r1, #24]
 8003e8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e8c:	2f78      	cmp	r7, #120	; 0x78
 8003e8e:	4691      	mov	r9, r2
 8003e90:	4680      	mov	r8, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	469a      	mov	sl, r3
 8003e96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e9a:	d807      	bhi.n	8003eac <_printf_i+0x28>
 8003e9c:	2f62      	cmp	r7, #98	; 0x62
 8003e9e:	d80a      	bhi.n	8003eb6 <_printf_i+0x32>
 8003ea0:	2f00      	cmp	r7, #0
 8003ea2:	f000 80d4 	beq.w	800404e <_printf_i+0x1ca>
 8003ea6:	2f58      	cmp	r7, #88	; 0x58
 8003ea8:	f000 80c0 	beq.w	800402c <_printf_i+0x1a8>
 8003eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eb4:	e03a      	b.n	8003f2c <_printf_i+0xa8>
 8003eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eba:	2b15      	cmp	r3, #21
 8003ebc:	d8f6      	bhi.n	8003eac <_printf_i+0x28>
 8003ebe:	a101      	add	r1, pc, #4	; (adr r1, 8003ec4 <_printf_i+0x40>)
 8003ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ec4:	08003f1d 	.word	0x08003f1d
 8003ec8:	08003f31 	.word	0x08003f31
 8003ecc:	08003ead 	.word	0x08003ead
 8003ed0:	08003ead 	.word	0x08003ead
 8003ed4:	08003ead 	.word	0x08003ead
 8003ed8:	08003ead 	.word	0x08003ead
 8003edc:	08003f31 	.word	0x08003f31
 8003ee0:	08003ead 	.word	0x08003ead
 8003ee4:	08003ead 	.word	0x08003ead
 8003ee8:	08003ead 	.word	0x08003ead
 8003eec:	08003ead 	.word	0x08003ead
 8003ef0:	08004035 	.word	0x08004035
 8003ef4:	08003f5d 	.word	0x08003f5d
 8003ef8:	08003fef 	.word	0x08003fef
 8003efc:	08003ead 	.word	0x08003ead
 8003f00:	08003ead 	.word	0x08003ead
 8003f04:	08004057 	.word	0x08004057
 8003f08:	08003ead 	.word	0x08003ead
 8003f0c:	08003f5d 	.word	0x08003f5d
 8003f10:	08003ead 	.word	0x08003ead
 8003f14:	08003ead 	.word	0x08003ead
 8003f18:	08003ff7 	.word	0x08003ff7
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	1d1a      	adds	r2, r3, #4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	602a      	str	r2, [r5, #0]
 8003f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e09f      	b.n	8004070 <_printf_i+0x1ec>
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	0607      	lsls	r7, r0, #24
 8003f36:	f103 0104 	add.w	r1, r3, #4
 8003f3a:	6029      	str	r1, [r5, #0]
 8003f3c:	d501      	bpl.n	8003f42 <_printf_i+0xbe>
 8003f3e:	681e      	ldr	r6, [r3, #0]
 8003f40:	e003      	b.n	8003f4a <_printf_i+0xc6>
 8003f42:	0646      	lsls	r6, r0, #25
 8003f44:	d5fb      	bpl.n	8003f3e <_printf_i+0xba>
 8003f46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f4a:	2e00      	cmp	r6, #0
 8003f4c:	da03      	bge.n	8003f56 <_printf_i+0xd2>
 8003f4e:	232d      	movs	r3, #45	; 0x2d
 8003f50:	4276      	negs	r6, r6
 8003f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f56:	485a      	ldr	r0, [pc, #360]	; (80040c0 <_printf_i+0x23c>)
 8003f58:	230a      	movs	r3, #10
 8003f5a:	e012      	b.n	8003f82 <_printf_i+0xfe>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	6820      	ldr	r0, [r4, #0]
 8003f60:	1d19      	adds	r1, r3, #4
 8003f62:	6029      	str	r1, [r5, #0]
 8003f64:	0605      	lsls	r5, r0, #24
 8003f66:	d501      	bpl.n	8003f6c <_printf_i+0xe8>
 8003f68:	681e      	ldr	r6, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <_printf_i+0xee>
 8003f6c:	0641      	lsls	r1, r0, #25
 8003f6e:	d5fb      	bpl.n	8003f68 <_printf_i+0xe4>
 8003f70:	881e      	ldrh	r6, [r3, #0]
 8003f72:	4853      	ldr	r0, [pc, #332]	; (80040c0 <_printf_i+0x23c>)
 8003f74:	2f6f      	cmp	r7, #111	; 0x6f
 8003f76:	bf0c      	ite	eq
 8003f78:	2308      	moveq	r3, #8
 8003f7a:	230a      	movne	r3, #10
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f82:	6865      	ldr	r5, [r4, #4]
 8003f84:	60a5      	str	r5, [r4, #8]
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	bfa2      	ittt	ge
 8003f8a:	6821      	ldrge	r1, [r4, #0]
 8003f8c:	f021 0104 	bicge.w	r1, r1, #4
 8003f90:	6021      	strge	r1, [r4, #0]
 8003f92:	b90e      	cbnz	r6, 8003f98 <_printf_i+0x114>
 8003f94:	2d00      	cmp	r5, #0
 8003f96:	d04b      	beq.n	8004030 <_printf_i+0x1ac>
 8003f98:	4615      	mov	r5, r2
 8003f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8003fa2:	5dc7      	ldrb	r7, [r0, r7]
 8003fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fa8:	4637      	mov	r7, r6
 8003faa:	42bb      	cmp	r3, r7
 8003fac:	460e      	mov	r6, r1
 8003fae:	d9f4      	bls.n	8003f9a <_printf_i+0x116>
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d10b      	bne.n	8003fcc <_printf_i+0x148>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	07de      	lsls	r6, r3, #31
 8003fb8:	d508      	bpl.n	8003fcc <_printf_i+0x148>
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	6861      	ldr	r1, [r4, #4]
 8003fbe:	4299      	cmp	r1, r3
 8003fc0:	bfde      	ittt	le
 8003fc2:	2330      	movle	r3, #48	; 0x30
 8003fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fcc:	1b52      	subs	r2, r2, r5
 8003fce:	6122      	str	r2, [r4, #16]
 8003fd0:	f8cd a000 	str.w	sl, [sp]
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	aa03      	add	r2, sp, #12
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f7ff fee4 	bl	8003da8 <_printf_common>
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d14a      	bne.n	800407a <_printf_i+0x1f6>
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	b004      	add	sp, #16
 8003fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	f043 0320 	orr.w	r3, r3, #32
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	4833      	ldr	r0, [pc, #204]	; (80040c4 <_printf_i+0x240>)
 8003ff8:	2778      	movs	r7, #120	; 0x78
 8003ffa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	6829      	ldr	r1, [r5, #0]
 8004002:	061f      	lsls	r7, r3, #24
 8004004:	f851 6b04 	ldr.w	r6, [r1], #4
 8004008:	d402      	bmi.n	8004010 <_printf_i+0x18c>
 800400a:	065f      	lsls	r7, r3, #25
 800400c:	bf48      	it	mi
 800400e:	b2b6      	uxthmi	r6, r6
 8004010:	07df      	lsls	r7, r3, #31
 8004012:	bf48      	it	mi
 8004014:	f043 0320 	orrmi.w	r3, r3, #32
 8004018:	6029      	str	r1, [r5, #0]
 800401a:	bf48      	it	mi
 800401c:	6023      	strmi	r3, [r4, #0]
 800401e:	b91e      	cbnz	r6, 8004028 <_printf_i+0x1a4>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f023 0320 	bic.w	r3, r3, #32
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	2310      	movs	r3, #16
 800402a:	e7a7      	b.n	8003f7c <_printf_i+0xf8>
 800402c:	4824      	ldr	r0, [pc, #144]	; (80040c0 <_printf_i+0x23c>)
 800402e:	e7e4      	b.n	8003ffa <_printf_i+0x176>
 8004030:	4615      	mov	r5, r2
 8004032:	e7bd      	b.n	8003fb0 <_printf_i+0x12c>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	6826      	ldr	r6, [r4, #0]
 8004038:	6961      	ldr	r1, [r4, #20]
 800403a:	1d18      	adds	r0, r3, #4
 800403c:	6028      	str	r0, [r5, #0]
 800403e:	0635      	lsls	r5, r6, #24
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	d501      	bpl.n	8004048 <_printf_i+0x1c4>
 8004044:	6019      	str	r1, [r3, #0]
 8004046:	e002      	b.n	800404e <_printf_i+0x1ca>
 8004048:	0670      	lsls	r0, r6, #25
 800404a:	d5fb      	bpl.n	8004044 <_printf_i+0x1c0>
 800404c:	8019      	strh	r1, [r3, #0]
 800404e:	2300      	movs	r3, #0
 8004050:	6123      	str	r3, [r4, #16]
 8004052:	4615      	mov	r5, r2
 8004054:	e7bc      	b.n	8003fd0 <_printf_i+0x14c>
 8004056:	682b      	ldr	r3, [r5, #0]
 8004058:	1d1a      	adds	r2, r3, #4
 800405a:	602a      	str	r2, [r5, #0]
 800405c:	681d      	ldr	r5, [r3, #0]
 800405e:	6862      	ldr	r2, [r4, #4]
 8004060:	2100      	movs	r1, #0
 8004062:	4628      	mov	r0, r5
 8004064:	f7fc f8f4 	bl	8000250 <memchr>
 8004068:	b108      	cbz	r0, 800406e <_printf_i+0x1ea>
 800406a:	1b40      	subs	r0, r0, r5
 800406c:	6060      	str	r0, [r4, #4]
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	2300      	movs	r3, #0
 8004074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004078:	e7aa      	b.n	8003fd0 <_printf_i+0x14c>
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	462a      	mov	r2, r5
 800407e:	4649      	mov	r1, r9
 8004080:	4640      	mov	r0, r8
 8004082:	47d0      	blx	sl
 8004084:	3001      	adds	r0, #1
 8004086:	d0ad      	beq.n	8003fe4 <_printf_i+0x160>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	079b      	lsls	r3, r3, #30
 800408c:	d413      	bmi.n	80040b6 <_printf_i+0x232>
 800408e:	68e0      	ldr	r0, [r4, #12]
 8004090:	9b03      	ldr	r3, [sp, #12]
 8004092:	4298      	cmp	r0, r3
 8004094:	bfb8      	it	lt
 8004096:	4618      	movlt	r0, r3
 8004098:	e7a6      	b.n	8003fe8 <_printf_i+0x164>
 800409a:	2301      	movs	r3, #1
 800409c:	4632      	mov	r2, r6
 800409e:	4649      	mov	r1, r9
 80040a0:	4640      	mov	r0, r8
 80040a2:	47d0      	blx	sl
 80040a4:	3001      	adds	r0, #1
 80040a6:	d09d      	beq.n	8003fe4 <_printf_i+0x160>
 80040a8:	3501      	adds	r5, #1
 80040aa:	68e3      	ldr	r3, [r4, #12]
 80040ac:	9903      	ldr	r1, [sp, #12]
 80040ae:	1a5b      	subs	r3, r3, r1
 80040b0:	42ab      	cmp	r3, r5
 80040b2:	dcf2      	bgt.n	800409a <_printf_i+0x216>
 80040b4:	e7eb      	b.n	800408e <_printf_i+0x20a>
 80040b6:	2500      	movs	r5, #0
 80040b8:	f104 0619 	add.w	r6, r4, #25
 80040bc:	e7f5      	b.n	80040aa <_printf_i+0x226>
 80040be:	bf00      	nop
 80040c0:	080041f9 	.word	0x080041f9
 80040c4:	0800420a 	.word	0x0800420a

080040c8 <memmove>:
 80040c8:	4288      	cmp	r0, r1
 80040ca:	b510      	push	{r4, lr}
 80040cc:	eb01 0402 	add.w	r4, r1, r2
 80040d0:	d902      	bls.n	80040d8 <memmove+0x10>
 80040d2:	4284      	cmp	r4, r0
 80040d4:	4623      	mov	r3, r4
 80040d6:	d807      	bhi.n	80040e8 <memmove+0x20>
 80040d8:	1e43      	subs	r3, r0, #1
 80040da:	42a1      	cmp	r1, r4
 80040dc:	d008      	beq.n	80040f0 <memmove+0x28>
 80040de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040e6:	e7f8      	b.n	80040da <memmove+0x12>
 80040e8:	4402      	add	r2, r0
 80040ea:	4601      	mov	r1, r0
 80040ec:	428a      	cmp	r2, r1
 80040ee:	d100      	bne.n	80040f2 <memmove+0x2a>
 80040f0:	bd10      	pop	{r4, pc}
 80040f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040fa:	e7f7      	b.n	80040ec <memmove+0x24>

080040fc <_sbrk_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d06      	ldr	r5, [pc, #24]	; (8004118 <_sbrk_r+0x1c>)
 8004100:	2300      	movs	r3, #0
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fc fbc0 	bl	800088c <_sbrk>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_sbrk_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_sbrk_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	2000032c 	.word	0x2000032c

0800411c <memcpy>:
 800411c:	440a      	add	r2, r1
 800411e:	4291      	cmp	r1, r2
 8004120:	f100 33ff 	add.w	r3, r0, #4294967295
 8004124:	d100      	bne.n	8004128 <memcpy+0xc>
 8004126:	4770      	bx	lr
 8004128:	b510      	push	{r4, lr}
 800412a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800412e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004132:	4291      	cmp	r1, r2
 8004134:	d1f9      	bne.n	800412a <memcpy+0xe>
 8004136:	bd10      	pop	{r4, pc}

08004138 <_realloc_r>:
 8004138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413c:	4680      	mov	r8, r0
 800413e:	4614      	mov	r4, r2
 8004140:	460e      	mov	r6, r1
 8004142:	b921      	cbnz	r1, 800414e <_realloc_r+0x16>
 8004144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	4611      	mov	r1, r2
 800414a:	f7ff bc49 	b.w	80039e0 <_malloc_r>
 800414e:	b92a      	cbnz	r2, 800415c <_realloc_r+0x24>
 8004150:	f7ff fbda 	bl	8003908 <_free_r>
 8004154:	4625      	mov	r5, r4
 8004156:	4628      	mov	r0, r5
 8004158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800415c:	f000 f81b 	bl	8004196 <_malloc_usable_size_r>
 8004160:	4284      	cmp	r4, r0
 8004162:	4607      	mov	r7, r0
 8004164:	d802      	bhi.n	800416c <_realloc_r+0x34>
 8004166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800416a:	d812      	bhi.n	8004192 <_realloc_r+0x5a>
 800416c:	4621      	mov	r1, r4
 800416e:	4640      	mov	r0, r8
 8004170:	f7ff fc36 	bl	80039e0 <_malloc_r>
 8004174:	4605      	mov	r5, r0
 8004176:	2800      	cmp	r0, #0
 8004178:	d0ed      	beq.n	8004156 <_realloc_r+0x1e>
 800417a:	42bc      	cmp	r4, r7
 800417c:	4622      	mov	r2, r4
 800417e:	4631      	mov	r1, r6
 8004180:	bf28      	it	cs
 8004182:	463a      	movcs	r2, r7
 8004184:	f7ff ffca 	bl	800411c <memcpy>
 8004188:	4631      	mov	r1, r6
 800418a:	4640      	mov	r0, r8
 800418c:	f7ff fbbc 	bl	8003908 <_free_r>
 8004190:	e7e1      	b.n	8004156 <_realloc_r+0x1e>
 8004192:	4635      	mov	r5, r6
 8004194:	e7df      	b.n	8004156 <_realloc_r+0x1e>

08004196 <_malloc_usable_size_r>:
 8004196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800419a:	1f18      	subs	r0, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	bfbc      	itt	lt
 80041a0:	580b      	ldrlt	r3, [r1, r0]
 80041a2:	18c0      	addlt	r0, r0, r3
 80041a4:	4770      	bx	lr
	...

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
