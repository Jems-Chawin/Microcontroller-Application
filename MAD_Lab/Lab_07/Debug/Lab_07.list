
Lab_07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b98  08004b98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba0  08004ba0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08004bb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08004bb4  00020110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd8a  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f8  00000000  00000000  0002fe07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00032100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a97  00000000  00000000  00032e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275e8  00000000  00000000  00033927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e67  00000000  00000000  0005af0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7915  00000000  00000000  0006cd76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000381c  00000000  00000000  0016468c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00167ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004b68 	.word	0x08004b68

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004b68 	.word	0x08004b68

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_GPIO_Init+0x5c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a14      	ldr	r2, [pc, #80]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_GPIO_Init+0x5c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a08      	ldr	r2, [pc, #32]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_GPIO_Init+0x5c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fb73 	bl	8000c82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f87e 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f7ff ffc8 	bl	8000534 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005a4:	f000 f9ae 	bl	8000904 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 faaa 	bl	8000b00 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005ac:	2100      	movs	r1, #0
 80005ae:	4834      	ldr	r0, [pc, #208]	; (8000680 <main+0xec>)
 80005b0:	f002 f8fc 	bl	80027ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005b4:	2104      	movs	r1, #4
 80005b6:	4832      	ldr	r0, [pc, #200]	; (8000680 <main+0xec>)
 80005b8:	f002 f8f8 	bl	80027ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005bc:	2108      	movs	r1, #8
 80005be:	4830      	ldr	r0, [pc, #192]	; (8000680 <main+0xec>)
 80005c0:	f002 f8f4 	bl	80027ac <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	492f      	ldr	r1, [pc, #188]	; (8000684 <main+0xf0>)
 80005c8:	482f      	ldr	r0, [pc, #188]	; (8000688 <main+0xf4>)
 80005ca:	f003 f861 	bl	8003690 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  htim2.Instance -> CCR1 = (255-1)*dutyCycleB;
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <main+0xf8>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000690 <main+0xfc>
 80005d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <main+0xec>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e4:	ee17 2a90 	vmov	r2, s15
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
	  htim2.Instance -> CCR2 = (255-1)*dutyCycleG;
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <main+0x100>)
 80005ec:	edd3 7a00 	vldr	s15, [r3]
 80005f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000690 <main+0xfc>
 80005f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <main+0xec>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000600:	ee17 2a90 	vmov	r2, s15
 8000604:	639a      	str	r2, [r3, #56]	; 0x38
	  htim2.Instance -> CCR3 = (255-1)*dutyCycleR;
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <main+0x104>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000690 <main+0xfc>
 8000610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <main+0xec>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800061c:	ee17 2a90 	vmov	r2, s15
 8000620:	63da      	str	r2, [r3, #60]	; 0x3c
//	  dutyCycleB += 0.2;
//	  dutyCycleG += 0.2;
//	  dutyCycleR += 0.2;
	  if (dutyCycleB > 1){
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <main+0xf8>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800062c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	dd03      	ble.n	800063e <main+0xaa>
		  dutyCycleB = 0;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <main+0xf8>)
 8000638:	f04f 0200 	mov.w	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	  }
	  if (dutyCycleR > 1){
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <main+0x104>)
 8000640:	edd3 7a00 	vldr	s15, [r3]
 8000644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000650:	dd03      	ble.n	800065a <main+0xc6>
		  dutyCycleR = 0;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <main+0x104>)
 8000654:	f04f 0200 	mov.w	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
	  }
	  if (dutyCycleG > 1){
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <main+0x100>)
 800065c:	edd3 7a00 	vldr	s15, [r3]
 8000660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066c:	dd03      	ble.n	8000676 <main+0xe2>
		  dutyCycleG = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <main+0x100>)
 8000670:	f04f 0200 	mov.w	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(300);
 8000676:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800067a:	f000 fb5f 	bl	8000d3c <HAL_Delay>
	  htim2.Instance -> CCR1 = (255-1)*dutyCycleB;
 800067e:	e7a6      	b.n	80005ce <main+0x3a>
 8000680:	20000038 	.word	0x20000038
 8000684:	20000028 	.word	0x20000028
 8000688:	20000084 	.word	0x20000084
 800068c:	20000034 	.word	0x20000034
 8000690:	437e0000 	.word	0x437e0000
 8000694:	20000030 	.word	0x20000030
 8000698:	2000002c 	.word	0x2000002c

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2234      	movs	r2, #52	; 0x34
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 fa30 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <SystemClock_Config+0xd4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xd4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a25      	ldr	r2, [pc, #148]	; (8000774 <SystemClock_Config+0xd8>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <SystemClock_Config+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000708:	23d8      	movs	r3, #216	; 0xd8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fed1 	bl	80014c4 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000728:	f000 f87c 	bl	8000824 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800072c:	f000 fe7a 	bl	8001424 <HAL_PWREx_EnableOverDrive>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000736:	f000 f875 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000746:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	2107      	movs	r1, #7
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f961 	bl	8001a20 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000764:	f000 f85e 	bl	8000824 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3750      	adds	r7, #80	; 0x50
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(huart==&huart3){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a23      	ldr	r2, [pc, #140]	; (8000810 <HAL_UART_RxCpltCallback+0x98>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d13a      	bne.n	80007fe <HAL_UART_RxCpltCallback+0x86>
		HAL_UART_Receive_IT(&huart3,(uint8_t*)&ch,1);
 8000788:	2201      	movs	r2, #1
 800078a:	4922      	ldr	r1, [pc, #136]	; (8000814 <HAL_UART_RxCpltCallback+0x9c>)
 800078c:	4820      	ldr	r0, [pc, #128]	; (8000810 <HAL_UART_RxCpltCallback+0x98>)
 800078e:	f002 ff7f 	bl	8003690 <HAL_UART_Receive_IT>
		if(ch=='r'){
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <HAL_UART_RxCpltCallback+0x9c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b72      	cmp	r3, #114	; 0x72
 8000798:	d10d      	bne.n	80007b6 <HAL_UART_RxCpltCallback+0x3e>
			dutyCycleR += 0.2;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_UART_RxCpltCallback+0xa0>)
 800079c:	edd3 7a00 	vldr	s15, [r3]
 80007a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000808 <HAL_UART_RxCpltCallback+0x90>
 80007a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_UART_RxCpltCallback+0xa0>)
 80007b2:	edc3 7a00 	vstr	s15, [r3]
		}
		if(ch=='g'){
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_UART_RxCpltCallback+0x9c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b67      	cmp	r3, #103	; 0x67
 80007bc:	d10d      	bne.n	80007da <HAL_UART_RxCpltCallback+0x62>
			dutyCycleG += 0.2;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <HAL_UART_RxCpltCallback+0xa4>)
 80007c0:	edd3 7a00 	vldr	s15, [r3]
 80007c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007c8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000808 <HAL_UART_RxCpltCallback+0x90>
 80007cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_UART_RxCpltCallback+0xa4>)
 80007d6:	edc3 7a00 	vstr	s15, [r3]
		}
		if(ch=='b'){
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_UART_RxCpltCallback+0x9c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b62      	cmp	r3, #98	; 0x62
 80007e0:	d10d      	bne.n	80007fe <HAL_UART_RxCpltCallback+0x86>
			dutyCycleB += 0.2;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_UART_RxCpltCallback+0xa8>)
 80007e4:	edd3 7a00 	vldr	s15, [r3]
 80007e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ec:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000808 <HAL_UART_RxCpltCallback+0x90>
 80007f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_UART_RxCpltCallback+0xa8>)
 80007fa:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	9999999a 	.word	0x9999999a
 800080c:	3fc99999 	.word	0x3fc99999
 8000810:	20000084 	.word	0x20000084
 8000814:	20000028 	.word	0x20000028
 8000818:	2000002c 	.word	0x2000002c
 800081c:	20000030 	.word	0x20000030
 8000820:	20000034 	.word	0x20000034

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x44>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_MspInit+0x44>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x44>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x44>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x44>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x44>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 fa1a 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <USART3_IRQHandler+0x10>)
 80008d2:	f002 ff21 	bl	8003718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000084 	.word	0x20000084

080008e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SystemInit+0x20>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <SystemInit+0x20>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <MX_TIM2_Init+0x114>)
 8000938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800093e:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <MX_TIM2_Init+0x114>)
 8000940:	2209      	movs	r2, #9
 8000942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <MX_TIM2_Init+0x114>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 800094a:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <MX_TIM2_Init+0x114>)
 800094c:	22fe      	movs	r2, #254	; 0xfe
 800094e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000950:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <MX_TIM2_Init+0x114>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <MX_TIM2_Init+0x114>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800095c:	482e      	ldr	r0, [pc, #184]	; (8000a18 <MX_TIM2_Init+0x114>)
 800095e:	f001 fe6d 	bl	800263c <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000968:	f7ff ff5c 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000976:	4619      	mov	r1, r3
 8000978:	4827      	ldr	r0, [pc, #156]	; (8000a18 <MX_TIM2_Init+0x114>)
 800097a:	f002 f925 	bl	8002bc8 <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000984:	f7ff ff4e 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000988:	4823      	ldr	r0, [pc, #140]	; (8000a18 <MX_TIM2_Init+0x114>)
 800098a:	f001 feae 	bl	80026ea <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000994:	f7ff ff46 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481c      	ldr	r0, [pc, #112]	; (8000a18 <MX_TIM2_Init+0x114>)
 80009a8:	f002 fd96 	bl	80034d8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009b2:	f7ff ff37 	bl	8000824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	2360      	movs	r3, #96	; 0x60
 80009b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 255/4-1;
 80009ba:	233e      	movs	r3, #62	; 0x3e
 80009bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	4619      	mov	r1, r3
 80009cc:	4812      	ldr	r0, [pc, #72]	; (8000a18 <MX_TIM2_Init+0x114>)
 80009ce:	f001 ffe7 	bl	80029a0 <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009d8:	f7ff ff24 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	2204      	movs	r2, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_TIM2_Init+0x114>)
 80009e4:	f001 ffdc 	bl	80029a0 <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80009ee:	f7ff ff19 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	2208      	movs	r2, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <MX_TIM2_Init+0x114>)
 80009fa:	f001 ffd1 	bl	80029a0 <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000a04:	f7ff ff0e 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <MX_TIM2_Init+0x114>)
 8000a0a:	f000 f825 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 8000a0e:	bf00      	nop
 8000a10:	3738      	adds	r7, #56	; 0x38
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000038 	.word	0x20000038

08000a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a2c:	d10b      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_TIM_Base_MspInit+0x38>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_TIM_Base_MspInit+0x38>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_TIM_Base_MspInit+0x38>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a78:	d138      	bne.n	8000aec <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_TIM_MspPostInit+0x9c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_TIM_MspPostInit+0x9c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_TIM_MspPostInit+0x9c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_TIM_MspPostInit+0x9c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_TIM_MspPostInit+0x9c>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_TIM_MspPostInit+0x9c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aba:	2301      	movs	r3, #1
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <HAL_TIM_MspPostInit+0xa0>)
 8000ac6:	f000 fb01 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000aca:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000adc:	2301      	movs	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_TIM_MspPostInit+0xa4>)
 8000ae8:	f000 faf0 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400

08000b00 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_USART3_UART_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b44:	f002 fd56 	bl	80035f4 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f7ff fe69 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000084 	.word	0x20000084
 8000b5c:	40004800 	.word	0x40004800

08000b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0ae      	sub	sp, #184	; 0xb8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2290      	movs	r2, #144	; 0x90
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 ffc5 	bl	8004b10 <memset>
  if(uartHandle->Instance==USART3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <HAL_UART_MspInit+0xc4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d144      	bne.n	8000c1a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f924 	bl	8001dec <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000baa:	f7ff fe3b 	bl	8000824 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <HAL_UART_MspInit+0xcc>)
 8000c06:	f000 fa61 	bl	80010cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2027      	movs	r0, #39	; 0x27
 8000c10:	f000 f993 	bl	8000f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c14:	2027      	movs	r0, #39	; 0x27
 8000c16:	f000 f9ac 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	37b8      	adds	r7, #184	; 0xb8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40004800 	.word	0x40004800
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff fe41 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f003 ff5f 	bl	8004b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fc97 	bl	8000594 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c74:	08004ba8 	.word	0x08004ba8
  ldr r2, =_sbss
 8000c78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c7c:	20000110 	.word	0x20000110

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>

08000c82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f94c 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8c:	200f      	movs	r0, #15
 8000c8e:	f000 f805 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c92:	f7ff fdcd 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f967 	bl	8000f8e <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f92f 	bl	8000f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	2000010c 	.word	0x2000010c

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	2000010c 	.word	0x2000010c

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	05fa0000 	.word	0x05fa0000

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f7ff ff8e 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff29 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff3e 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff8e 	bl	8000e78 <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff31 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffa2 	bl	8000ee0 <SysTick_Config>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff feb6 	bl	8000d24 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d008      	beq.n	8000fd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e052      	b.n	800107e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0216 	bic.w	r2, r2, #22
 8000fe6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ff6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d103      	bne.n	8001008 <HAL_DMA_Abort+0x62>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001004:	2b00      	cmp	r3, #0
 8001006:	d007      	beq.n	8001018 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0208 	bic.w	r2, r2, #8
 8001016:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001028:	e013      	b.n	8001052 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800102a:	f7ff fe7b 	bl	8000d24 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b05      	cmp	r3, #5
 8001036:	d90c      	bls.n	8001052 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2220      	movs	r2, #32
 800103c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2203      	movs	r2, #3
 8001042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e015      	b.n	800107e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e4      	bne.n	800102a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001064:	223f      	movs	r2, #63	; 0x3f
 8001066:	409a      	lsls	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d004      	beq.n	80010a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e00c      	b.n	80010be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2205      	movs	r2, #5
 80010a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e175      	b.n	80013d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8164 	bne.w	80013d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x56>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80be 	beq.w	80013d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <HAL_GPIO_Init+0x324>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <HAL_GPIO_Init+0x324>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <HAL_GPIO_Init+0x324>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800126e:	4a61      	ldr	r2, [pc, #388]	; (80013f4 <HAL_GPIO_Init+0x328>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <HAL_GPIO_Init+0x32c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d037      	beq.n	800130a <HAL_GPIO_Init+0x23e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a57      	ldr	r2, [pc, #348]	; (80013fc <HAL_GPIO_Init+0x330>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d031      	beq.n	8001306 <HAL_GPIO_Init+0x23a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a56      	ldr	r2, [pc, #344]	; (8001400 <HAL_GPIO_Init+0x334>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d02b      	beq.n	8001302 <HAL_GPIO_Init+0x236>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a55      	ldr	r2, [pc, #340]	; (8001404 <HAL_GPIO_Init+0x338>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d025      	beq.n	80012fe <HAL_GPIO_Init+0x232>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a54      	ldr	r2, [pc, #336]	; (8001408 <HAL_GPIO_Init+0x33c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x22e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a53      	ldr	r2, [pc, #332]	; (800140c <HAL_GPIO_Init+0x340>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x22a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_GPIO_Init+0x344>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x226>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <HAL_GPIO_Init+0x348>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x222>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a50      	ldr	r2, [pc, #320]	; (8001418 <HAL_GPIO_Init+0x34c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x21e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4f      	ldr	r2, [pc, #316]	; (800141c <HAL_GPIO_Init+0x350>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x21a>
 80012e2:	2309      	movs	r3, #9
 80012e4:	e012      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012e6:	230a      	movs	r3, #10
 80012e8:	e010      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012ea:	2308      	movs	r3, #8
 80012ec:	e00e      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e00c      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012f2:	2306      	movs	r3, #6
 80012f4:	e00a      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e008      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012fe:	2303      	movs	r3, #3
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x240>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x240>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x240>
 800130a:	2300      	movs	r3, #0
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800131c:	4935      	ldr	r1, [pc, #212]	; (80013f4 <HAL_GPIO_Init+0x328>)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_GPIO_Init+0x354>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a34      	ldr	r2, [pc, #208]	; (8001420 <HAL_GPIO_Init+0x354>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <HAL_GPIO_Init+0x354>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a29      	ldr	r2, [pc, #164]	; (8001420 <HAL_GPIO_Init+0x354>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_GPIO_Init+0x354>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_GPIO_Init+0x354>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_GPIO_Init+0x354>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <HAL_GPIO_Init+0x354>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	f67f ae86 	bls.w	80010ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40013800 	.word	0x40013800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40021400 	.word	0x40021400
 8001410:	40021800 	.word	0x40021800
 8001414:	40021c00 	.word	0x40021c00
 8001418:	40022000 	.word	0x40022000
 800141c:	40022400 	.word	0x40022400
 8001420:	40013c00 	.word	0x40013c00

08001424 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <HAL_PWREx_EnableOverDrive+0x98>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001452:	f7ff fc67 	bl	8000d24 <HAL_GetTick>
 8001456:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001458:	e009      	b.n	800146e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800145a:	f7ff fc63 	bl	8000d24 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001468:	d901      	bls.n	800146e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e022      	b.n	80014b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147a:	d1ee      	bne.n	800145a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001486:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001488:	f7ff fc4c 	bl	8000d24 <HAL_GetTick>
 800148c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800148e:	e009      	b.n	80014a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001490:	f7ff fc48 	bl	8000d24 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800149e:	d901      	bls.n	80014a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e007      	b.n	80014b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014b0:	d1ee      	bne.n	8001490 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e29b      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8087 	beq.w	80015f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e8:	4b96      	ldr	r3, [pc, #600]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d00c      	beq.n	800150e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f4:	4b93      	ldr	r3, [pc, #588]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d112      	bne.n	8001526 <HAL_RCC_OscConfig+0x62>
 8001500:	4b90      	ldr	r3, [pc, #576]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150c:	d10b      	bne.n	8001526 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150e:	4b8d      	ldr	r3, [pc, #564]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d06c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x130>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d168      	bne.n	80015f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e275      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x7a>
 8001530:	4b84      	ldr	r3, [pc, #528]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a83      	ldr	r2, [pc, #524]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e02e      	b.n	800159c <HAL_RCC_OscConfig+0xd8>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x9c>
 8001546:	4b7f      	ldr	r3, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7e      	ldr	r2, [pc, #504]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7b      	ldr	r2, [pc, #492]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xd8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0xc0>
 800156a:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a75      	ldr	r2, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b73      	ldr	r3, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a72      	ldr	r2, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xd8>
 8001584:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b6c      	ldr	r3, [pc, #432]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a6b      	ldr	r2, [pc, #428]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fbbe 	bl	8000d24 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fbba 	bl	8000d24 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e229      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b61      	ldr	r3, [pc, #388]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xe8>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fbaa 	bl	8000d24 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fba6 	bl	8000d24 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e215      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	4b57      	ldr	r3, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x110>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d069      	beq.n	80016d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001602:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b4d      	ldr	r3, [pc, #308]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11c      	bne.n	8001654 <HAL_RCC_OscConfig+0x190>
 800161a:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x17a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e1e9      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	493d      	ldr	r1, [pc, #244]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e040      	b.n	80016d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d023      	beq.n	80016a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a38      	ldr	r2, [pc, #224]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb5c 	bl	8000d24 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fb58 	bl	8000d24 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1c7      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4929      	ldr	r1, [pc, #164]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
 80016a2:	e018      	b.n	80016d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a26      	ldr	r2, [pc, #152]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb38 	bl	8000d24 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fb34 	bl	8000d24 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e1a3      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d038      	beq.n	8001754 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80016ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff fb15 	bl	8000d24 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff fb11 	bl	8000d24 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e180      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x23a>
 800171c:	e01a      	b.n	8001754 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_RCC_OscConfig+0x280>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7ff fafb 	bl	8000d24 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff faf7 	bl	8000d24 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d903      	bls.n	8001748 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e166      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
 8001744:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800174a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ee      	bne.n	8001732 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a4 	beq.w	80018aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	4b8c      	ldr	r3, [pc, #560]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10d      	bne.n	800178a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b89      	ldr	r3, [pc, #548]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a88      	ldr	r2, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b86      	ldr	r3, [pc, #536]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001786:	2301      	movs	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	4b83      	ldr	r3, [pc, #524]	; (8001998 <HAL_RCC_OscConfig+0x4d4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d118      	bne.n	80017c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001796:	4b80      	ldr	r3, [pc, #512]	; (8001998 <HAL_RCC_OscConfig+0x4d4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a7f      	ldr	r2, [pc, #508]	; (8001998 <HAL_RCC_OscConfig+0x4d4>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fabf 	bl	8000d24 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017aa:	f7ff fabb 	bl	8000d24 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b64      	cmp	r3, #100	; 0x64
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e12a      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017bc:	4b76      	ldr	r3, [pc, #472]	; (8001998 <HAL_RCC_OscConfig+0x4d4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x31a>
 80017d0:	4b70      	ldr	r3, [pc, #448]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a6f      	ldr	r2, [pc, #444]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
 80017dc:	e02d      	b.n	800183a <HAL_RCC_OscConfig+0x376>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x33c>
 80017e6:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	4a6a      	ldr	r2, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6713      	str	r3, [r2, #112]	; 0x70
 80017f2:	4b68      	ldr	r3, [pc, #416]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	4a67      	ldr	r2, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6713      	str	r3, [r2, #112]	; 0x70
 80017fe:	e01c      	b.n	800183a <HAL_RCC_OscConfig+0x376>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d10c      	bne.n	8001822 <HAL_RCC_OscConfig+0x35e>
 8001808:	4b62      	ldr	r3, [pc, #392]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	4a61      	ldr	r2, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6713      	str	r3, [r2, #112]	; 0x70
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a5e      	ldr	r2, [pc, #376]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	e00b      	b.n	800183a <HAL_RCC_OscConfig+0x376>
 8001822:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	4a5b      	ldr	r2, [pc, #364]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6713      	str	r3, [r2, #112]	; 0x70
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d015      	beq.n	800186e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff fa6f 	bl	8000d24 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff fa6b 	bl	8000d24 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	; 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0d8      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001860:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ee      	beq.n	800184a <HAL_RCC_OscConfig+0x386>
 800186c:	e014      	b.n	8001898 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff fa59 	bl	8000d24 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	e00a      	b.n	800188c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff fa55 	bl	8000d24 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	; 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e0c2      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ee      	bne.n	8001876 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d105      	bne.n	80018aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a3c      	ldr	r2, [pc, #240]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80ae 	beq.w	8001a10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b4:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d06d      	beq.n	800199c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d14b      	bne.n	8001960 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a31      	ldr	r2, [pc, #196]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fa26 	bl	8000d24 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fa22 	bl	8000d24 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e091      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	071b      	lsls	r3, r3, #28
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f9f4 	bl	8000d24 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff f9f0 	bl	8000d24 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e05f      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x47c>
 800195e:	e057      	b.n	8001a10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff f9da 	bl	8000d24 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f9d6 	bl	8000d24 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e045      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001986:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x4b0>
 8001992:	e03d      	b.n	8001a10 <HAL_RCC_OscConfig+0x54c>
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_RCC_OscConfig+0x558>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d030      	beq.n	8001a0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d129      	bne.n	8001a0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d122      	bne.n	8001a0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d119      	bne.n	8001a0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	3b01      	subs	r3, #1
 80019e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d10f      	bne.n	8001a0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d0      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d910      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 020f 	bic.w	r2, r3, #15
 8001a4e:	4965      	ldr	r1, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d040      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d115      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e073      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06b      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f023 0203 	bic.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4936      	ldr	r1, [pc, #216]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b14:	f7ff f906 	bl	8000d24 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7ff f902 	bl	8000d24 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e053      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 020c 	and.w	r2, r3, #12
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1eb      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d210      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 020f 	bic.w	r2, r3, #15
 8001b5a:	4922      	ldr	r1, [pc, #136]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1cc>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1d4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f862 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08004b80 	.word	0x08004b80
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b090      	sub	sp, #64	; 0x40
 8001bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
 8001c04:	2300      	movs	r3, #0
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c08:	2300      	movs	r3, #0
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d00d      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	f200 80a1 	bhi.w	8001d64 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x34>
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2a:	e09b      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c30:	e09b      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c32:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c36:	e098      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c38:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c42:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d028      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	2200      	movs	r2, #0
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	627a      	str	r2, [r7, #36]	; 0x24
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c60:	2100      	movs	r1, #0
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c64:	fb03 f201 	mul.w	r2, r3, r1
 8001c68:	2300      	movs	r3, #0
 8001c6a:	fb00 f303 	mul.w	r3, r0, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a43      	ldr	r2, [pc, #268]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c72:	fba0 1202 	umull	r1, r2, r0, r2
 8001c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c78:	460a      	mov	r2, r1
 8001c7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7e:	4413      	add	r3, r2
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c84:	2200      	movs	r2, #0
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	61fa      	str	r2, [r7, #28]
 8001c8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c92:	f7fe fad1 	bl	8000238 <__aeabi_uldivmod>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c9e:	e053      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	617a      	str	r2, [r7, #20]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cb2:	f04f 0b00 	mov.w	fp, #0
 8001cb6:	4652      	mov	r2, sl
 8001cb8:	465b      	mov	r3, fp
 8001cba:	f04f 0000 	mov.w	r0, #0
 8001cbe:	f04f 0100 	mov.w	r1, #0
 8001cc2:	0159      	lsls	r1, r3, #5
 8001cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc8:	0150      	lsls	r0, r2, #5
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	ebb2 080a 	subs.w	r8, r2, sl
 8001cd2:	eb63 090b 	sbc.w	r9, r3, fp
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ce2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ce6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cea:	ebb2 0408 	subs.w	r4, r2, r8
 8001cee:	eb63 0509 	sbc.w	r5, r3, r9
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	00eb      	lsls	r3, r5, #3
 8001cfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d00:	00e2      	lsls	r2, r4, #3
 8001d02:	4614      	mov	r4, r2
 8001d04:	461d      	mov	r5, r3
 8001d06:	eb14 030a 	adds.w	r3, r4, sl
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	eb45 030b 	adc.w	r3, r5, fp
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d1e:	4629      	mov	r1, r5
 8001d20:	028b      	lsls	r3, r1, #10
 8001d22:	4621      	mov	r1, r4
 8001d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d28:	4621      	mov	r1, r4
 8001d2a:	028a      	lsls	r2, r1, #10
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	2200      	movs	r2, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	60fa      	str	r2, [r7, #12]
 8001d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d3c:	f7fe fa7c 	bl	8000238 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d62:	e002      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3740      	adds	r7, #64	; 0x40
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	017d7840 	.word	0x017d7840

08001d84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a9b      	lsrs	r3, r3, #10
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	08004b90 	.word	0x08004b90

08001dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc8:	f7ff ffdc 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0b5b      	lsrs	r3, r3, #13
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	08004b90 	.word	0x08004b90

08001dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e14:	4b69      	ldr	r3, [pc, #420]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a68      	ldr	r2, [pc, #416]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e1e:	6093      	str	r3, [r2, #8]
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e28:	4964      	ldr	r1, [pc, #400]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d017      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	4959      	ldr	r1, [pc, #356]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e64:	d101      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d017      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e82:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	494a      	ldr	r1, [pc, #296]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 808b 	beq.w	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	4a39      	ldr	r2, [pc, #228]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6413      	str	r3, [r2, #64]	; 0x40
 8001edc:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7fe ff16 	bl	8000d24 <HAL_GetTick>
 8001ef8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efc:	f7fe ff12 	bl	8000d24 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e38f      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f1a:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d035      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d02e      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d114      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe feda 	bl	8000d24 <HAL_GetTick>
 8001f70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe fed6 	bl	8000d24 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e351      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ee      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fa2:	d111      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	4901      	ldr	r1, [pc, #4]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	0ffffcff 	.word	0x0ffffcff
 8001fc8:	4bac      	ldr	r3, [pc, #688]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4aab      	ldr	r2, [pc, #684]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fd2:	6093      	str	r3, [r2, #8]
 8001fd4:	4ba9      	ldr	r3, [pc, #676]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	49a6      	ldr	r1, [pc, #664]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d010      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ff2:	4ba2      	ldr	r3, [pc, #648]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff8:	4aa0      	ldr	r2, [pc, #640]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002002:	4b9e      	ldr	r3, [pc, #632]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002004:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	499b      	ldr	r1, [pc, #620]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002020:	4b96      	ldr	r3, [pc, #600]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800202e:	4993      	ldr	r1, [pc, #588]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002042:	4b8e      	ldr	r3, [pc, #568]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002050:	498a      	ldr	r1, [pc, #552]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002064:	4b85      	ldr	r3, [pc, #532]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002072:	4982      	ldr	r1, [pc, #520]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002086:	4b7d      	ldr	r3, [pc, #500]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4979      	ldr	r1, [pc, #484]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020a8:	4b74      	ldr	r3, [pc, #464]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4971      	ldr	r1, [pc, #452]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f023 020c 	bic.w	r2, r3, #12
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d8:	4968      	ldr	r1, [pc, #416]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ec:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4960      	ldr	r1, [pc, #384]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800210e:	4b5b      	ldr	r3, [pc, #364]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211c:	4957      	ldr	r1, [pc, #348]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002130:	4b52      	ldr	r3, [pc, #328]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	494f      	ldr	r1, [pc, #316]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002152:	4b4a      	ldr	r3, [pc, #296]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4946      	ldr	r1, [pc, #280]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002174:	4b41      	ldr	r3, [pc, #260]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	493e      	ldr	r1, [pc, #248]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	4935      	ldr	r1, [pc, #212]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021c6:	492d      	ldr	r1, [pc, #180]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d011      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021da:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e8:	4924      	ldr	r1, [pc, #144]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021f8:	d101      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002228:	4914      	ldr	r1, [pc, #80]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800224c:	490b      	ldr	r1, [pc, #44]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00f      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002270:	4902      	ldr	r1, [pc, #8]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002278:	e002      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00b      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800228c:	4b8a      	ldr	r3, [pc, #552]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800228e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002292:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	4986      	ldr	r1, [pc, #536]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00b      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80022b0:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c0:	497d      	ldr	r1, [pc, #500]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d006      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80d6 	beq.w	8002488 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022dc:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a75      	ldr	r2, [pc, #468]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e8:	f7fe fd1c 	bl	8000d24 <HAL_GetTick>
 80022ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022f0:	f7fe fd18 	bl	8000d24 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e195      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002302:	4b6d      	ldr	r3, [pc, #436]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d021      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11d      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002330:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002336:	0e1b      	lsrs	r3, r3, #24
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	019a      	lsls	r2, r3, #6
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	431a      	orrs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	071b      	lsls	r3, r3, #28
 8002356:	4958      	ldr	r1, [pc, #352]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800237c:	2b00      	cmp	r3, #0
 800237e:	d02e      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002388:	d129      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800238a:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002398:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239e:	0f1b      	lsrs	r3, r3, #28
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	019a      	lsls	r2, r3, #6
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	071b      	lsls	r3, r3, #28
 80023be:	493e      	ldr	r1, [pc, #248]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023c6:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023cc:	f023 021f 	bic.w	r2, r3, #31
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	3b01      	subs	r3, #1
 80023d6:	4938      	ldr	r1, [pc, #224]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01d      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ea:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f0:	0e1b      	lsrs	r3, r3, #24
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023f8:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fe:	0f1b      	lsrs	r3, r3, #28
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	019a      	lsls	r2, r3, #6
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	431a      	orrs	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	431a      	orrs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	4926      	ldr	r1, [pc, #152]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d011      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	019a      	lsls	r2, r3, #6
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	071b      	lsls	r3, r3, #28
 800244e:	491a      	ldr	r1, [pc, #104]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002462:	f7fe fc5f 	bl	8000d24 <HAL_GetTick>
 8002466:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800246a:	f7fe fc5b 	bl	8000d24 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b64      	cmp	r3, #100	; 0x64
 8002476:	d901      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0d8      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b01      	cmp	r3, #1
 800248c:	f040 80ce 	bne.w	800262c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249c:	f7fe fc42 	bl	8000d24 <HAL_GetTick>
 80024a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024a2:	e00b      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024a4:	f7fe fc3e 	bl	8000d24 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d904      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0bb      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024bc:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c8:	d0ec      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d02e      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d12a      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024f2:	4b51      	ldr	r3, [pc, #324]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002500:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	0f1b      	lsrs	r3, r3, #28
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	019a      	lsls	r2, r3, #6
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	061b      	lsls	r3, r3, #24
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	071b      	lsls	r3, r3, #28
 8002526:	4944      	ldr	r1, [pc, #272]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800252e:	4b42      	ldr	r3, [pc, #264]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002534:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	3b01      	subs	r3, #1
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	493d      	ldr	r1, [pc, #244]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d022      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800255c:	d11d      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	0e1b      	lsrs	r3, r3, #24
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	0f1b      	lsrs	r3, r3, #28
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	019a      	lsls	r2, r3, #6
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	061b      	lsls	r3, r3, #24
 800258c:	431a      	orrs	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	071b      	lsls	r3, r3, #28
 8002592:	4929      	ldr	r1, [pc, #164]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d028      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	0e1b      	lsrs	r3, r3, #24
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025b4:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	019a      	lsls	r2, r3, #6
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	041b      	lsls	r3, r3, #16
 80025cc:	431a      	orrs	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	071b      	lsls	r3, r3, #28
 80025da:	4917      	ldr	r1, [pc, #92]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	4911      	ldr	r1, [pc, #68]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe fb8e 	bl	8000d24 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800260c:	f7fe fb8a 	bl	8000d24 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e007      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262a:	d1ef      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800

0800263c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e049      	b.n	80026e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe f9da 	bl	8000a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3304      	adds	r3, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f000 fb6e 	bl	8002d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e049      	b.n	8002790 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f841 	bl	8002798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f000 fb17 	bl	8002d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_TIM_PWM_Start+0x24>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e03c      	b.n	800284a <HAL_TIM_PWM_Start+0x9e>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d109      	bne.n	80027ea <HAL_TIM_PWM_Start+0x3e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	bf14      	ite	ne
 80027e2:	2301      	movne	r3, #1
 80027e4:	2300      	moveq	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	e02f      	b.n	800284a <HAL_TIM_PWM_Start+0x9e>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d109      	bne.n	8002804 <HAL_TIM_PWM_Start+0x58>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	e022      	b.n	800284a <HAL_TIM_PWM_Start+0x9e>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d109      	bne.n	800281e <HAL_TIM_PWM_Start+0x72>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	e015      	b.n	800284a <HAL_TIM_PWM_Start+0x9e>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b10      	cmp	r3, #16
 8002822:	d109      	bne.n	8002838 <HAL_TIM_PWM_Start+0x8c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e008      	b.n	800284a <HAL_TIM_PWM_Start+0x9e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e092      	b.n	8002978 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d104      	bne.n	8002862 <HAL_TIM_PWM_Start+0xb6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002860:	e023      	b.n	80028aa <HAL_TIM_PWM_Start+0xfe>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b04      	cmp	r3, #4
 8002866:	d104      	bne.n	8002872 <HAL_TIM_PWM_Start+0xc6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002870:	e01b      	b.n	80028aa <HAL_TIM_PWM_Start+0xfe>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d104      	bne.n	8002882 <HAL_TIM_PWM_Start+0xd6>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002880:	e013      	b.n	80028aa <HAL_TIM_PWM_Start+0xfe>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b0c      	cmp	r3, #12
 8002886:	d104      	bne.n	8002892 <HAL_TIM_PWM_Start+0xe6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002890:	e00b      	b.n	80028aa <HAL_TIM_PWM_Start+0xfe>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b10      	cmp	r3, #16
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Start+0xf6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a0:	e003      	b.n	80028aa <HAL_TIM_PWM_Start+0xfe>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	6839      	ldr	r1, [r7, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fdea 	bl	800348c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a30      	ldr	r2, [pc, #192]	; (8002980 <HAL_TIM_PWM_Start+0x1d4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_TIM_PWM_Start+0x120>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <HAL_TIM_PWM_Start+0x1d8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_TIM_PWM_Start+0x124>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_TIM_PWM_Start+0x126>
 80028d0:	2300      	movs	r3, #0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a25      	ldr	r2, [pc, #148]	; (8002980 <HAL_TIM_PWM_Start+0x1d4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d022      	beq.n	8002936 <HAL_TIM_PWM_Start+0x18a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d01d      	beq.n	8002936 <HAL_TIM_PWM_Start+0x18a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <HAL_TIM_PWM_Start+0x1dc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d018      	beq.n	8002936 <HAL_TIM_PWM_Start+0x18a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a20      	ldr	r2, [pc, #128]	; (800298c <HAL_TIM_PWM_Start+0x1e0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_TIM_PWM_Start+0x18a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_TIM_PWM_Start+0x1e4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00e      	beq.n	8002936 <HAL_TIM_PWM_Start+0x18a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_TIM_PWM_Start+0x1d8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_TIM_PWM_Start+0x18a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_TIM_PWM_Start+0x1e8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_TIM_PWM_Start+0x18a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_TIM_PWM_Start+0x1ec>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d115      	bne.n	8002962 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_TIM_PWM_Start+0x1f0>)
 800293e:	4013      	ands	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b06      	cmp	r3, #6
 8002946:	d015      	beq.n	8002974 <HAL_TIM_PWM_Start+0x1c8>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294e:	d011      	beq.n	8002974 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002960:	e008      	b.n	8002974 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e000      	b.n	8002976 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40010000 	.word	0x40010000
 8002984:	40010400 	.word	0x40010400
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40014000 	.word	0x40014000
 8002998:	40001800 	.word	0x40001800
 800299c:	00010007 	.word	0x00010007

080029a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e0ff      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b14      	cmp	r3, #20
 80029ca:	f200 80f0 	bhi.w	8002bae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	08002a29 	.word	0x08002a29
 80029d8:	08002baf 	.word	0x08002baf
 80029dc:	08002baf 	.word	0x08002baf
 80029e0:	08002baf 	.word	0x08002baf
 80029e4:	08002a69 	.word	0x08002a69
 80029e8:	08002baf 	.word	0x08002baf
 80029ec:	08002baf 	.word	0x08002baf
 80029f0:	08002baf 	.word	0x08002baf
 80029f4:	08002aab 	.word	0x08002aab
 80029f8:	08002baf 	.word	0x08002baf
 80029fc:	08002baf 	.word	0x08002baf
 8002a00:	08002baf 	.word	0x08002baf
 8002a04:	08002aeb 	.word	0x08002aeb
 8002a08:	08002baf 	.word	0x08002baf
 8002a0c:	08002baf 	.word	0x08002baf
 8002a10:	08002baf 	.word	0x08002baf
 8002a14:	08002b2d 	.word	0x08002b2d
 8002a18:	08002baf 	.word	0x08002baf
 8002a1c:	08002baf 	.word	0x08002baf
 8002a20:	08002baf 	.word	0x08002baf
 8002a24:	08002b6d 	.word	0x08002b6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fa34 	bl	8002e9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0208 	orr.w	r2, r2, #8
 8002a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0204 	bic.w	r2, r2, #4
 8002a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6999      	ldr	r1, [r3, #24]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	619a      	str	r2, [r3, #24]
      break;
 8002a66:	e0a5      	b.n	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fa86 	bl	8002f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6999      	ldr	r1, [r3, #24]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	021a      	lsls	r2, r3, #8
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	619a      	str	r2, [r3, #24]
      break;
 8002aa8:	e084      	b.n	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fadd 	bl	8003070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0208 	orr.w	r2, r2, #8
 8002ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0204 	bic.w	r2, r2, #4
 8002ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69d9      	ldr	r1, [r3, #28]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	61da      	str	r2, [r3, #28]
      break;
 8002ae8:	e064      	b.n	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fb33 	bl	800315c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69d9      	ldr	r1, [r3, #28]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	021a      	lsls	r2, r3, #8
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	61da      	str	r2, [r3, #28]
      break;
 8002b2a:	e043      	b.n	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fb6a 	bl	800320c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0204 	bic.w	r2, r2, #4
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b6a:	e023      	b.n	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fb9c 	bl	80032b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	021a      	lsls	r2, r3, #8
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bac:	e002      	b.n	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop

08002bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_TIM_ConfigClockSource+0x1c>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0b4      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x186>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <HAL_TIM_ConfigClockSource+0x190>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1c:	d03e      	beq.n	8002c9c <HAL_TIM_ConfigClockSource+0xd4>
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c22:	f200 8087 	bhi.w	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	f000 8086 	beq.w	8002d3a <HAL_TIM_ConfigClockSource+0x172>
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c32:	d87f      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b70      	cmp	r3, #112	; 0x70
 8002c36:	d01a      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0xa6>
 8002c38:	2b70      	cmp	r3, #112	; 0x70
 8002c3a:	d87b      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b60      	cmp	r3, #96	; 0x60
 8002c3e:	d050      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c40:	2b60      	cmp	r3, #96	; 0x60
 8002c42:	d877      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b50      	cmp	r3, #80	; 0x50
 8002c46:	d03c      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c48:	2b50      	cmp	r3, #80	; 0x50
 8002c4a:	d873      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d058      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x13a>
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d86f      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b30      	cmp	r3, #48	; 0x30
 8002c56:	d064      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	2b30      	cmp	r3, #48	; 0x30
 8002c5a:	d86b      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d060      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x15a>
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d867      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05c      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x15a>
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d05a      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x15a>
 8002c6c:	e062      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c7e:	f000 fbe5 	bl	800344c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]
      break;
 8002c9a:	e04f      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cac:	f000 fbce 	bl	800344c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cbe:	609a      	str	r2, [r3, #8]
      break;
 8002cc0:	e03c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 fb42 	bl	8003358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2150      	movs	r1, #80	; 0x50
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fb9b 	bl	8003416 <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e02c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 fb61 	bl	80033b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2160      	movs	r1, #96	; 0x60
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fb8b 	bl	8003416 <TIM_ITRx_SetConfig>
      break;
 8002d00:	e01c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 fb22 	bl	8003358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2140      	movs	r1, #64	; 0x40
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fb7b 	bl	8003416 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e00c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f000 fb72 	bl	8003416 <TIM_ITRx_SetConfig>
      break;
 8002d32:	e003      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e000      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	fffeff88 	.word	0xfffeff88

08002d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d00f      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3d      	ldr	r2, [pc, #244]	; (8002e74 <TIM_Base_SetConfig+0x118>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3c      	ldr	r2, [pc, #240]	; (8002e78 <TIM_Base_SetConfig+0x11c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <TIM_Base_SetConfig+0x120>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3a      	ldr	r2, [pc, #232]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d108      	bne.n	8002dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d027      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a2c      	ldr	r2, [pc, #176]	; (8002e74 <TIM_Base_SetConfig+0x118>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d023      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a2b      	ldr	r2, [pc, #172]	; (8002e78 <TIM_Base_SetConfig+0x11c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <TIM_Base_SetConfig+0x120>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d017      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <TIM_Base_SetConfig+0x128>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <TIM_Base_SetConfig+0x12c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00f      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <TIM_Base_SetConfig+0x130>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a25      	ldr	r2, [pc, #148]	; (8002e90 <TIM_Base_SetConfig+0x134>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <TIM_Base_SetConfig+0x138>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d003      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <TIM_Base_SetConfig+0x13c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d108      	bne.n	8002e20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0xf8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d103      	bne.n	8002e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40010400 	.word	0x40010400
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40014400 	.word	0x40014400
 8002e8c:	40014800 	.word	0x40014800
 8002e90:	40001800 	.word	0x40001800
 8002e94:	40001c00 	.word	0x40001c00
 8002e98:	40002000 	.word	0x40002000

08002e9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f023 0201 	bic.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <TIM_OC1_SetConfig+0xd8>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f023 0302 	bic.w	r3, r3, #2
 8002ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <TIM_OC1_SetConfig+0xdc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_OC1_SetConfig+0x64>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <TIM_OC1_SetConfig+0xe0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d10c      	bne.n	8002f1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0308 	bic.w	r3, r3, #8
 8002f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <TIM_OC1_SetConfig+0xdc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_OC1_SetConfig+0x8e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <TIM_OC1_SetConfig+0xe0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d111      	bne.n	8002f4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	fffeff8f 	.word	0xfffeff8f
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40010400 	.word	0x40010400

08002f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0210 	bic.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <TIM_OC2_SetConfig+0xe4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 0320 	bic.w	r3, r3, #32
 8002fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a23      	ldr	r2, [pc, #140]	; (8003068 <TIM_OC2_SetConfig+0xe8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_OC2_SetConfig+0x68>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <TIM_OC2_SetConfig+0xec>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d10d      	bne.n	8003004 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <TIM_OC2_SetConfig+0xe8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d003      	beq.n	8003014 <TIM_OC2_SetConfig+0x94>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a17      	ldr	r2, [pc, #92]	; (800306c <TIM_OC2_SetConfig+0xec>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d113      	bne.n	800303c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800301a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	feff8fff 	.word	0xfeff8fff
 8003068:	40010000 	.word	0x40010000
 800306c:	40010400 	.word	0x40010400

08003070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <TIM_OC3_SetConfig+0xe0>)
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <TIM_OC3_SetConfig+0xe4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_OC3_SetConfig+0x66>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a21      	ldr	r2, [pc, #132]	; (8003158 <TIM_OC3_SetConfig+0xe8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10d      	bne.n	80030f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a17      	ldr	r2, [pc, #92]	; (8003154 <TIM_OC3_SetConfig+0xe4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d003      	beq.n	8003102 <TIM_OC3_SetConfig+0x92>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <TIM_OC3_SetConfig+0xe8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d113      	bne.n	800312a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	621a      	str	r2, [r3, #32]
}
 8003144:	bf00      	nop
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	fffeff8f 	.word	0xfffeff8f
 8003154:	40010000 	.word	0x40010000
 8003158:	40010400 	.word	0x40010400

0800315c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <TIM_OC4_SetConfig+0xa4>)
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	031b      	lsls	r3, r3, #12
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <TIM_OC4_SetConfig+0xa8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_OC4_SetConfig+0x68>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <TIM_OC4_SetConfig+0xac>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d109      	bne.n	80031d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	feff8fff 	.word	0xfeff8fff
 8003204:	40010000 	.word	0x40010000
 8003208:	40010400 	.word	0x40010400

0800320c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <TIM_OC5_SetConfig+0x98>)
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800324c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <TIM_OC5_SetConfig+0x9c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_OC5_SetConfig+0x5e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a11      	ldr	r2, [pc, #68]	; (80032ac <TIM_OC5_SetConfig+0xa0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d109      	bne.n	800327e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	fffeff8f 	.word	0xfffeff8f
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40010400 	.word	0x40010400

080032b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <TIM_OC6_SetConfig+0x9c>)
 80032dc:	4013      	ands	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <TIM_OC6_SetConfig+0xa0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_OC6_SetConfig+0x60>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <TIM_OC6_SetConfig+0xa4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d109      	bne.n	8003324 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	029b      	lsls	r3, r3, #10
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	feff8fff 	.word	0xfeff8fff
 8003350:	40010000 	.word	0x40010000
 8003354:	40010400 	.word	0x40010400

08003358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f023 0201 	bic.w	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f023 030a 	bic.w	r3, r3, #10
 8003394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b087      	sub	sp, #28
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0210 	bic.w	r2, r3, #16
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	031b      	lsls	r3, r3, #12
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	f043 0307 	orr.w	r3, r3, #7
 8003438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	021a      	lsls	r2, r3, #8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	431a      	orrs	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4313      	orrs	r3, r2
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	609a      	str	r2, [r3, #8]
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2201      	movs	r2, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1a      	ldr	r2, [r3, #32]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e06d      	b.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a30      	ldr	r2, [pc, #192]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d108      	bne.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800352a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d022      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d01d      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a16      	ldr	r2, [pc, #88]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10c      	bne.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	40010000 	.word	0x40010000
 80035dc:	40010400 	.word	0x40010400
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40001800 	.word	0x40001800

080035f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e040      	b.n	8003688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd faa2 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fb82 	bl	8003d3c <UART_SetConfig>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e022      	b.n	8003688 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fdda 	bl	8004204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800365e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800366e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fe61 	bl	8004348 <UART_CheckIdleState>
 8003686:	4603      	mov	r3, r0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d132      	bne.n	800370e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Receive_IT+0x24>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e02b      	b.n	8003710 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d018      	beq.n	80036fe <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	613b      	str	r3, [r7, #16]
   return(result);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	623b      	str	r3, [r7, #32]
 80036ec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	69f9      	ldr	r1, [r7, #28]
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e6      	bne.n	80036cc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	461a      	mov	r2, r3
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 ff33 	bl	8004570 <UART_Start_Receive_IT>
 800370a:	4603      	mov	r3, r0
 800370c:	e000      	b.n	8003710 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3728      	adds	r7, #40	; 0x28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b0ba      	sub	sp, #232	; 0xe8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800373e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003742:	f640 030f 	movw	r3, #2063	; 0x80f
 8003746:	4013      	ands	r3, r2
 8003748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800374c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d115      	bne.n	8003780 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00f      	beq.n	8003780 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 82ac 	beq.w	8003cce <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
      }
      return;
 800377e:	e2a6      	b.n	8003cce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8117 	beq.w	80039b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800378a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003796:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800379a:	4b85      	ldr	r3, [pc, #532]	; (80039b0 <HAL_UART_IRQHandler+0x298>)
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 810a 	beq.w	80039b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d011      	beq.n	80037d4 <HAL_UART_IRQHandler+0xbc>
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00b      	beq.n	80037d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_UART_IRQHandler+0xec>
 80037e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2202      	movs	r2, #2
 80037f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	f043 0204 	orr.w	r2, r3, #4
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d011      	beq.n	8003834 <HAL_UART_IRQHandler+0x11c>
 8003810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2204      	movs	r2, #4
 8003822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d017      	beq.n	8003870 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800384c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2208      	movs	r2, #8
 800385e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003866:	f043 0208 	orr.w	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_UART_IRQHandler+0x18a>
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8212 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d005      	beq.n	80038fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d04f      	beq.n	800399a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fefe 	bl	80046fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d141      	bne.n	8003992 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3308      	adds	r3, #8
 8003914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800393a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800393e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1d9      	bne.n	800390e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395e:	2b00      	cmp	r3, #0
 8003960:	d013      	beq.n	800398a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <HAL_UART_IRQHandler+0x29c>)
 8003968:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fb89 	bl	8001086 <HAL_DMA_Abort_IT>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003984:	4610      	mov	r0, r2
 8003986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	e00f      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f9b6 	bl	8003cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e00b      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9b2 	bl	8003cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e007      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9ae 	bl	8003cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80039a8:	e193      	b.n	8003cd2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039aa:	bf00      	nop
    return;
 80039ac:	e191      	b.n	8003cd2 <HAL_UART_IRQHandler+0x5ba>
 80039ae:	bf00      	nop
 80039b0:	04000120 	.word	0x04000120
 80039b4:	080047c5 	.word	0x080047c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f040 814c 	bne.w	8003c5a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8145 	beq.w	8003c5a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 813e 	beq.w	8003c5a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2210      	movs	r2, #16
 80039e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	f040 80b6 	bne.w	8003b62 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8165 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a16:	429a      	cmp	r2, r3
 8003a18:	f080 815d 	bcs.w	8003cd6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a30:	f000 8086 	beq.w	8003b40 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1da      	bne.n	8003a34 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003aa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e1      	bne.n	8003a7e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ade:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ae0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ae4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e3      	bne.n	8003aba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b10:	f023 0310 	bic.w	r3, r3, #16
 8003b14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e4      	bne.n	8003b00 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd fa33 	bl	8000fa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8d8 	bl	8003d10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b60:	e0b9      	b.n	8003cd6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80ab 	beq.w	8003cda <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a6 	beq.w	8003cda <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e4      	bne.n	8003b8e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3308      	adds	r3, #8
 8003be4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003be8:	633a      	str	r2, [r7, #48]	; 0x30
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e3      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f023 0310 	bic.w	r3, r3, #16
 8003c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e4      	bne.n	8003c10 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f85c 	bl	8003d10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c58:	e03f      	b.n	8003cda <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00e      	beq.n	8003c84 <HAL_UART_IRQHandler+0x56c>
 8003c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f853 	bl	8003d28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c82:	e02d      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00e      	beq.n	8003cae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01c      	beq.n	8003cde <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
    }
    return;
 8003cac:	e017      	b.n	8003cde <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d012      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
 8003cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fd92 	bl	80047f0 <UART_EndTransmit_IT>
    return;
 8003ccc:	e008      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003cce:	bf00      	nop
 8003cd0:	e006      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003cd2:	bf00      	nop
 8003cd4:	e004      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003cde:	bf00      	nop
  }

}
 8003ce0:	37e8      	adds	r7, #232	; 0xe8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop

08003ce8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4ba6      	ldr	r3, [pc, #664]	; (8004000 <UART_SetConfig+0x2c4>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a94      	ldr	r2, [pc, #592]	; (8004004 <UART_SetConfig+0x2c8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d120      	bne.n	8003dfa <UART_SetConfig+0xbe>
 8003db8:	4b93      	ldr	r3, [pc, #588]	; (8004008 <UART_SetConfig+0x2cc>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d816      	bhi.n	8003df4 <UART_SetConfig+0xb8>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0x90>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003de9 	.word	0x08003de9
 8003dd4:	08003de3 	.word	0x08003de3
 8003dd8:	08003def 	.word	0x08003def
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e150      	b.n	8004084 <UART_SetConfig+0x348>
 8003de2:	2302      	movs	r3, #2
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e14d      	b.n	8004084 <UART_SetConfig+0x348>
 8003de8:	2304      	movs	r3, #4
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e14a      	b.n	8004084 <UART_SetConfig+0x348>
 8003dee:	2308      	movs	r3, #8
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e147      	b.n	8004084 <UART_SetConfig+0x348>
 8003df4:	2310      	movs	r3, #16
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e144      	b.n	8004084 <UART_SetConfig+0x348>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a83      	ldr	r2, [pc, #524]	; (800400c <UART_SetConfig+0x2d0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d132      	bne.n	8003e6a <UART_SetConfig+0x12e>
 8003e04:	4b80      	ldr	r3, [pc, #512]	; (8004008 <UART_SetConfig+0x2cc>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d828      	bhi.n	8003e64 <UART_SetConfig+0x128>
 8003e12:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <UART_SetConfig+0xdc>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e65 	.word	0x08003e65
 8003e20:	08003e65 	.word	0x08003e65
 8003e24:	08003e65 	.word	0x08003e65
 8003e28:	08003e59 	.word	0x08003e59
 8003e2c:	08003e65 	.word	0x08003e65
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08003e65 	.word	0x08003e65
 8003e38:	08003e53 	.word	0x08003e53
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	08003e65 	.word	0x08003e65
 8003e48:	08003e5f 	.word	0x08003e5f
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e118      	b.n	8004084 <UART_SetConfig+0x348>
 8003e52:	2302      	movs	r3, #2
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e115      	b.n	8004084 <UART_SetConfig+0x348>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e112      	b.n	8004084 <UART_SetConfig+0x348>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e10f      	b.n	8004084 <UART_SetConfig+0x348>
 8003e64:	2310      	movs	r3, #16
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e10c      	b.n	8004084 <UART_SetConfig+0x348>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a68      	ldr	r2, [pc, #416]	; (8004010 <UART_SetConfig+0x2d4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d120      	bne.n	8003eb6 <UART_SetConfig+0x17a>
 8003e74:	4b64      	ldr	r3, [pc, #400]	; (8004008 <UART_SetConfig+0x2cc>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e7e:	2b30      	cmp	r3, #48	; 0x30
 8003e80:	d013      	beq.n	8003eaa <UART_SetConfig+0x16e>
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d814      	bhi.n	8003eb0 <UART_SetConfig+0x174>
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d009      	beq.n	8003e9e <UART_SetConfig+0x162>
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d810      	bhi.n	8003eb0 <UART_SetConfig+0x174>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <UART_SetConfig+0x15c>
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d006      	beq.n	8003ea4 <UART_SetConfig+0x168>
 8003e96:	e00b      	b.n	8003eb0 <UART_SetConfig+0x174>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e0f2      	b.n	8004084 <UART_SetConfig+0x348>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e0ef      	b.n	8004084 <UART_SetConfig+0x348>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e0ec      	b.n	8004084 <UART_SetConfig+0x348>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e0e9      	b.n	8004084 <UART_SetConfig+0x348>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e0e6      	b.n	8004084 <UART_SetConfig+0x348>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a56      	ldr	r2, [pc, #344]	; (8004014 <UART_SetConfig+0x2d8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d120      	bne.n	8003f02 <UART_SetConfig+0x1c6>
 8003ec0:	4b51      	ldr	r3, [pc, #324]	; (8004008 <UART_SetConfig+0x2cc>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eca:	2bc0      	cmp	r3, #192	; 0xc0
 8003ecc:	d013      	beq.n	8003ef6 <UART_SetConfig+0x1ba>
 8003ece:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed0:	d814      	bhi.n	8003efc <UART_SetConfig+0x1c0>
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d009      	beq.n	8003eea <UART_SetConfig+0x1ae>
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d810      	bhi.n	8003efc <UART_SetConfig+0x1c0>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <UART_SetConfig+0x1a8>
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d006      	beq.n	8003ef0 <UART_SetConfig+0x1b4>
 8003ee2:	e00b      	b.n	8003efc <UART_SetConfig+0x1c0>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e0cc      	b.n	8004084 <UART_SetConfig+0x348>
 8003eea:	2302      	movs	r3, #2
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e0c9      	b.n	8004084 <UART_SetConfig+0x348>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e0c6      	b.n	8004084 <UART_SetConfig+0x348>
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e0c3      	b.n	8004084 <UART_SetConfig+0x348>
 8003efc:	2310      	movs	r3, #16
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e0c0      	b.n	8004084 <UART_SetConfig+0x348>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a44      	ldr	r2, [pc, #272]	; (8004018 <UART_SetConfig+0x2dc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d125      	bne.n	8003f58 <UART_SetConfig+0x21c>
 8003f0c:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <UART_SetConfig+0x2cc>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1a:	d017      	beq.n	8003f4c <UART_SetConfig+0x210>
 8003f1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f20:	d817      	bhi.n	8003f52 <UART_SetConfig+0x216>
 8003f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f26:	d00b      	beq.n	8003f40 <UART_SetConfig+0x204>
 8003f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2c:	d811      	bhi.n	8003f52 <UART_SetConfig+0x216>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <UART_SetConfig+0x1fe>
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f36:	d006      	beq.n	8003f46 <UART_SetConfig+0x20a>
 8003f38:	e00b      	b.n	8003f52 <UART_SetConfig+0x216>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e0a1      	b.n	8004084 <UART_SetConfig+0x348>
 8003f40:	2302      	movs	r3, #2
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e09e      	b.n	8004084 <UART_SetConfig+0x348>
 8003f46:	2304      	movs	r3, #4
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e09b      	b.n	8004084 <UART_SetConfig+0x348>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e098      	b.n	8004084 <UART_SetConfig+0x348>
 8003f52:	2310      	movs	r3, #16
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e095      	b.n	8004084 <UART_SetConfig+0x348>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2f      	ldr	r2, [pc, #188]	; (800401c <UART_SetConfig+0x2e0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d125      	bne.n	8003fae <UART_SetConfig+0x272>
 8003f62:	4b29      	ldr	r3, [pc, #164]	; (8004008 <UART_SetConfig+0x2cc>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f70:	d017      	beq.n	8003fa2 <UART_SetConfig+0x266>
 8003f72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f76:	d817      	bhi.n	8003fa8 <UART_SetConfig+0x26c>
 8003f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7c:	d00b      	beq.n	8003f96 <UART_SetConfig+0x25a>
 8003f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f82:	d811      	bhi.n	8003fa8 <UART_SetConfig+0x26c>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <UART_SetConfig+0x254>
 8003f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8c:	d006      	beq.n	8003f9c <UART_SetConfig+0x260>
 8003f8e:	e00b      	b.n	8003fa8 <UART_SetConfig+0x26c>
 8003f90:	2301      	movs	r3, #1
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e076      	b.n	8004084 <UART_SetConfig+0x348>
 8003f96:	2302      	movs	r3, #2
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e073      	b.n	8004084 <UART_SetConfig+0x348>
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e070      	b.n	8004084 <UART_SetConfig+0x348>
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e06d      	b.n	8004084 <UART_SetConfig+0x348>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e06a      	b.n	8004084 <UART_SetConfig+0x348>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <UART_SetConfig+0x2e4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d138      	bne.n	800402a <UART_SetConfig+0x2ee>
 8003fb8:	4b13      	ldr	r3, [pc, #76]	; (8004008 <UART_SetConfig+0x2cc>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fc6:	d017      	beq.n	8003ff8 <UART_SetConfig+0x2bc>
 8003fc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fcc:	d82a      	bhi.n	8004024 <UART_SetConfig+0x2e8>
 8003fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd2:	d00b      	beq.n	8003fec <UART_SetConfig+0x2b0>
 8003fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd8:	d824      	bhi.n	8004024 <UART_SetConfig+0x2e8>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <UART_SetConfig+0x2aa>
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe2:	d006      	beq.n	8003ff2 <UART_SetConfig+0x2b6>
 8003fe4:	e01e      	b.n	8004024 <UART_SetConfig+0x2e8>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e04b      	b.n	8004084 <UART_SetConfig+0x348>
 8003fec:	2302      	movs	r3, #2
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e048      	b.n	8004084 <UART_SetConfig+0x348>
 8003ff2:	2304      	movs	r3, #4
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e045      	b.n	8004084 <UART_SetConfig+0x348>
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e042      	b.n	8004084 <UART_SetConfig+0x348>
 8003ffe:	bf00      	nop
 8004000:	efff69f3 	.word	0xefff69f3
 8004004:	40011000 	.word	0x40011000
 8004008:	40023800 	.word	0x40023800
 800400c:	40004400 	.word	0x40004400
 8004010:	40004800 	.word	0x40004800
 8004014:	40004c00 	.word	0x40004c00
 8004018:	40005000 	.word	0x40005000
 800401c:	40011400 	.word	0x40011400
 8004020:	40007800 	.word	0x40007800
 8004024:	2310      	movs	r3, #16
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e02c      	b.n	8004084 <UART_SetConfig+0x348>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a72      	ldr	r2, [pc, #456]	; (80041f8 <UART_SetConfig+0x4bc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d125      	bne.n	8004080 <UART_SetConfig+0x344>
 8004034:	4b71      	ldr	r3, [pc, #452]	; (80041fc <UART_SetConfig+0x4c0>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800403e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004042:	d017      	beq.n	8004074 <UART_SetConfig+0x338>
 8004044:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004048:	d817      	bhi.n	800407a <UART_SetConfig+0x33e>
 800404a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404e:	d00b      	beq.n	8004068 <UART_SetConfig+0x32c>
 8004050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004054:	d811      	bhi.n	800407a <UART_SetConfig+0x33e>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <UART_SetConfig+0x326>
 800405a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405e:	d006      	beq.n	800406e <UART_SetConfig+0x332>
 8004060:	e00b      	b.n	800407a <UART_SetConfig+0x33e>
 8004062:	2300      	movs	r3, #0
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e00d      	b.n	8004084 <UART_SetConfig+0x348>
 8004068:	2302      	movs	r3, #2
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e00a      	b.n	8004084 <UART_SetConfig+0x348>
 800406e:	2304      	movs	r3, #4
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e007      	b.n	8004084 <UART_SetConfig+0x348>
 8004074:	2308      	movs	r3, #8
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e004      	b.n	8004084 <UART_SetConfig+0x348>
 800407a:	2310      	movs	r3, #16
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e001      	b.n	8004084 <UART_SetConfig+0x348>
 8004080:	2310      	movs	r3, #16
 8004082:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	d15b      	bne.n	8004146 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800408e:	7ffb      	ldrb	r3, [r7, #31]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d828      	bhi.n	80040e6 <UART_SetConfig+0x3aa>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0x360>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040d1 	.word	0x080040d1
 80040a8:	080040e7 	.word	0x080040e7
 80040ac:	080040d7 	.word	0x080040d7
 80040b0:	080040e7 	.word	0x080040e7
 80040b4:	080040e7 	.word	0x080040e7
 80040b8:	080040e7 	.word	0x080040e7
 80040bc:	080040df 	.word	0x080040df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7fd fe6c 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80040c4:	61b8      	str	r0, [r7, #24]
        break;
 80040c6:	e013      	b.n	80040f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c8:	f7fd fe7c 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 80040cc:	61b8      	str	r0, [r7, #24]
        break;
 80040ce:	e00f      	b.n	80040f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d0:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <UART_SetConfig+0x4c4>)
 80040d2:	61bb      	str	r3, [r7, #24]
        break;
 80040d4:	e00c      	b.n	80040f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d6:	f7fd fd8f 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 80040da:	61b8      	str	r0, [r7, #24]
        break;
 80040dc:	e008      	b.n	80040f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	61bb      	str	r3, [r7, #24]
        break;
 80040e4:	e004      	b.n	80040f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	77bb      	strb	r3, [r7, #30]
        break;
 80040ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d074      	beq.n	80041e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	005a      	lsls	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	d916      	bls.n	8004140 <UART_SetConfig+0x404>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d212      	bcs.n	8004140 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f023 030f 	bic.w	r3, r3, #15
 8004122:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	b29b      	uxth	r3, r3
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	b29a      	uxth	r2, r3
 8004130:	89fb      	ldrh	r3, [r7, #14]
 8004132:	4313      	orrs	r3, r2
 8004134:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	89fa      	ldrh	r2, [r7, #14]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e04f      	b.n	80041e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	77bb      	strb	r3, [r7, #30]
 8004144:	e04c      	b.n	80041e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004146:	7ffb      	ldrb	r3, [r7, #31]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d828      	bhi.n	800419e <UART_SetConfig+0x462>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x418>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004179 	.word	0x08004179
 8004158:	08004181 	.word	0x08004181
 800415c:	08004189 	.word	0x08004189
 8004160:	0800419f 	.word	0x0800419f
 8004164:	0800418f 	.word	0x0800418f
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800419f 	.word	0x0800419f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7fd fe10 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 800417c:	61b8      	str	r0, [r7, #24]
        break;
 800417e:	e013      	b.n	80041a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7fd fe20 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 8004184:	61b8      	str	r0, [r7, #24]
        break;
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <UART_SetConfig+0x4c4>)
 800418a:	61bb      	str	r3, [r7, #24]
        break;
 800418c:	e00c      	b.n	80041a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7fd fd33 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8004192:	61b8      	str	r0, [r7, #24]
        break;
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	61bb      	str	r3, [r7, #24]
        break;
 800419c:	e004      	b.n	80041a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	77bb      	strb	r3, [r7, #30]
        break;
 80041a6:	bf00      	nop
    }

    if (pclk != 0U)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	085a      	lsrs	r2, r3, #1
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	441a      	add	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b0f      	cmp	r3, #15
 80041c6:	d909      	bls.n	80041dc <UART_SetConfig+0x4a0>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ce:	d205      	bcs.n	80041dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	e001      	b.n	80041e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40007c00 	.word	0x40007c00
 80041fc:	40023800 	.word	0x40023800
 8004200:	00f42400 	.word	0x00f42400

08004204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01a      	beq.n	800431a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004302:	d10a      	bne.n	800431a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004358:	f7fc fce4 	bl	8000d24 <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d10e      	bne.n	800438a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f831 	bl	80043e2 <UART_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e027      	b.n	80043da <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d10e      	bne.n	80043b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f81b 	bl	80043e2 <UART_WaitOnFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e011      	b.n	80043da <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b09c      	sub	sp, #112	; 0x70
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f2:	e0a7      	b.n	8004544 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	f000 80a3 	beq.w	8004544 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fc fc91 	bl	8000d24 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <UART_WaitOnFlagUntilTimeout+0x32>
 800440e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004410:	2b00      	cmp	r3, #0
 8004412:	d13f      	bne.n	8004494 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004428:	667b      	str	r3, [r7, #100]	; 0x64
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004434:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e6      	bne.n	8004414 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3308      	adds	r3, #8
 800444c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	663b      	str	r3, [r7, #96]	; 0x60
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004466:	64ba      	str	r2, [r7, #72]	; 0x48
 8004468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800446c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e068      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d050      	beq.n	8004544 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	d148      	bne.n	8004544 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
 80044dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e6      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3308      	adds	r3, #8
 80044f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	613b      	str	r3, [r7, #16]
   return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	66bb      	str	r3, [r7, #104]	; 0x68
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800450e:	623a      	str	r2, [r7, #32]
 8004510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	69f9      	ldr	r1, [r7, #28]
 8004514:	6a3a      	ldr	r2, [r7, #32]
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	61bb      	str	r3, [r7, #24]
   return(result);
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e5      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e010      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4013      	ands	r3, r2
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	429a      	cmp	r2, r3
 8004560:	f43f af48 	beq.w	80043f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3770      	adds	r7, #112	; 0x70
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004570:	b480      	push	{r7}
 8004572:	b097      	sub	sp, #92	; 0x5c
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d10e      	bne.n	80045c2 <UART_Start_Receive_IT+0x52>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <UART_Start_Receive_IT+0x48>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045b6:	e02d      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c0:	e028      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10d      	bne.n	80045e6 <UART_Start_Receive_IT+0x76>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <UART_Start_Receive_IT+0x6c>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045da:	e01b      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	227f      	movs	r2, #127	; 0x7f
 80045e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045e4:	e016      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ee:	d10d      	bne.n	800460c <UART_Start_Receive_IT+0x9c>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <UART_Start_Receive_IT+0x92>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	227f      	movs	r2, #127	; 0x7f
 80045fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004600:	e008      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	223f      	movs	r2, #63	; 0x3f
 8004606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800460a:	e003      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2222      	movs	r2, #34	; 0x22
 8004620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	657b      	str	r3, [r7, #84]	; 0x54
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004644:	64ba      	str	r2, [r7, #72]	; 0x48
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800464a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004660:	d107      	bne.n	8004672 <UART_Start_Receive_IT+0x102>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <UART_Start_Receive_IT+0x184>)
 800466e:	669a      	str	r2, [r3, #104]	; 0x68
 8004670:	e002      	b.n	8004678 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <UART_Start_Receive_IT+0x188>)
 8004676:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d019      	beq.n	80046b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
 80046a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e6      	bne.n	8004680 <UART_Start_Receive_IT+0x110>
 80046b2:	e018      	b.n	80046e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	613b      	str	r3, [r7, #16]
   return(result);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f043 0320 	orr.w	r3, r3, #32
 80046c8:	653b      	str	r3, [r7, #80]	; 0x50
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	69f9      	ldr	r1, [r7, #28]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	61bb      	str	r3, [r7, #24]
   return(result);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	375c      	adds	r7, #92	; 0x5c
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	080049ab 	.word	0x080049ab
 80046f8:	08004845 	.word	0x08004845

080046fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b095      	sub	sp, #84	; 0x54
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004722:	643b      	str	r3, [r7, #64]	; 0x40
 8004724:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e6      	bne.n	8004704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3308      	adds	r3, #8
 800473c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	61fb      	str	r3, [r7, #28]
   return(result);
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	64bb      	str	r3, [r7, #72]	; 0x48
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	2b01      	cmp	r3, #1
 8004770:	d118      	bne.n	80047a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	647b      	str	r3, [r7, #68]	; 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	613b      	str	r3, [r7, #16]
   return(result);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e6      	bne.n	8004772 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80047b8:	bf00      	nop
 80047ba:	3754      	adds	r7, #84	; 0x54
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff fa8a 	bl	8003cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	60bb      	str	r3, [r7, #8]
   return(result);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	613b      	str	r3, [r7, #16]
   return(result);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e6      	bne.n	80047f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fa56 	bl	8003ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483c:	bf00      	nop
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b096      	sub	sp, #88	; 0x58
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004852:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485c:	2b22      	cmp	r3, #34	; 0x22
 800485e:	f040 8098 	bne.w	8004992 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800486c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004870:	b2d9      	uxtb	r1, r3
 8004872:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004876:	b2da      	uxtb	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	400a      	ands	r2, r1
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d17b      	bne.n	80049a2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048be:	653b      	str	r3, [r7, #80]	; 0x50
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	623b      	str	r3, [r7, #32]
   return(result);
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048fc:	633a      	str	r2, [r7, #48]	; 0x30
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004928:	2b01      	cmp	r3, #1
 800492a:	d12e      	bne.n	800498a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	64bb      	str	r3, [r7, #72]	; 0x48
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	69b9      	ldr	r1, [r7, #24]
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	617b      	str	r3, [r7, #20]
   return(result);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e6      	bne.n	8004932 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d103      	bne.n	800497a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2210      	movs	r2, #16
 8004978:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff f9c4 	bl	8003d10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004988:	e00b      	b.n	80049a2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fb fef4 	bl	8000778 <HAL_UART_RxCpltCallback>
}
 8004990:	e007      	b.n	80049a2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	619a      	str	r2, [r3, #24]
}
 80049a2:	bf00      	nop
 80049a4:	3758      	adds	r7, #88	; 0x58
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b096      	sub	sp, #88	; 0x58
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c2:	2b22      	cmp	r3, #34	; 0x22
 80049c4:	f040 8098 	bne.w	8004af8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80049d8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80049dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80049e0:	4013      	ands	r3, r2
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d17b      	bne.n	8004b08 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e6      	bne.n	8004a10 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d12e      	bne.n	8004af0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f023 0310 	bic.w	r3, r3, #16
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6979      	ldr	r1, [r7, #20]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e6      	bne.n	8004a98 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d103      	bne.n	8004ae0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2210      	movs	r2, #16
 8004ade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff f911 	bl	8003d10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aee:	e00b      	b.n	8004b08 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fb fe41 	bl	8000778 <HAL_UART_RxCpltCallback>
}
 8004af6:	e007      	b.n	8004b08 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0208 	orr.w	r2, r2, #8
 8004b06:	619a      	str	r2, [r3, #24]
}
 8004b08:	bf00      	nop
 8004b0a:	3758      	adds	r7, #88	; 0x58
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <memset>:
 8004b10:	4402      	add	r2, r0
 8004b12:	4603      	mov	r3, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <__libc_init_array>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4d0d      	ldr	r5, [pc, #52]	; (8004b58 <__libc_init_array+0x38>)
 8004b24:	4c0d      	ldr	r4, [pc, #52]	; (8004b5c <__libc_init_array+0x3c>)
 8004b26:	1b64      	subs	r4, r4, r5
 8004b28:	10a4      	asrs	r4, r4, #2
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	42a6      	cmp	r6, r4
 8004b2e:	d109      	bne.n	8004b44 <__libc_init_array+0x24>
 8004b30:	4d0b      	ldr	r5, [pc, #44]	; (8004b60 <__libc_init_array+0x40>)
 8004b32:	4c0c      	ldr	r4, [pc, #48]	; (8004b64 <__libc_init_array+0x44>)
 8004b34:	f000 f818 	bl	8004b68 <_init>
 8004b38:	1b64      	subs	r4, r4, r5
 8004b3a:	10a4      	asrs	r4, r4, #2
 8004b3c:	2600      	movs	r6, #0
 8004b3e:	42a6      	cmp	r6, r4
 8004b40:	d105      	bne.n	8004b4e <__libc_init_array+0x2e>
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b48:	4798      	blx	r3
 8004b4a:	3601      	adds	r6, #1
 8004b4c:	e7ee      	b.n	8004b2c <__libc_init_array+0xc>
 8004b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b52:	4798      	blx	r3
 8004b54:	3601      	adds	r6, #1
 8004b56:	e7f2      	b.n	8004b3e <__libc_init_array+0x1e>
 8004b58:	08004ba0 	.word	0x08004ba0
 8004b5c:	08004ba0 	.word	0x08004ba0
 8004b60:	08004ba0 	.word	0x08004ba0
 8004b64:	08004ba4 	.word	0x08004ba4

08004b68 <_init>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	bf00      	nop
 8004b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6e:	bc08      	pop	{r3}
 8004b70:	469e      	mov	lr, r3
 8004b72:	4770      	bx	lr

08004b74 <_fini>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr
