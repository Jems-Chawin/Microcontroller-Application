
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a94  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006184  08009c98  08009c98  00019c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe1c  0800fe1c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe1c  0800fe1c  0001fe1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe24  0800fe24  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe24  0800fe24  0001fe24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe28  0800fe28  0001fe28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800fe2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001d8  08010004  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08010004  00020538  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ac0  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dd6  00000000  00000000  00037d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  0003bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f3  00000000  00000000  0003d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b465  00000000  00000000  0003e1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2f9  00000000  00000000  00069620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010120f  00000000  00000000  00086919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006988  00000000  00000000  00187b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0018e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08009c7c 	.word	0x08009c7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08009c7c 	.word	0x08009c7c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <am2320_Init>:
 */


#include "am2320.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	461c      	mov	r4, r3
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bc90      	pop	{r4, r7}
 8000618:	4770      	bx	lr
	...

0800061c <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <am2320_ReadValue+0xa4>)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	4611      	mov	r1, r2
 800062e:	8019      	strh	r1, [r3, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	0c12      	lsrs	r2, r2, #16
 8000634:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	b299      	uxth	r1, r3
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2200      	movs	r2, #0
 800064a:	f002 feed 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f002 fab4 	bl	8002bbc <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	b299      	uxth	r1, r3
 800065e:	f107 020c 	add.w	r2, r7, #12
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2303      	movs	r3, #3
 800066a:	f002 fedd 	bl	8003428 <HAL_I2C_Master_Transmit>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <am2320_ReadValue+0x5c>
		return 1;
 8000674:	2301      	movs	r3, #1
 8000676:	e01f      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	HAL_Delay(2);
 8000678:	2002      	movs	r0, #2
 800067a:	f002 fa9f 	bl	8002bbc <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	b299      	uxth	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	1d5a      	adds	r2, r3, #5
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2308      	movs	r3, #8
 8000694:	f002 ffbc 	bl	8003610 <HAL_I2C_Master_Receive>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <am2320_ReadValue+0x86>
		return 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	e00a      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	799b      	ldrb	r3, [r3, #6]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d005      	beq.n	80006b6 <am2320_ReadValue+0x9a>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d001      	beq.n	80006b6 <am2320_ReadValue+0x9a>
		return 3;
 80006b2:	2303      	movs	r3, #3
 80006b4:	e000      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08009c98 	.word	0x08009c98

080006c4 <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
	int read = am2320_ReadValue(am2320);
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff ffa3 	bl	800061c <am2320_ReadValue>
 80006d6:	4603      	mov	r3, r0
 80006d8:	613b      	str	r3, [r7, #16]
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	7a9b      	ldrb	r3, [r3, #10]
 80006de:	b21a      	sxth	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	7a5b      	ldrb	r3, [r3, #9]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 80006ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	da05      	bge.n	8000702 <am2320_GetTemperatureAndHumidity+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 80006f6:	8afb      	ldrh	r3, [r7, #22]
 80006f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	425b      	negs	r3, r3
 8000700:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 8000702:	8afb      	ldrh	r3, [r7, #22]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800070c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	edc3 7a00 	vstr	s15, [r3]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	7a1b      	ldrb	r3, [r3, #8]
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	79db      	ldrb	r3, [r3, #7]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	4313      	orrs	r3, r2
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000730:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	edc3 7a00 	vstr	s15, [r3]
}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	4b8d      	ldr	r3, [pc, #564]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a8c      	ldr	r2, [pc, #560]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b8a      	ldr	r3, [pc, #552]	; (8000994 <MX_GPIO_Init+0x24c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b87      	ldr	r3, [pc, #540]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a86      	ldr	r2, [pc, #536]	; (8000994 <MX_GPIO_Init+0x24c>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b84      	ldr	r3, [pc, #528]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078e:	4b81      	ldr	r3, [pc, #516]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a80      	ldr	r2, [pc, #512]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000794:	f043 0320 	orr.w	r3, r3, #32
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b7e      	ldr	r3, [pc, #504]	; (8000994 <MX_GPIO_Init+0x24c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0320 	and.w	r3, r3, #32
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b7b      	ldr	r3, [pc, #492]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a7a      	ldr	r2, [pc, #488]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b78      	ldr	r3, [pc, #480]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b75      	ldr	r3, [pc, #468]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a74      	ldr	r2, [pc, #464]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b72      	ldr	r3, [pc, #456]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b6f      	ldr	r3, [pc, #444]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a6e      	ldr	r2, [pc, #440]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b6c      	ldr	r3, [pc, #432]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b69      	ldr	r3, [pc, #420]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a68      	ldr	r2, [pc, #416]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b66      	ldr	r3, [pc, #408]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	4b63      	ldr	r3, [pc, #396]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a62      	ldr	r2, [pc, #392]	; (8000994 <MX_GPIO_Init+0x24c>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b60      	ldr	r3, [pc, #384]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2168      	movs	r1, #104	; 0x68
 8000822:	485d      	ldr	r0, [pc, #372]	; (8000998 <MX_GPIO_Init+0x250>)
 8000824:	f002 fd56 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800082e:	485b      	ldr	r0, [pc, #364]	; (800099c <MX_GPIO_Init+0x254>)
 8000830:	f002 fd50 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	4859      	ldr	r0, [pc, #356]	; (80009a0 <MX_GPIO_Init+0x258>)
 800083a:	f002 fd4b 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000844:	4857      	ldr	r0, [pc, #348]	; (80009a4 <MX_GPIO_Init+0x25c>)
 8000846:	f002 fd45 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800084a:	2314      	movs	r3, #20
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	484e      	ldr	r0, [pc, #312]	; (8000998 <MX_GPIO_Init+0x250>)
 800085e:	f002 fb75 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000862:	2368      	movs	r3, #104	; 0x68
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4847      	ldr	r0, [pc, #284]	; (8000998 <MX_GPIO_Init+0x250>)
 800087a:	f002 fb67 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4844      	ldr	r0, [pc, #272]	; (80009a4 <MX_GPIO_Init+0x25c>)
 8000894:	f002 fb5a 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000898:	2332      	movs	r3, #50	; 0x32
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a8:	230b      	movs	r3, #11
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	483c      	ldr	r0, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x25c>)
 80008b4:	f002 fb4a 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008b8:	2386      	movs	r3, #134	; 0x86
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c8:	230b      	movs	r3, #11
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4835      	ldr	r0, [pc, #212]	; (80009a8 <MX_GPIO_Init+0x260>)
 80008d4:	f002 fb3a 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ea:	230b      	movs	r3, #11
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4829      	ldr	r0, [pc, #164]	; (800099c <MX_GPIO_Init+0x254>)
 80008f6:	f002 fb29 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_GPIO_Init+0x254>)
 8000914:	f002 fb1a 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	481c      	ldr	r0, [pc, #112]	; (80009a0 <MX_GPIO_Init+0x258>)
 8000930:	f002 fb0c 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <MX_GPIO_Init+0x258>)
 8000948:	f002 fb00 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800094c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_GPIO_Init+0x25c>)
 8000966:	f002 faf1 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800096a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800097c:	230b      	movs	r3, #11
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_GPIO_Init+0x258>)
 8000988:	f002 fae0 	bl	8002f4c <HAL_GPIO_Init>

}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020000 	.word	0x40020000

080009ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_I2C1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_I2C1_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e8:	f002 fc8e 	bl	8003308 <HAL_I2C_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f000 fdcf 	bl	8001594 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009fa:	f003 f8df 	bl	8003bbc <HAL_I2CEx_ConfigAnalogFilter>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f000 fdc6 	bl	8001594 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_I2C1_Init+0x74>)
 8000a0c:	f003 f921 	bl	8003c52 <HAL_I2CEx_ConfigDigitalFilter>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 fdbd 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001f4 	.word	0x200001f4
 8000a24:	40005400 	.word	0x40005400
 8000a28:	00c0eaff 	.word	0x00c0eaff

08000a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_I2C_MspInit+0x7c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d128      	bne.n	8000aa0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_I2C_MspInit+0x80>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <HAL_I2C_MspInit+0x80>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_I2C_MspInit+0x80>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <HAL_I2C_MspInit+0x84>)
 8000a84:	f002 fa62 	bl	8002f4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_I2C_MspInit+0x80>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_I2C_MspInit+0x80>)
 8000a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_I2C_MspInit+0x80>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab8:	f3bf 8f4f 	dsb	sy
}
 8000abc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000abe:	f3bf 8f6f 	isb	sy
}
 8000ac2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <SCB_EnableICache+0x48>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000acc:	f3bf 8f4f 	dsb	sy
}
 8000ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ad2:	f3bf 8f6f 	isb	sy
}
 8000ad6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <SCB_EnableICache+0x48>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <SCB_EnableICache+0x48>)
 8000ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae4:	f3bf 8f4f 	dsb	sy
}
 8000ae8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aea:	f3bf 8f6f 	isb	sy
}
 8000aee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0e:	f3bf 8f4f 	dsb	sy
}
 8000b12:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b1a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	0b5b      	lsrs	r3, r3, #13
 8000b20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b24:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b2e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	015a      	lsls	r2, r3, #5
 8000b34:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b38:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b3e:	4911      	ldr	r1, [pc, #68]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b40:	4313      	orrs	r3, r2
 8000b42:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	60ba      	str	r2, [r7, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1ef      	bne.n	8000b30 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	1e5a      	subs	r2, r3, #1
 8000b54:	60fa      	str	r2, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1e5      	bne.n	8000b26 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5a:	f3bf 8f4f 	dsb	sy
}
 8000b5e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b6a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6c:	f3bf 8f4f 	dsb	sy
}
 8000b70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b72:	f3bf 8f6f 	isb	sy
}
 8000b76:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <rgb_to_uint16>:
uint16_t TP_Read(void);
void TP_Write(uint8_t value);
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2]);
uint8_t TP_Touchpad_Pressed(void);
uint32_t count=0;
uint16_t rgb_to_uint16(uint8_t r, uint8_t g, uint8_t b) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	460b      	mov	r3, r1
 8000b94:	71bb      	strb	r3, [r7, #6]
 8000b96:	4613      	mov	r3, r2
 8000b98:	717b      	strb	r3, [r7, #5]
    uint16_t red = (r >> 3) & 0x1F;    // Scale and shift red to 5 bits
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	f003 031f 	and.w	r3, r3, #31
 8000ba6:	81fb      	strh	r3, [r7, #14]
    uint16_t green = (g >> 2) & 0x3F;  // Scale and shift green to 6 bits
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bb4:	81bb      	strh	r3, [r7, #12]
    uint16_t blue = (b >> 3) & 0x1F;   // Scale and shift blue to 5 bits
 8000bb6:	797b      	ldrb	r3, [r7, #5]
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	f003 031f 	and.w	r3, r3, #31
 8000bc2:	817b      	strh	r3, [r7, #10]
    return (red << 11) | (green << 5) | blue; // Combine the values into a uint16
 8000bc4:	89fb      	ldrh	r3, [r7, #14]
 8000bc6:	02db      	lsls	r3, r3, #11
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	015b      	lsls	r3, r3, #5
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	b29b      	uxth	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b0fd      	sub	sp, #500	; 0x1f4
 8000bf0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000bf2:	f7ff ff5f 	bl	8000ab4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000bf6:	f7ff ff83 	bl	8000b00 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfa:	f001 ff73 	bl	8002ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfe:	f000 fbcb 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c02:	f7ff fda1 	bl	8000748 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c06:	f000 ffaf 	bl	8001b68 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000c0a:	f000 fcfb 	bl	8001604 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000c0e:	f000 fec7 	bl	80019a0 <MX_TIM1_Init>
  MX_RNG_Init();
 8000c12:	f000 fcc3 	bl	800159c <MX_RNG_Init>
  MX_I2C1_Init();
 8000c16:	f7ff fec9 	bl	80009ac <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c1a:	f000 ff17 	bl	8001a4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000c1e:	f001 fb23 	bl	8002268 <ILI9341_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
 8000c22:	2201      	movs	r2, #1
 8000c24:	49d4      	ldr	r1, [pc, #848]	; (8000f78 <main+0x38c>)
 8000c26:	48d5      	ldr	r0, [pc, #852]	; (8000f7c <main+0x390>)
 8000c28:	f005 fa7c 	bl	8006124 <HAL_UART_Receive_IT>
  Am2320_HandleTypeDef Am2320_;
  Am2320_ = am2320_Init(&hi2c1, 0x5C << 1);
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	22b8      	movs	r2, #184	; 0xb8
 8000c30:	49d3      	ldr	r1, [pc, #844]	; (8000f80 <main+0x394>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fcda 	bl	80005ec <am2320_Init>
 8000c38:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000c3c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8000c40:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 8000c44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char group[50] = "Group No.20";
 8000c4a:	4ace      	ldr	r2, [pc, #824]	; (8000f84 <main+0x398>)
 8000c4c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000c50:	6810      	ldr	r0, [r2, #0]
 8000c52:	6851      	ldr	r1, [r2, #4]
 8000c54:	6892      	ldr	r2, [r2, #8]
 8000c56:	c307      	stmia	r3!, {r0, r1, r2}
 8000c58:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000c5c:	2226      	movs	r2, #38	; 0x26
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f006 ff9a 	bl	8007b9a <memset>
  char first_name[50] = "Pollawat";
 8000c66:	4ac8      	ldr	r2, [pc, #800]	; (8000f88 <main+0x39c>)
 8000c68:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8000c6c:	6810      	ldr	r0, [r2, #0]
 8000c6e:	6851      	ldr	r1, [r2, #4]
 8000c70:	c303      	stmia	r3!, {r0, r1}
 8000c72:	7a12      	ldrb	r2, [r2, #8]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	f207 1365 	addw	r3, r7, #357	; 0x165
 8000c7a:	2229      	movs	r2, #41	; 0x29
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f006 ff8b 	bl	8007b9a <memset>
  char last_name[50] = "Patllawol";
 8000c84:	4ac1      	ldr	r2, [pc, #772]	; (8000f8c <main+0x3a0>)
 8000c86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000c8a:	6810      	ldr	r0, [r2, #0]
 8000c8c:	6851      	ldr	r1, [r2, #4]
 8000c8e:	c303      	stmia	r3!, {r0, r1}
 8000c90:	8912      	ldrh	r2, [r2, #8]
 8000c92:	801a      	strh	r2, [r3, #0]
 8000c94:	f507 7399 	add.w	r3, r7, #306	; 0x132
 8000c98:	2228      	movs	r2, #40	; 0x28
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 ff7c 	bl	8007b9a <memset>
  char student_id[50] = "64011201";
 8000ca2:	4abb      	ldr	r2, [pc, #748]	; (8000f90 <main+0x3a4>)
 8000ca4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ca8:	6810      	ldr	r0, [r2, #0]
 8000caa:	6851      	ldr	r1, [r2, #4]
 8000cac:	c303      	stmia	r3!, {r0, r1}
 8000cae:	7a12      	ldrb	r2, [r2, #8]
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	f107 03fd 	add.w	r3, r7, #253	; 0xfd
 8000cb6:	2229      	movs	r2, #41	; 0x29
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 ff6d 	bl	8007b9a <memset>
  ILI9341_Fill_Screen(WHITE);
 8000cc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cc4:	f001 fc7c 	bl	80025c0 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f001 fa6f 	bl	80021ac <ILI9341_Set_Rotation>

    /* USER CODE BEGIN 3 */

	  //----------------------------------------------------------PERFORMANCE TEST
//	  first screen
	  if (select_screen == 0){
 8000cce:	4bb1      	ldr	r3, [pc, #708]	; (8000f94 <main+0x3a8>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8137 	bne.w	8000f46 <main+0x35a>
		  char humid[30];
		  char rper[30];
		  char gper[30];
		  char bper[30];

		  uint16_t mix_color = rgb_to_uint16(r*255/10,g*255/10,b*255/10);
 8000cd8:	4baf      	ldr	r3, [pc, #700]	; (8000f98 <main+0x3ac>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4613      	mov	r3, r2
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	4aad      	ldr	r2, [pc, #692]	; (8000f9c <main+0x3b0>)
 8000ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cea:	1092      	asrs	r2, r2, #2
 8000cec:	17db      	asrs	r3, r3, #31
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b2d8      	uxtb	r0, r3
 8000cf2:	4bab      	ldr	r3, [pc, #684]	; (8000fa0 <main+0x3b4>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	4aa7      	ldr	r2, [pc, #668]	; (8000f9c <main+0x3b0>)
 8000d00:	fb82 1203 	smull	r1, r2, r2, r3
 8000d04:	1092      	asrs	r2, r2, #2
 8000d06:	17db      	asrs	r3, r3, #31
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b2d9      	uxtb	r1, r3
 8000d0c:	4ba5      	ldr	r3, [pc, #660]	; (8000fa4 <main+0x3b8>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4613      	mov	r3, r2
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	4aa0      	ldr	r2, [pc, #640]	; (8000f9c <main+0x3b0>)
 8000d1a:	fb82 4203 	smull	r4, r2, r2, r3
 8000d1e:	1092      	asrs	r2, r2, #2
 8000d20:	17db      	asrs	r3, r3, #31
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	f7ff ff2e 	bl	8000b88 <rgb_to_uint16>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da

		  am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 8000d32:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000d36:	4a9c      	ldr	r2, [pc, #624]	; (8000fa8 <main+0x3bc>)
 8000d38:	499c      	ldr	r1, [pc, #624]	; (8000fac <main+0x3c0>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcc2 	bl	80006c4 <am2320_GetTemperatureAndHumidity>

		  sprintf(tempC, "%.1f C", temperature);
 8000d40:	4b9a      	ldr	r3, [pc, #616]	; (8000fac <main+0x3c0>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4a:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8000d4e:	ec53 2b17 	vmov	r2, r3, d7
 8000d52:	4997      	ldr	r1, [pc, #604]	; (8000fb0 <main+0x3c4>)
 8000d54:	f006 febe 	bl	8007ad4 <siprintf>
		  sprintf(humid, "%.1f %cRH", humidity,'%');
 8000d58:	4b93      	ldr	r3, [pc, #588]	; (8000fa8 <main+0x3bc>)
 8000d5a:	edd3 7a00 	vldr	s15, [r3]
 8000d5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d62:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000d66:	2325      	movs	r3, #37	; 0x25
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	ec53 2b17 	vmov	r2, r3, d7
 8000d6e:	4991      	ldr	r1, [pc, #580]	; (8000fb4 <main+0x3c8>)
 8000d70:	f006 feb0 	bl	8007ad4 <siprintf>
		  sprintf(rper, "%d %c",r*10,'%');
 8000d74:	4b88      	ldr	r3, [pc, #544]	; (8000f98 <main+0x3ac>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	461a      	mov	r2, r3
 8000d84:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000d88:	2325      	movs	r3, #37	; 0x25
 8000d8a:	498b      	ldr	r1, [pc, #556]	; (8000fb8 <main+0x3cc>)
 8000d8c:	f006 fea2 	bl	8007ad4 <siprintf>
		  sprintf(gper, "%d %c",g*10,'%');
 8000d90:	4b83      	ldr	r3, [pc, #524]	; (8000fa0 <main+0x3b4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000da4:	2325      	movs	r3, #37	; 0x25
 8000da6:	4984      	ldr	r1, [pc, #528]	; (8000fb8 <main+0x3cc>)
 8000da8:	f006 fe94 	bl	8007ad4 <siprintf>
		  sprintf(bper, "%d %c",b*10,'%');
 8000dac:	4b7d      	ldr	r3, [pc, #500]	; (8000fa4 <main+0x3b8>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000dc0:	2325      	movs	r3, #37	; 0x25
 8000dc2:	497d      	ldr	r1, [pc, #500]	; (8000fb8 <main+0x3cc>)
 8000dc4:	f006 fe86 	bl	8007ad4 <siprintf>


	  //	  top bar
		  ILI9341_Draw_Filled_Circle(160,45,30,mix_color);
 8000dc8:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8000dcc:	221e      	movs	r2, #30
 8000dce:	212d      	movs	r1, #45	; 0x2d
 8000dd0:	20a0      	movs	r0, #160	; 0xa0
 8000dd2:	f000 ff6e 	bl	8001cb2 <ILI9341_Draw_Filled_Circle>
		  ILI9341_Draw_Text(tempC, 30, 40, BLACK, 2, WHITE);
 8000dd6:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8000dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2302      	movs	r3, #2
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2300      	movs	r3, #0
 8000de6:	2228      	movs	r2, #40	; 0x28
 8000de8:	211e      	movs	r1, #30
 8000dea:	f001 f8e1 	bl	8001fb0 <ILI9341_Draw_Text>
		  ILI9341_Draw_Text(humid, 210, 40, BLACK, 2, WHITE);
 8000dee:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2228      	movs	r2, #40	; 0x28
 8000e00:	21d2      	movs	r1, #210	; 0xd2
 8000e02:	f001 f8d5 	bl	8001fb0 <ILI9341_Draw_Text>
	  //	  red bar
		  ILI9341_Draw_Filled_Circle(40,95,20,RED);
 8000e06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e0a:	2214      	movs	r2, #20
 8000e0c:	215f      	movs	r1, #95	; 0x5f
 8000e0e:	2028      	movs	r0, #40	; 0x28
 8000e10:	f000 ff4f 	bl	8001cb2 <ILI9341_Draw_Filled_Circle>
		  ILI9341_Draw_Filled_Rectangle_Coord(75,83,220,107,0xF410);
 8000e14:	f24f 4310 	movw	r3, #62480	; 0xf410
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	236b      	movs	r3, #107	; 0x6b
 8000e1c:	22dc      	movs	r2, #220	; 0xdc
 8000e1e:	2153      	movs	r1, #83	; 0x53
 8000e20:	204b      	movs	r0, #75	; 0x4b
 8000e22:	f000 ffce 	bl	8001dc2 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Filled_Rectangle_Coord(75,83,75 + (145*r/10),107,RED);
 8000e26:	4b5c      	ldr	r3, [pc, #368]	; (8000f98 <main+0x3ac>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4413      	add	r3, r2
 8000e36:	4a59      	ldr	r2, [pc, #356]	; (8000f9c <main+0x3b0>)
 8000e38:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3c:	1092      	asrs	r2, r2, #2
 8000e3e:	17db      	asrs	r3, r3, #31
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	334b      	adds	r3, #75	; 0x4b
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	236b      	movs	r3, #107	; 0x6b
 8000e50:	2153      	movs	r1, #83	; 0x53
 8000e52:	204b      	movs	r0, #75	; 0x4b
 8000e54:	f000 ffb5 	bl	8001dc2 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Text(rper, 250, 90, BLACK, 2, WHITE);
 8000e58:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	2302      	movs	r3, #2
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2300      	movs	r3, #0
 8000e68:	225a      	movs	r2, #90	; 0x5a
 8000e6a:	21fa      	movs	r1, #250	; 0xfa
 8000e6c:	f001 f8a0 	bl	8001fb0 <ILI9341_Draw_Text>
	  //	  green bar
		  ILI9341_Draw_Filled_Circle(40,145,20,GREEN);
 8000e70:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e74:	2214      	movs	r2, #20
 8000e76:	2191      	movs	r1, #145	; 0x91
 8000e78:	2028      	movs	r0, #40	; 0x28
 8000e7a:	f000 ff1a 	bl	8001cb2 <ILI9341_Draw_Filled_Circle>
		  ILI9341_Draw_Filled_Rectangle_Coord(75,133,220,157,0X9772);
 8000e7e:	f249 7372 	movw	r3, #38770	; 0x9772
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	239d      	movs	r3, #157	; 0x9d
 8000e86:	22dc      	movs	r2, #220	; 0xdc
 8000e88:	2185      	movs	r1, #133	; 0x85
 8000e8a:	204b      	movs	r0, #75	; 0x4b
 8000e8c:	f000 ff99 	bl	8001dc2 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Filled_Rectangle_Coord(75,133,75 + (145*g/10),157,GREEN);
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <main+0x3b4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a3e      	ldr	r2, [pc, #248]	; (8000f9c <main+0x3b0>)
 8000ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea6:	1092      	asrs	r2, r2, #2
 8000ea8:	17db      	asrs	r3, r3, #31
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	334b      	adds	r3, #75	; 0x4b
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	239d      	movs	r3, #157	; 0x9d
 8000eba:	2185      	movs	r1, #133	; 0x85
 8000ebc:	204b      	movs	r0, #75	; 0x4b
 8000ebe:	f000 ff80 	bl	8001dc2 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Text(gper, 250, 140, BLACK, 2, WHITE);
 8000ec2:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	2302      	movs	r3, #2
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	228c      	movs	r2, #140	; 0x8c
 8000ed4:	21fa      	movs	r1, #250	; 0xfa
 8000ed6:	f001 f86b 	bl	8001fb0 <ILI9341_Draw_Text>
	  //	  blue bar
		  ILI9341_Draw_Filled_Circle(40,195,20,BLUE);
 8000eda:	231f      	movs	r3, #31
 8000edc:	2214      	movs	r2, #20
 8000ede:	21c3      	movs	r1, #195	; 0xc3
 8000ee0:	2028      	movs	r0, #40	; 0x28
 8000ee2:	f000 fee6 	bl	8001cb2 <ILI9341_Draw_Filled_Circle>
		  ILI9341_Draw_Filled_Rectangle_Coord(75,183,220,207,0xAEDC);
 8000ee6:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	23cf      	movs	r3, #207	; 0xcf
 8000eee:	22dc      	movs	r2, #220	; 0xdc
 8000ef0:	21b7      	movs	r1, #183	; 0xb7
 8000ef2:	204b      	movs	r0, #75	; 0x4b
 8000ef4:	f000 ff65 	bl	8001dc2 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Filled_Rectangle_Coord(75,183,75 + (145*b/10),207,BLUE);
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <main+0x3b8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4413      	add	r3, r2
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	4413      	add	r3, r2
 8000f08:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <main+0x3b0>)
 8000f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0e:	1092      	asrs	r2, r2, #2
 8000f10:	17db      	asrs	r3, r3, #31
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	334b      	adds	r3, #75	; 0x4b
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	231f      	movs	r3, #31
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	23cf      	movs	r3, #207	; 0xcf
 8000f20:	21b7      	movs	r1, #183	; 0xb7
 8000f22:	204b      	movs	r0, #75	; 0x4b
 8000f24:	f000 ff4d 	bl	8001dc2 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Text(bper, 250, 190, BLACK, 2, WHITE);
 8000f28:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	2302      	movs	r3, #2
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2300      	movs	r3, #0
 8000f38:	22be      	movs	r2, #190	; 0xbe
 8000f3a:	21fa      	movs	r1, #250	; 0xfa
 8000f3c:	f001 f838 	bl	8001fb0 <ILI9341_Draw_Text>
		  HAL_Delay(20);
 8000f40:	2014      	movs	r0, #20
 8000f42:	f001 fe3b 	bl	8002bbc <HAL_Delay>
	  }

	  while(1){
		  if(select_screen == 0){
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <main+0x3a8>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d15f      	bne.n	800100e <main+0x422>
			  char tempC[30];
			  char humid[30];
			  am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 8000f4e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <main+0x3bc>)
 8000f54:	4915      	ldr	r1, [pc, #84]	; (8000fac <main+0x3c0>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fbb4 	bl	80006c4 <am2320_GetTemperatureAndHumidity>

			  sprintf(tempC, "%.1f C", temperature);
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <main+0x3c0>)
 8000f5e:	edd3 7a00 	vldr	s15, [r3]
 8000f62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f66:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f6a:	ec53 2b17 	vmov	r2, r3, d7
 8000f6e:	4910      	ldr	r1, [pc, #64]	; (8000fb0 <main+0x3c4>)
 8000f70:	f006 fdb0 	bl	8007ad4 <siprintf>
 8000f74:	e022      	b.n	8000fbc <main+0x3d0>
 8000f76:	bf00      	nop
 8000f78:	20000242 	.word	0x20000242
 8000f7c:	20000364 	.word	0x20000364
 8000f80:	200001f4 	.word	0x200001f4
 8000f84:	08009cb8 	.word	0x08009cb8
 8000f88:	08009cc4 	.word	0x08009cc4
 8000f8c:	08009cd0 	.word	0x08009cd0
 8000f90:	08009cdc 	.word	0x08009cdc
 8000f94:	20000241 	.word	0x20000241
 8000f98:	20000243 	.word	0x20000243
 8000f9c:	66666667 	.word	0x66666667
 8000fa0:	20000244 	.word	0x20000244
 8000fa4:	20000245 	.word	0x20000245
 8000fa8:	2000024c 	.word	0x2000024c
 8000fac:	20000248 	.word	0x20000248
 8000fb0:	08009c9c 	.word	0x08009c9c
 8000fb4:	08009ca4 	.word	0x08009ca4
 8000fb8:	08009cb0 	.word	0x08009cb0
			  sprintf(humid, "%.1f %cRH", humidity,'%');
 8000fbc:	4bb9      	ldr	r3, [pc, #740]	; (80012a4 <main+0x6b8>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc6:	f107 0014 	add.w	r0, r7, #20
 8000fca:	2325      	movs	r3, #37	; 0x25
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	ec53 2b17 	vmov	r2, r3, d7
 8000fd2:	49b5      	ldr	r1, [pc, #724]	; (80012a8 <main+0x6bc>)
 8000fd4:	f006 fd7e 	bl	8007ad4 <siprintf>
			  ILI9341_Draw_Text(tempC, 30, 40, BLACK, 2, WHITE);
 8000fd8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2228      	movs	r2, #40	; 0x28
 8000fea:	211e      	movs	r1, #30
 8000fec:	f000 ffe0 	bl	8001fb0 <ILI9341_Draw_Text>
			  ILI9341_Draw_Text(humid, 210, 40, BLACK, 2, WHITE);
 8000ff0:	f107 0014 	add.w	r0, r7, #20
 8000ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	2228      	movs	r2, #40	; 0x28
 8001002:	21d2      	movs	r1, #210	; 0xd2
 8001004:	f000 ffd4 	bl	8001fb0 <ILI9341_Draw_Text>
			  HAL_Delay(20);
 8001008:	2014      	movs	r0, #20
 800100a:	f001 fdd7 	bl	8002bbc <HAL_Delay>
		  }
		  if(select_screen == 1 && count>=5){
 800100e:	4ba7      	ldr	r3, [pc, #668]	; (80012ac <main+0x6c0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d10b      	bne.n	800102e <main+0x442>
 8001016:	4ba6      	ldr	r3, [pc, #664]	; (80012b0 <main+0x6c4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b04      	cmp	r3, #4
 800101c:	d907      	bls.n	800102e <main+0x442>
			  select_screen = 0;
 800101e:	4ba3      	ldr	r3, [pc, #652]	; (80012ac <main+0x6c0>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
			  ILI9341_Fill_Screen(WHITE);
 8001024:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001028:	f001 faca 	bl	80025c0 <ILI9341_Fill_Screen>
			  break;
 800102c:	e0f5      	b.n	800121a <main+0x62e>
		  }
		  if(TP_Touchpad_Pressed())
 800102e:	f001 fd49 	bl	8002ac4 <TP_Touchpad_Pressed>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80e9 	beq.w	800120c <main+0x620>
		  {
			  uint16_t x_pos = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f8a7 31d8 	strh.w	r3, [r7, #472]	; 0x1d8
			  uint16_t y_pos = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6

			  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800104c:	4899      	ldr	r0, [pc, #612]	; (80012b4 <main+0x6c8>)
 800104e:	f002 f941 	bl	80032d4 <HAL_GPIO_WritePin>

			  uint16_t position_array[2];

			  if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fc72 	bl	8002940 <TP_Read_Coordinates>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	f47f af71 	bne.w	8000f46 <main+0x35a>
			  {
				  x_pos = position_array[0];
 8001064:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001068:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	f8a7 31d8 	strh.w	r3, [r7, #472]	; 0x1d8
				  y_pos = position_array[1];
 8001072:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001076:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800107a:	885b      	ldrh	r3, [r3, #2]
 800107c:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
				  if (select_screen == 0){
 8001080:	4b8a      	ldr	r3, [pc, #552]	; (80012ac <main+0x6c0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	f040 809f 	bne.w	80011c8 <main+0x5dc>
					  if((130 <= y_pos && y_pos <= 190) && (165 <= x_pos && x_pos <= 240)){
 800108a:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 800108e:	2b81      	cmp	r3, #129	; 0x81
 8001090:	d91b      	bls.n	80010ca <main+0x4de>
 8001092:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 8001096:	2bbe      	cmp	r3, #190	; 0xbe
 8001098:	d817      	bhi.n	80010ca <main+0x4de>
 800109a:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 800109e:	2ba4      	cmp	r3, #164	; 0xa4
 80010a0:	d913      	bls.n	80010ca <main+0x4de>
 80010a2:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 80010a6:	2bf0      	cmp	r3, #240	; 0xf0
 80010a8:	d80f      	bhi.n	80010ca <main+0x4de>
						  select_screen = 1;
 80010aa:	4b80      	ldr	r3, [pc, #512]	; (80012ac <main+0x6c0>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
						  count = 0;
 80010b0:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <main+0x6c4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
						  HAL_TIM_Base_Start_IT(&htim1);
 80010b6:	4880      	ldr	r0, [pc, #512]	; (80012b8 <main+0x6cc>)
 80010b8:	f004 fb70 	bl	800579c <HAL_TIM_Base_Start_IT>
						  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80010c2:	487c      	ldr	r0, [pc, #496]	; (80012b4 <main+0x6c8>)
 80010c4:	f002 f906 	bl	80032d4 <HAL_GPIO_WritePin>
						  break;
 80010c8:	e0a7      	b.n	800121a <main+0x62e>
					  }
					  if((20 <= y_pos && y_pos <= 60) && (125 <= x_pos && x_pos <= 165)){
 80010ca:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 80010ce:	2b13      	cmp	r3, #19
 80010d0:	d924      	bls.n	800111c <main+0x530>
 80010d2:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 80010d6:	2b3c      	cmp	r3, #60	; 0x3c
 80010d8:	d820      	bhi.n	800111c <main+0x530>
 80010da:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 80010de:	2b7c      	cmp	r3, #124	; 0x7c
 80010e0:	d91c      	bls.n	800111c <main+0x530>
 80010e2:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 80010e6:	2ba5      	cmp	r3, #165	; 0xa5
 80010e8:	d818      	bhi.n	800111c <main+0x530>
						  r = (r+1)%11;
 80010ea:	4b74      	ldr	r3, [pc, #464]	; (80012bc <main+0x6d0>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	1c59      	adds	r1, r3, #1
 80010f0:	4b73      	ldr	r3, [pc, #460]	; (80012c0 <main+0x6d4>)
 80010f2:	fb83 2301 	smull	r2, r3, r3, r1
 80010f6:	105a      	asrs	r2, r3, #1
 80010f8:	17cb      	asrs	r3, r1, #31
 80010fa:	1ad2      	subs	r2, r2, r3
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	1aca      	subs	r2, r1, r3
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <main+0x6d0>)
 800110c:	701a      	strb	r2, [r3, #0]
						  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001114:	4867      	ldr	r0, [pc, #412]	; (80012b4 <main+0x6c8>)
 8001116:	f002 f8dd 	bl	80032d4 <HAL_GPIO_WritePin>
						  break;
 800111a:	e07e      	b.n	800121a <main+0x62e>
					  }
					  if((20 <= y_pos && y_pos <= 60) && (75 <= x_pos && x_pos <= 115)){
 800111c:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 8001120:	2b13      	cmp	r3, #19
 8001122:	d924      	bls.n	800116e <main+0x582>
 8001124:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 8001128:	2b3c      	cmp	r3, #60	; 0x3c
 800112a:	d820      	bhi.n	800116e <main+0x582>
 800112c:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 8001130:	2b4a      	cmp	r3, #74	; 0x4a
 8001132:	d91c      	bls.n	800116e <main+0x582>
 8001134:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 8001138:	2b73      	cmp	r3, #115	; 0x73
 800113a:	d818      	bhi.n	800116e <main+0x582>
						  g = (g+1)%11;
 800113c:	4b61      	ldr	r3, [pc, #388]	; (80012c4 <main+0x6d8>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	1c59      	adds	r1, r3, #1
 8001142:	4b5f      	ldr	r3, [pc, #380]	; (80012c0 <main+0x6d4>)
 8001144:	fb83 2301 	smull	r2, r3, r3, r1
 8001148:	105a      	asrs	r2, r3, #1
 800114a:	17cb      	asrs	r3, r1, #31
 800114c:	1ad2      	subs	r2, r2, r3
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	1aca      	subs	r2, r1, r3
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <main+0x6d8>)
 800115e:	701a      	strb	r2, [r3, #0]
						  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001166:	4853      	ldr	r0, [pc, #332]	; (80012b4 <main+0x6c8>)
 8001168:	f002 f8b4 	bl	80032d4 <HAL_GPIO_WritePin>
						  break;
 800116c:	e055      	b.n	800121a <main+0x62e>
					  }
					  if((20 <= y_pos && y_pos <= 60) && (25 <= x_pos && x_pos <= 65)){
 800116e:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 8001172:	2b13      	cmp	r3, #19
 8001174:	f67f aee7 	bls.w	8000f46 <main+0x35a>
 8001178:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 800117c:	2b3c      	cmp	r3, #60	; 0x3c
 800117e:	f63f aee2 	bhi.w	8000f46 <main+0x35a>
 8001182:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 8001186:	2b18      	cmp	r3, #24
 8001188:	f67f aedd 	bls.w	8000f46 <main+0x35a>
 800118c:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 8001190:	2b41      	cmp	r3, #65	; 0x41
 8001192:	f63f aed8 	bhi.w	8000f46 <main+0x35a>
						  b = (b+1)%11;
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <main+0x6dc>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <main+0x6d4>)
 800119e:	fb83 2301 	smull	r2, r3, r3, r1
 80011a2:	105a      	asrs	r2, r3, #1
 80011a4:	17cb      	asrs	r3, r1, #31
 80011a6:	1ad2      	subs	r2, r2, r3
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	1aca      	subs	r2, r1, r3
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <main+0x6dc>)
 80011b8:	701a      	strb	r2, [r3, #0]
						  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80011c0:	483c      	ldr	r0, [pc, #240]	; (80012b4 <main+0x6c8>)
 80011c2:	f002 f887 	bl	80032d4 <HAL_GPIO_WritePin>
						  break;
 80011c6:	e028      	b.n	800121a <main+0x62e>
					  }
				  }
				  else{
					  if ((25 <= y_pos && y_pos <= 125) && (110 <= x_pos && x_pos <= 210)){
 80011c8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 80011cc:	2b18      	cmp	r3, #24
 80011ce:	f67f aeba 	bls.w	8000f46 <main+0x35a>
 80011d2:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 80011d6:	2b7d      	cmp	r3, #125	; 0x7d
 80011d8:	f63f aeb5 	bhi.w	8000f46 <main+0x35a>
 80011dc:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 80011e0:	2b6d      	cmp	r3, #109	; 0x6d
 80011e2:	f67f aeb0 	bls.w	8000f46 <main+0x35a>
 80011e6:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 80011ea:	2bd2      	cmp	r3, #210	; 0xd2
 80011ec:	f63f aeab 	bhi.w	8000f46 <main+0x35a>
						  select_screen = 0;
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <main+0x6c0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
						  ILI9341_Fill_Screen(WHITE);
 80011f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011fa:	f001 f9e1 	bl	80025c0 <ILI9341_Fill_Screen>
						  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001204:	482b      	ldr	r0, [pc, #172]	; (80012b4 <main+0x6c8>)
 8001206:	f002 f865 	bl	80032d4 <HAL_GPIO_WritePin>
						  break;
 800120a:	e006      	b.n	800121a <main+0x62e>


			  }
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001212:	4828      	ldr	r0, [pc, #160]	; (80012b4 <main+0x6c8>)
 8001214:	f002 f85e 	bl	80032d4 <HAL_GPIO_WritePin>
		  if(select_screen == 0){
 8001218:	e695      	b.n	8000f46 <main+0x35a>
		  	  }
	  	  }
	//	  second screen
	  	  if (select_screen == 1){
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <main+0x6c0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	f47f ad55 	bne.w	8000cce <main+0xe2>
	  		  ILI9341_Fill_Screen(WHITE);
 8001224:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001228:	f001 f9ca 	bl	80025c0 <ILI9341_Fill_Screen>
			  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 ffbd 	bl	80021ac <ILI9341_Set_Rotation>
			  uint16_t count = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
			  uint16_t mix_color = rgb_to_uint16(r*255/10,g*255/10,b*255/10);
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <main+0x6d0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <main+0x6e0>)
 8001246:	fb82 1203 	smull	r1, r2, r2, r3
 800124a:	1092      	asrs	r2, r2, #2
 800124c:	17db      	asrs	r3, r3, #31
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	b2d8      	uxtb	r0, r3
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <main+0x6d8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	4613      	mov	r3, r2
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <main+0x6e0>)
 8001260:	fb82 1203 	smull	r1, r2, r2, r3
 8001264:	1092      	asrs	r2, r2, #2
 8001266:	17db      	asrs	r3, r3, #31
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b2d9      	uxtb	r1, r3
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <main+0x6dc>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4613      	mov	r3, r2
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <main+0x6e0>)
 800127a:	fb82 4203 	smull	r4, r2, r2, r3
 800127e:	1092      	asrs	r2, r2, #2
 8001280:	17db      	asrs	r3, r3, #31
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	f7ff fc7e 	bl	8000b88 <rgb_to_uint16>
 800128c:	4603      	mov	r3, r0
 800128e:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4
			  for (int y=0;y<117;y++){
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001298:	e03f      	b.n	800131a <main+0x72e>
				  for (int x=0;x<100;x++){
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80012a0:	e032      	b.n	8001308 <main+0x71c>
 80012a2:	bf00      	nop
 80012a4:	2000024c 	.word	0x2000024c
 80012a8:	08009ca4 	.word	0x08009ca4
 80012ac:	20000241 	.word	0x20000241
 80012b0:	20000250 	.word	0x20000250
 80012b4:	40020400 	.word	0x40020400
 80012b8:	200002cc 	.word	0x200002cc
 80012bc:	20000243 	.word	0x20000243
 80012c0:	2e8ba2e9 	.word	0x2e8ba2e9
 80012c4:	20000244 	.word	0x20000244
 80012c8:	20000245 	.word	0x20000245
 80012cc:	66666667 	.word	0x66666667
					  ILI9341_Draw_Pixel(25+x,40+y,shan_pic[count]);
 80012d0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	3319      	adds	r3, #25
 80012d8:	b298      	uxth	r0, r3
 80012da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3328      	adds	r3, #40	; 0x28
 80012e2:	b299      	uxth	r1, r3
 80012e4:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80012e8:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <main+0x7a8>)
 80012ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ee:	461a      	mov	r2, r3
 80012f0:	f001 f98c 	bl	800260c <ILI9341_Draw_Pixel>
					  count++;
 80012f4:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80012f8:	3301      	adds	r3, #1
 80012fa:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
				  for (int x=0;x<100;x++){
 80012fe:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001302:	3301      	adds	r3, #1
 8001304:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001308:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800130c:	2b63      	cmp	r3, #99	; 0x63
 800130e:	dddf      	ble.n	80012d0 <main+0x6e4>
			  for (int y=0;y<117;y++){
 8001310:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001314:	3301      	adds	r3, #1
 8001316:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800131a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800131e:	2b74      	cmp	r3, #116	; 0x74
 8001320:	ddbb      	ble.n	800129a <main+0x6ae>
				  }
			  }
			  ILI9341_Draw_Text(group, 150, 40, mix_color, 2, WHITE);
 8001322:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8001326:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	2202      	movs	r2, #2
 8001332:	9200      	str	r2, [sp, #0]
 8001334:	2228      	movs	r2, #40	; 0x28
 8001336:	2196      	movs	r1, #150	; 0x96
 8001338:	f000 fe3a 	bl	8001fb0 <ILI9341_Draw_Text>
			  ILI9341_Draw_Text(first_name, 150, 80, mix_color, 2, WHITE);
 800133c:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8001340:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 8001344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	2202      	movs	r2, #2
 800134c:	9200      	str	r2, [sp, #0]
 800134e:	2250      	movs	r2, #80	; 0x50
 8001350:	2196      	movs	r1, #150	; 0x96
 8001352:	f000 fe2d 	bl	8001fb0 <ILI9341_Draw_Text>
			  ILI9341_Draw_Text(last_name, 150, 120, mix_color, 2, WHITE);
 8001356:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 800135a:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800135e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	2202      	movs	r2, #2
 8001366:	9200      	str	r2, [sp, #0]
 8001368:	2278      	movs	r2, #120	; 0x78
 800136a:	2196      	movs	r1, #150	; 0x96
 800136c:	f000 fe20 	bl	8001fb0 <ILI9341_Draw_Text>
			  ILI9341_Draw_Text(student_id, 150, 160, mix_color, 2, WHITE);
 8001370:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8001374:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8001378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	9200      	str	r2, [sp, #0]
 8001382:	22a0      	movs	r2, #160	; 0xa0
 8001384:	2196      	movs	r1, #150	; 0x96
 8001386:	f000 fe13 	bl	8001fb0 <ILI9341_Draw_Text>
			  HAL_Delay(20);
 800138a:	2014      	movs	r0, #20
 800138c:	f001 fc16 	bl	8002bbc <HAL_Delay>
	  if (select_screen == 0){
 8001390:	e49d      	b.n	8000cce <main+0xe2>
 8001392:	bf00      	nop
 8001394:	08009ce8 	.word	0x08009ce8

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0b8      	sub	sp, #224	; 0xe0
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013a2:	2234      	movs	r2, #52	; 0x34
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f006 fbf7 	bl	8007b9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2290      	movs	r2, #144	; 0x90
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 fbe8 	bl	8007b9a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013ca:	f002 fc8f 	bl	8003cec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <SystemClock_Config+0x128>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a3b      	ldr	r2, [pc, #236]	; (80014c0 <SystemClock_Config+0x128>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <SystemClock_Config+0x128>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <SystemClock_Config+0x12c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a36      	ldr	r2, [pc, #216]	; (80014c4 <SystemClock_Config+0x12c>)
 80013ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <SystemClock_Config+0x12c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fe:	2301      	movs	r3, #1
 8001400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001404:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800141a:	2304      	movs	r3, #4
 800141c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001420:	23c8      	movs	r3, #200	; 0xc8
 8001422:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800142c:	2309      	movs	r3, #9
 800142e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fcb5 	bl	8003dac <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001448:	f000 f8a4 	bl	8001594 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800144c:	f002 fc5e 	bl	8003d0c <HAL_PWREx_EnableOverDrive>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001456:	f000 f89d 	bl	8001594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800146c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800147c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001480:	2106      	movs	r1, #6
 8001482:	4618      	mov	r0, r3
 8001484:	f002 ff40 	bl	8004308 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800148e:	f000 f881 	bl	8001594 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <SystemClock_Config+0x130>)
 8001494:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001496:	2300      	movs	r3, #0
 8001498:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800149a:	2300      	movs	r3, #0
 800149c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 f953 	bl	8004754 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80014b4:	f000 f86e 	bl	8001594 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	37e0      	adds	r7, #224	; 0xe0
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000
 80014c8:	00204100 	.word	0x00204100

080014cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if(huart==&huart3){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a28      	ldr	r2, [pc, #160]	; (8001578 <HAL_UART_RxCpltCallback+0xac>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d149      	bne.n	8001570 <HAL_UART_RxCpltCallback+0xa4>
		HAL_UART_Receive_IT(&huart3,(uint8_t*)&ch,1);
 80014dc:	2201      	movs	r2, #1
 80014de:	4927      	ldr	r1, [pc, #156]	; (800157c <HAL_UART_RxCpltCallback+0xb0>)
 80014e0:	4825      	ldr	r0, [pc, #148]	; (8001578 <HAL_UART_RxCpltCallback+0xac>)
 80014e2:	f004 fe1f 	bl	8006124 <HAL_UART_Receive_IT>
		if (ch == 'r'){
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_UART_RxCpltCallback+0xb0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b72      	cmp	r3, #114	; 0x72
 80014ec:	d111      	bne.n	8001512 <HAL_UART_RxCpltCallback+0x46>
			r = (r+1)%11;
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_UART_RxCpltCallback+0xb4>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	1c59      	adds	r1, r3, #1
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_UART_RxCpltCallback+0xb8>)
 80014f6:	fb83 2301 	smull	r2, r3, r3, r1
 80014fa:	105a      	asrs	r2, r3, #1
 80014fc:	17cb      	asrs	r3, r1, #31
 80014fe:	1ad2      	subs	r2, r2, r3
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	1aca      	subs	r2, r1, r3
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_UART_RxCpltCallback+0xb4>)
 8001510:	701a      	strb	r2, [r3, #0]
		}
		if (ch == 'g'){
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_UART_RxCpltCallback+0xb0>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b67      	cmp	r3, #103	; 0x67
 8001518:	d111      	bne.n	800153e <HAL_UART_RxCpltCallback+0x72>
			g = (g+1)%11;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_UART_RxCpltCallback+0xbc>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	1c59      	adds	r1, r3, #1
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_UART_RxCpltCallback+0xb8>)
 8001522:	fb83 2301 	smull	r2, r3, r3, r1
 8001526:	105a      	asrs	r2, r3, #1
 8001528:	17cb      	asrs	r3, r1, #31
 800152a:	1ad2      	subs	r2, r2, r3
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	1aca      	subs	r2, r1, r3
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_UART_RxCpltCallback+0xbc>)
 800153c:	701a      	strb	r2, [r3, #0]
		}
		if (ch == 'b'){
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_UART_RxCpltCallback+0xb0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b62      	cmp	r3, #98	; 0x62
 8001544:	d111      	bne.n	800156a <HAL_UART_RxCpltCallback+0x9e>
			b = (b+1)%11;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_UART_RxCpltCallback+0xc0>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_UART_RxCpltCallback+0xb8>)
 800154e:	fb83 2301 	smull	r2, r3, r3, r1
 8001552:	105a      	asrs	r2, r3, #1
 8001554:	17cb      	asrs	r3, r1, #31
 8001556:	1ad2      	subs	r2, r2, r3
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	1aca      	subs	r2, r1, r3
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_UART_RxCpltCallback+0xc0>)
 8001568:	701a      	strb	r2, [r3, #0]
		}
		screen_state = 0;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_UART_RxCpltCallback+0xc4>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
	}
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000364 	.word	0x20000364
 800157c:	20000242 	.word	0x20000242
 8001580:	20000243 	.word	0x20000243
 8001584:	2e8ba2e9 	.word	0x2e8ba2e9
 8001588:	20000244 	.word	0x20000244
 800158c:	20000245 	.word	0x20000245
 8001590:	20000240 	.word	0x20000240

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x4>
	...

0800159c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_RNG_Init+0x20>)
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <MX_RNG_Init+0x24>)
 80015a4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_RNG_Init+0x20>)
 80015a8:	f003 fcfc 	bl	8004fa4 <HAL_RNG_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015b2:	f7ff ffef 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000254 	.word	0x20000254
 80015c0:	50060800 	.word	0x50060800

080015c4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_RNG_MspInit+0x38>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d10b      	bne.n	80015ee <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_RNG_MspInit+0x3c>)
 80015d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_RNG_MspInit+0x3c>)
 80015dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e0:	6353      	str	r3, [r2, #52]	; 0x34
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_RNG_MspInit+0x3c>)
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	50060800 	.word	0x50060800
 8001600:	40023800 	.word	0x40023800

08001604 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_SPI5_Init+0x74>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_SPI5_Init+0x78>)
 800160c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_SPI5_Init+0x74>)
 8001610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001614:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_SPI5_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_SPI5_Init+0x74>)
 800161e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001622:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_SPI5_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_SPI5_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_SPI5_Init+0x74>)
 8001632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001636:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_SPI5_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_SPI5_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_SPI5_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_SPI5_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_SPI5_Init+0x74>)
 8001652:	2207      	movs	r2, #7
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_SPI5_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_SPI5_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_SPI5_Init+0x74>)
 8001664:	f003 fcc8 	bl	8004ff8 <HAL_SPI_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800166e:	f7ff ff91 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000264 	.word	0x20000264
 800167c:	40015000 	.word	0x40015000

08001680 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_SPI_MspInit+0x7c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d128      	bne.n	80016f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_SPI_MspInit+0x80>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016d2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016e4:	2305      	movs	r3, #5
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <HAL_SPI_MspInit+0x84>)
 80016f0:	f001 fc2c 	bl	8002f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40015000 	.word	0x40015000
 8001700:	40023800 	.word	0x40023800
 8001704:	40021400 	.word	0x40021400

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_MspInit+0x44>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_MspInit+0x44>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_MspInit+0x44>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x44>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x44>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x44>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f001 fa12 	bl	8002b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800176a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <TIM1_UP_TIM10_IRQHandler+0x20>)
 800176e:	f004 f88d 	bl	800588c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000250 	.word	0x20000250
 800177c:	200002cc 	.word	0x200002cc

08001780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <TIM2_IRQHandler+0x10>)
 8001786:	f004 f881 	bl	800588c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000318 	.word	0x20000318

08001794 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <USART3_IRQHandler+0x10>)
 800179a:	f004 fd01 	bl	80061a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000364 	.word	0x20000364

080017a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c2:	f006 fa3d 	bl	8007c40 <__errno>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2216      	movs	r2, #22
 80017ca:	601a      	str	r2, [r3, #0]
	return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_exit>:

void _exit (int status)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffe7 	bl	80017b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ea:	e7fe      	b.n	80017ea <_exit+0x12>

080017ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
	}

return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
	}
	return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001886:	605a      	str	r2, [r3, #4]
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f006 f9a2 	bl	8007c40 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20080000 	.word	0x20080000
 8001928:	00000400 	.word	0x00000400
 800192c:	200002c8 	.word	0x200002c8
 8001930:	20000538 	.word	0x20000538

08001934 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <SystemInit+0x5c>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a14      	ldr	r2, [pc, #80]	; (8001990 <SystemInit+0x5c>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <SystemInit+0x60>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <SystemInit+0x60>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <SystemInit+0x60>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <SystemInit+0x60>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	490d      	ldr	r1, [pc, #52]	; (8001994 <SystemInit+0x60>)
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <SystemInit+0x64>)
 8001962:	4013      	ands	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <SystemInit+0x60>)
 8001968:	4a0c      	ldr	r2, [pc, #48]	; (800199c <SystemInit+0x68>)
 800196a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <SystemInit+0x60>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a08      	ldr	r2, [pc, #32]	; (8001994 <SystemInit+0x60>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001976:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x60>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SystemInit+0x5c>)
 8001980:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001984:	609a      	str	r2, [r3, #8]
#endif
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	40023800 	.word	0x40023800
 8001998:	fef6ffff 	.word	0xfef6ffff
 800199c:	24003010 	.word	0x24003010

080019a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <MX_TIM1_Init+0xa4>)
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <MX_TIM1_Init+0xa8>)
 80019c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <MX_TIM1_Init+0xa4>)
 80019c6:	f245 425f 	movw	r2, #21599	; 0x545f
 80019ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_TIM1_Init+0xa4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_TIM1_Init+0xa4>)
 80019d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80019d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_TIM1_Init+0xa4>)
 80019dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_TIM1_Init+0xa4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_TIM1_Init+0xa4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019ee:	4815      	ldr	r0, [pc, #84]	; (8001a44 <MX_TIM1_Init+0xa4>)
 80019f0:	f003 fe7c 	bl	80056ec <HAL_TIM_Base_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80019fa:	f7ff fdcb 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480e      	ldr	r0, [pc, #56]	; (8001a44 <MX_TIM1_Init+0xa4>)
 8001a0c:	f004 f85e 	bl	8005acc <HAL_TIM_ConfigClockSource>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a16:	f7ff fdbd 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_TIM1_Init+0xa4>)
 8001a2c:	f004 fa80 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001a36:	f7ff fdad 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002cc 	.word	0x200002cc
 8001a48:	40010000 	.word	0x40010000

08001a4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001a6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001a74:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001a78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001a82:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001a86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a94:	4813      	ldr	r0, [pc, #76]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001a96:	f003 fe29 	bl	80056ec <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001aa0:	f7ff fd78 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001ab2:	f004 f80b 	bl	8005acc <HAL_TIM_ConfigClockSource>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001abc:	f7ff fd6a 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_TIM2_Init+0x98>)
 8001ace:	f004 fa2f 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ad8:	f7ff fd5c 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000318 	.word	0x20000318

08001ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_TIM_Base_MspInit+0x78>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d114      	bne.n	8001b24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_TIM_Base_MspInit+0x7c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_TIM_Base_MspInit+0x7c>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_TIM_Base_MspInit+0x7c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	2019      	movs	r0, #25
 8001b18:	f001 f94f 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b1c:	2019      	movs	r0, #25
 8001b1e:	f001 f968 	bl	8002df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b22:	e018      	b.n	8001b56 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2c:	d113      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_TIM_Base_MspInit+0x7c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <HAL_TIM_Base_MspInit+0x7c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_TIM_Base_MspInit+0x7c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2102      	movs	r1, #2
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	f001 f935 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b50:	201c      	movs	r0, #28
 8001b52:	f001 f94e 	bl	8002df2 <HAL_NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40010000 	.word	0x40010000
 8001b64:	40023800 	.word	0x40023800

08001b68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001b6e:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <MX_USART3_UART_Init+0x5c>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_USART3_UART_Init+0x58>)
 8001bac:	f004 fa6c 	bl	8006088 <HAL_UART_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001bb6:	f7ff fced 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000364 	.word	0x20000364
 8001bc4:	40004800 	.word	0x40004800

08001bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_UART_MspInit+0x8c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d130      	bne.n	8001c4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_UART_MspInit+0x90>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_UART_MspInit+0x90>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_UART_MspInit+0x90>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_UART_MspInit+0x90>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <HAL_UART_MspInit+0x90>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_UART_MspInit+0x90>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4809      	ldr	r0, [pc, #36]	; (8001c5c <HAL_UART_MspInit+0x94>)
 8001c38:	f001 f988 	bl	8002f4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2027      	movs	r0, #39	; 0x27
 8001c42:	f001 f8ba 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c46:	2027      	movs	r0, #39	; 0x27
 8001c48:	f001 f8d3 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40004800 	.word	0x40004800
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020c00 	.word	0x40020c00

08001c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c66:	e003      	b.n	8001c70 <LoopCopyDataInit>

08001c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c6e:	3104      	adds	r1, #4

08001c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c78:	d3f6      	bcc.n	8001c68 <CopyDataInit>
  ldr  r2, =_sbss
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c7c:	e002      	b.n	8001c84 <LoopFillZerobss>

08001c7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c80:	f842 3b04 	str.w	r3, [r2], #4

08001c84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c88:	d3f9      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c8a:	f7ff fe53 	bl	8001934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f005 ffdd 	bl	8007c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c92:	f7fe ffab 	bl	8000bec <main>
  bx  lr    
 8001c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001c9c:	0800fe2c 	.word	0x0800fe2c
  ldr  r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ca4:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8001ca8:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001cac:	20000538 	.word	0x20000538

08001cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC_IRQHandler>

08001cb2 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001cb2:	b590      	push	{r4, r7, lr}
 8001cb4:	b08b      	sub	sp, #44	; 0x2c
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4604      	mov	r4, r0
 8001cba:	4608      	mov	r0, r1
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4623      	mov	r3, r4
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	80bb      	strh	r3, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	f1c3 0301 	rsb	r3, r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8001cea:	e061      	b.n	8001db0 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001cec:	88fa      	ldrh	r2, [r7, #6]
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e018      	b.n	8001d28 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	b298      	uxth	r0, r3
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	88bb      	ldrh	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	883a      	ldrh	r2, [r7, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	f000 fc80 	bl	800260c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	88ba      	ldrh	r2, [r7, #4]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	883a      	ldrh	r2, [r7, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f000 fc75 	bl	800260c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	3301      	adds	r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dde0      	ble.n	8001cf6 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e018      	b.n	8001d70 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	b298      	uxth	r0, r3
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	883a      	ldrh	r2, [r7, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f000 fc5c 	bl	800260c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	b298      	uxth	r0, r3
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	88ba      	ldrh	r2, [r7, #4]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	883a      	ldrh	r2, [r7, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f000 fc51 	bl	800260c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	88fa      	ldrh	r2, [r7, #6]
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	4413      	add	r3, r2
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dde0      	ble.n	8001d3e <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	4413      	add	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005a      	lsls	r2, r3, #1
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	dd09      	ble.n	8001db0 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4413      	add	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3302      	adds	r3, #2
 8001dae:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	da99      	bge.n	8001cec <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	372c      	adds	r7, #44	; 0x2c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}

08001dc2 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8001dc2:	b590      	push	{r4, r7, lr}
 8001dc4:	b089      	sub	sp, #36	; 0x24
 8001dc6:	af02      	add	r7, sp, #8
 8001dc8:	4604      	mov	r4, r0
 8001dca:	4608      	mov	r0, r1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4623      	mov	r3, r4
 8001dd2:	80fb      	strh	r3, [r7, #6]
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	80bb      	strh	r3, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8001dfc:	887a      	ldrh	r2, [r7, #2]
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da01      	bge.n	8001e0e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8001e12:	883a      	ldrh	r2, [r7, #0]
 8001e14:	88bb      	ldrh	r3, [r7, #4]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da01      	bge.n	8001e24 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8001e20:	2301      	movs	r3, #1
 8001e22:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8001e24:	7cfb      	ldrb	r3, [r7, #19]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	823b      	strh	r3, [r7, #16]
 8001e36:	e005      	b.n	8001e44 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8001e38:	88fa      	ldrh	r2, [r7, #6]
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8001e44:	7cbb      	ldrb	r3, [r7, #18]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8001e4a:	883a      	ldrh	r2, [r7, #0]
 8001e4c:	88bb      	ldrh	r3, [r7, #4]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8001e52:	88bb      	ldrh	r3, [r7, #4]
 8001e54:	81fb      	strh	r3, [r7, #14]
 8001e56:	e005      	b.n	8001e64 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8001e58:	88ba      	ldrh	r2, [r7, #4]
 8001e5a:	883b      	ldrh	r3, [r7, #0]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8001e60:	883b      	ldrh	r3, [r7, #0]
 8001e62:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8001e64:	8abc      	ldrh	r4, [r7, #20]
 8001e66:	8afa      	ldrh	r2, [r7, #22]
 8001e68:	89f9      	ldrh	r1, [r7, #14]
 8001e6a:	8a38      	ldrh	r0, [r7, #16]
 8001e6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4623      	mov	r3, r4
 8001e72:	f000 fca5 	bl	80027c0 <ILI9341_Draw_Rectangle>
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
	...

08001e80 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	4604      	mov	r4, r0
 8001e88:	4608      	mov	r0, r1
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4623      	mov	r3, r4
 8001e90:	71fb      	strb	r3, [r7, #7]
 8001e92:	4603      	mov	r3, r0
 8001e94:	80bb      	strh	r3, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	71bb      	strb	r3, [r7, #6]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b1f      	cmp	r3, #31
 8001ea6:	d802      	bhi.n	8001eae <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	e002      	b.n	8001eb4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	3b20      	subs	r3, #32
 8001eb2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	753b      	strb	r3, [r7, #20]
 8001eb8:	e012      	b.n	8001ee0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001eba:	7dfa      	ldrb	r2, [r7, #23]
 8001ebc:	7d38      	ldrb	r0, [r7, #20]
 8001ebe:	7d39      	ldrb	r1, [r7, #20]
 8001ec0:	4c3a      	ldr	r4, [pc, #232]	; (8001fac <ILI9341_Draw_Char+0x12c>)
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4423      	add	r3, r4
 8001ecc:	4403      	add	r3, r0
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	f101 0318 	add.w	r3, r1, #24
 8001ed4:	443b      	add	r3, r7
 8001ed6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001eda:	7d3b      	ldrb	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	753b      	strb	r3, [r7, #20]
 8001ee0:	7d3b      	ldrb	r3, [r7, #20]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d9e9      	bls.n	8001eba <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	b299      	uxth	r1, r3
 8001eea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001eec:	461a      	mov	r2, r3
 8001eee:	0052      	lsls	r2, r2, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	b29c      	uxth	r4, r3
 8001efc:	88b8      	ldrh	r0, [r7, #4]
 8001efe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4623      	mov	r3, r4
 8001f04:	f000 fc5c 	bl	80027c0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001f08:	2300      	movs	r3, #0
 8001f0a:	757b      	strb	r3, [r7, #21]
 8001f0c:	e045      	b.n	8001f9a <ILI9341_Draw_Char+0x11a>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75bb      	strb	r3, [r7, #22]
 8001f12:	e03c      	b.n	8001f8e <ILI9341_Draw_Char+0x10e>
            if (temp[j] & (1<<i)) {			
 8001f14:	7d7b      	ldrb	r3, [r7, #21]
 8001f16:	3318      	adds	r3, #24
 8001f18:	443b      	add	r3, r7
 8001f1a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	7dbb      	ldrb	r3, [r7, #22]
 8001f22:	fa42 f303 	asr.w	r3, r2, r3
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d02c      	beq.n	8001f88 <ILI9341_Draw_Char+0x108>
							if(Size == 1)
 8001f2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10f      	bne.n	8001f54 <ILI9341_Draw_Char+0xd4>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001f34:	7d7b      	ldrb	r3, [r7, #21]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b298      	uxth	r0, r3
 8001f3e:	79bb      	ldrb	r3, [r7, #6]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	7dbb      	ldrb	r3, [r7, #22]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f000 fb5d 	bl	800260c <ILI9341_Draw_Pixel>
 8001f52:	e019      	b.n	8001f88 <ILI9341_Draw_Char+0x108>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001f54:	7d7b      	ldrb	r3, [r7, #21]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f5a:	fb12 f303 	smulbb	r3, r2, r3
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	b298      	uxth	r0, r3
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	7dbb      	ldrb	r3, [r7, #22]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f70:	fb11 f303 	smulbb	r3, r1, r3
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	b299      	uxth	r1, r3
 8001f7a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001f7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	4623      	mov	r3, r4
 8001f84:	f000 fc1c 	bl	80027c0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001f88:	7dbb      	ldrb	r3, [r7, #22]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	75bb      	strb	r3, [r7, #22]
 8001f8e:	7dbb      	ldrb	r3, [r7, #22]
 8001f90:	2b07      	cmp	r3, #7
 8001f92:	d9bf      	bls.n	8001f14 <ILI9341_Draw_Char+0x94>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001f94:	7d7b      	ldrb	r3, [r7, #21]
 8001f96:	3301      	adds	r3, #1
 8001f98:	757b      	strb	r3, [r7, #21]
 8001f9a:	7d7b      	ldrb	r3, [r7, #21]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d9b6      	bls.n	8001f0e <ILI9341_Draw_Char+0x8e>
							}
            }						
        }
    }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd90      	pop	{r4, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	0800f868 	.word	0x0800f868

08001fb0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	817b      	strh	r3, [r7, #10]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	727b      	strb	r3, [r7, #9]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8001fca:	e016      	b.n	8001ffa <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	60fa      	str	r2, [r7, #12]
 8001fd2:	7818      	ldrb	r0, [r3, #0]
 8001fd4:	88fc      	ldrh	r4, [r7, #6]
 8001fd6:	7a7a      	ldrb	r2, [r7, #9]
 8001fd8:	8979      	ldrh	r1, [r7, #10]
 8001fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	8c3b      	ldrh	r3, [r7, #32]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	f7ff ff4c 	bl	8001e80 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001fe8:	8c3b      	ldrh	r3, [r7, #32]
 8001fea:	461a      	mov	r2, r3
 8001fec:	0052      	lsls	r2, r2, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	897b      	ldrh	r3, [r7, #10]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1e4      	bne.n	8001fcc <ILI9341_Draw_Text+0x1c>
    }
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}

0800200c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002010:	f7ff faf8 	bl	8001604 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002014:	f7fe fb98 	bl	8000748 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800201e:	4802      	ldr	r0, [pc, #8]	; (8002028 <ILI9341_SPI_Init+0x1c>)
 8002020:	f001 f958 	bl	80032d4 <HAL_GPIO_WritePin>
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40020800 	.word	0x40020800

0800202c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002036:	1df9      	adds	r1, r7, #7
 8002038:	2301      	movs	r3, #1
 800203a:	2201      	movs	r2, #1
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <ILI9341_SPI_Send+0x20>)
 800203e:	f003 f886 	bl	800514e <HAL_SPI_Transmit>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000264 	.word	0x20000264

08002050 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002060:	480b      	ldr	r0, [pc, #44]	; (8002090 <ILI9341_Write_Command+0x40>)
 8002062:	f001 f937 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206c:	4808      	ldr	r0, [pc, #32]	; (8002090 <ILI9341_Write_Command+0x40>)
 800206e:	f001 f931 	bl	80032d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ffd9 	bl	800202c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <ILI9341_Write_Command+0x40>)
 8002082:	f001 f927 	bl	80032d4 <HAL_GPIO_WritePin>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40020800 	.word	0x40020800

08002094 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <ILI9341_Write_Data+0x40>)
 80020a6:	f001 f915 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b0:	4808      	ldr	r0, [pc, #32]	; (80020d4 <ILI9341_Write_Data+0x40>)
 80020b2:	f001 f90f 	bl	80032d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ffb7 	bl	800202c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020be:	2201      	movs	r2, #1
 80020c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <ILI9341_Write_Data+0x40>)
 80020c6:	f001 f905 	bl	80032d4 <HAL_GPIO_WritePin>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40020800 	.word	0x40020800

080020d8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4604      	mov	r4, r0
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4623      	mov	r3, r4
 80020e8:	80fb      	strh	r3, [r7, #6]
 80020ea:	4603      	mov	r3, r0
 80020ec:	80bb      	strh	r3, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	807b      	strh	r3, [r7, #2]
 80020f2:	4613      	mov	r3, r2
 80020f4:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80020f6:	202a      	movs	r0, #42	; 0x2a
 80020f8:	f7ff ffaa 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	b29b      	uxth	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ffc5 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ffc0 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	b29b      	uxth	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ffb9 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ffb4 	bl	8002094 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800212c:	202b      	movs	r0, #43	; 0x2b
 800212e:	f7ff ff8f 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002132:	88bb      	ldrh	r3, [r7, #4]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	b29b      	uxth	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ffaa 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002140:	88bb      	ldrh	r3, [r7, #4]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ffa5 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800214a:	883b      	ldrh	r3, [r7, #0]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	b29b      	uxth	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff9e 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002158:	883b      	ldrh	r3, [r7, #0]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff99 	bl	8002094 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002162:	202c      	movs	r0, #44	; 0x2c
 8002164:	f7ff ff74 	bl	8002050 <ILI9341_Write_Command>
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}

08002170 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217a:	480b      	ldr	r0, [pc, #44]	; (80021a8 <ILI9341_Reset+0x38>)
 800217c:	f001 f8aa 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002180:	20c8      	movs	r0, #200	; 0xc8
 8002182:	f000 fd1b 	bl	8002bbc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218c:	4806      	ldr	r0, [pc, #24]	; (80021a8 <ILI9341_Reset+0x38>)
 800218e:	f001 f8a1 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002192:	20c8      	movs	r0, #200	; 0xc8
 8002194:	f000 fd12 	bl	8002bbc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002198:	2201      	movs	r2, #1
 800219a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219e:	4802      	ldr	r0, [pc, #8]	; (80021a8 <ILI9341_Reset+0x38>)
 80021a0:	f001 f898 	bl	80032d4 <HAL_GPIO_WritePin>
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40020800 	.word	0x40020800

080021ac <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80021ba:	2036      	movs	r0, #54	; 0x36
 80021bc:	f7ff ff48 	bl	8002050 <ILI9341_Write_Command>
HAL_Delay(1);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f000 fcfb 	bl	8002bbc <HAL_Delay>
	
switch(screen_rotation) 
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d837      	bhi.n	800223c <ILI9341_Set_Rotation+0x90>
 80021cc:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <ILI9341_Set_Rotation+0x28>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021fb 	.word	0x080021fb
 80021dc:	08002211 	.word	0x08002211
 80021e0:	08002227 	.word	0x08002227
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80021e4:	2048      	movs	r0, #72	; 0x48
 80021e6:	f7ff ff55 	bl	8002094 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <ILI9341_Set_Rotation+0x9c>)
 80021ec:	22f0      	movs	r2, #240	; 0xf0
 80021ee:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <ILI9341_Set_Rotation+0xa0>)
 80021f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021f6:	801a      	strh	r2, [r3, #0]
			break;
 80021f8:	e021      	b.n	800223e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80021fa:	2028      	movs	r0, #40	; 0x28
 80021fc:	f7ff ff4a 	bl	8002094 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <ILI9341_Set_Rotation+0x9c>)
 8002202:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002206:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <ILI9341_Set_Rotation+0xa0>)
 800220a:	22f0      	movs	r2, #240	; 0xf0
 800220c:	801a      	strh	r2, [r3, #0]
			break;
 800220e:	e016      	b.n	800223e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002210:	2088      	movs	r0, #136	; 0x88
 8002212:	f7ff ff3f 	bl	8002094 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <ILI9341_Set_Rotation+0x9c>)
 8002218:	22f0      	movs	r2, #240	; 0xf0
 800221a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <ILI9341_Set_Rotation+0xa0>)
 800221e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002222:	801a      	strh	r2, [r3, #0]
			break;
 8002224:	e00b      	b.n	800223e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002226:	20e8      	movs	r0, #232	; 0xe8
 8002228:	f7ff ff34 	bl	8002094 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <ILI9341_Set_Rotation+0x9c>)
 800222e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002232:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <ILI9341_Set_Rotation+0xa0>)
 8002236:	22f0      	movs	r2, #240	; 0xf0
 8002238:	801a      	strh	r2, [r3, #0]
			break;
 800223a:	e000      	b.n	800223e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800223c:	bf00      	nop
	}
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000006 	.word	0x20000006
 800224c:	20000004 	.word	0x20000004

08002250 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002254:	2201      	movs	r2, #1
 8002256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800225a:	4802      	ldr	r0, [pc, #8]	; (8002264 <ILI9341_Enable+0x14>)
 800225c:	f001 f83a 	bl	80032d4 <HAL_GPIO_WritePin>
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40020800 	.word	0x40020800

08002268 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800226c:	f7ff fff0 	bl	8002250 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002270:	f7ff fecc 	bl	800200c <ILI9341_SPI_Init>
ILI9341_Reset();
 8002274:	f7ff ff7c 	bl	8002170 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fee9 	bl	8002050 <ILI9341_Write_Command>
HAL_Delay(1000);
 800227e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002282:	f000 fc9b 	bl	8002bbc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002286:	20cb      	movs	r0, #203	; 0xcb
 8002288:	f7ff fee2 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800228c:	2039      	movs	r0, #57	; 0x39
 800228e:	f7ff ff01 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002292:	202c      	movs	r0, #44	; 0x2c
 8002294:	f7ff fefe 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff fefb 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800229e:	2034      	movs	r0, #52	; 0x34
 80022a0:	f7ff fef8 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80022a4:	2002      	movs	r0, #2
 80022a6:	f7ff fef5 	bl	8002094 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80022aa:	20cf      	movs	r0, #207	; 0xcf
 80022ac:	f7ff fed0 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff feef 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80022b6:	20c1      	movs	r0, #193	; 0xc1
 80022b8:	f7ff feec 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80022bc:	2030      	movs	r0, #48	; 0x30
 80022be:	f7ff fee9 	bl	8002094 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80022c2:	20e8      	movs	r0, #232	; 0xe8
 80022c4:	f7ff fec4 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80022c8:	2085      	movs	r0, #133	; 0x85
 80022ca:	f7ff fee3 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fee0 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80022d4:	2078      	movs	r0, #120	; 0x78
 80022d6:	f7ff fedd 	bl	8002094 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80022da:	20ea      	movs	r0, #234	; 0xea
 80022dc:	f7ff feb8 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7ff fed7 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f7ff fed4 	bl	8002094 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80022ec:	20ed      	movs	r0, #237	; 0xed
 80022ee:	f7ff feaf 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80022f2:	2064      	movs	r0, #100	; 0x64
 80022f4:	f7ff fece 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80022f8:	2003      	movs	r0, #3
 80022fa:	f7ff fecb 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80022fe:	2012      	movs	r0, #18
 8002300:	f7ff fec8 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002304:	2081      	movs	r0, #129	; 0x81
 8002306:	f7ff fec5 	bl	8002094 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800230a:	20f7      	movs	r0, #247	; 0xf7
 800230c:	f7ff fea0 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002310:	2020      	movs	r0, #32
 8002312:	f7ff febf 	bl	8002094 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002316:	20c0      	movs	r0, #192	; 0xc0
 8002318:	f7ff fe9a 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800231c:	2023      	movs	r0, #35	; 0x23
 800231e:	f7ff feb9 	bl	8002094 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002322:	20c1      	movs	r0, #193	; 0xc1
 8002324:	f7ff fe94 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002328:	2010      	movs	r0, #16
 800232a:	f7ff feb3 	bl	8002094 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800232e:	20c5      	movs	r0, #197	; 0xc5
 8002330:	f7ff fe8e 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002334:	203e      	movs	r0, #62	; 0x3e
 8002336:	f7ff fead 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800233a:	2028      	movs	r0, #40	; 0x28
 800233c:	f7ff feaa 	bl	8002094 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002340:	20c7      	movs	r0, #199	; 0xc7
 8002342:	f7ff fe85 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002346:	2086      	movs	r0, #134	; 0x86
 8002348:	f7ff fea4 	bl	8002094 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800234c:	2036      	movs	r0, #54	; 0x36
 800234e:	f7ff fe7f 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002352:	2048      	movs	r0, #72	; 0x48
 8002354:	f7ff fe9e 	bl	8002094 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002358:	203a      	movs	r0, #58	; 0x3a
 800235a:	f7ff fe79 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800235e:	2055      	movs	r0, #85	; 0x55
 8002360:	f7ff fe98 	bl	8002094 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002364:	20b1      	movs	r0, #177	; 0xb1
 8002366:	f7ff fe73 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f7ff fe92 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002370:	2018      	movs	r0, #24
 8002372:	f7ff fe8f 	bl	8002094 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002376:	20b6      	movs	r0, #182	; 0xb6
 8002378:	f7ff fe6a 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800237c:	2008      	movs	r0, #8
 800237e:	f7ff fe89 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002382:	2082      	movs	r0, #130	; 0x82
 8002384:	f7ff fe86 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002388:	2027      	movs	r0, #39	; 0x27
 800238a:	f7ff fe83 	bl	8002094 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800238e:	20f2      	movs	r0, #242	; 0xf2
 8002390:	f7ff fe5e 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff fe7d 	bl	8002094 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800239a:	2026      	movs	r0, #38	; 0x26
 800239c:	f7ff fe58 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7ff fe77 	bl	8002094 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80023a6:	20e0      	movs	r0, #224	; 0xe0
 80023a8:	f7ff fe52 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80023ac:	200f      	movs	r0, #15
 80023ae:	f7ff fe71 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80023b2:	2031      	movs	r0, #49	; 0x31
 80023b4:	f7ff fe6e 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80023b8:	202b      	movs	r0, #43	; 0x2b
 80023ba:	f7ff fe6b 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80023be:	200c      	movs	r0, #12
 80023c0:	f7ff fe68 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80023c4:	200e      	movs	r0, #14
 80023c6:	f7ff fe65 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80023ca:	2008      	movs	r0, #8
 80023cc:	f7ff fe62 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80023d0:	204e      	movs	r0, #78	; 0x4e
 80023d2:	f7ff fe5f 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80023d6:	20f1      	movs	r0, #241	; 0xf1
 80023d8:	f7ff fe5c 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80023dc:	2037      	movs	r0, #55	; 0x37
 80023de:	f7ff fe59 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80023e2:	2007      	movs	r0, #7
 80023e4:	f7ff fe56 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80023e8:	2010      	movs	r0, #16
 80023ea:	f7ff fe53 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80023ee:	2003      	movs	r0, #3
 80023f0:	f7ff fe50 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80023f4:	200e      	movs	r0, #14
 80023f6:	f7ff fe4d 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80023fa:	2009      	movs	r0, #9
 80023fc:	f7ff fe4a 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff fe47 	bl	8002094 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002406:	20e1      	movs	r0, #225	; 0xe1
 8002408:	f7ff fe22 	bl	8002050 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff fe41 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002412:	200e      	movs	r0, #14
 8002414:	f7ff fe3e 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002418:	2014      	movs	r0, #20
 800241a:	f7ff fe3b 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800241e:	2003      	movs	r0, #3
 8002420:	f7ff fe38 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002424:	2011      	movs	r0, #17
 8002426:	f7ff fe35 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800242a:	2007      	movs	r0, #7
 800242c:	f7ff fe32 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002430:	2031      	movs	r0, #49	; 0x31
 8002432:	f7ff fe2f 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002436:	20c1      	movs	r0, #193	; 0xc1
 8002438:	f7ff fe2c 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800243c:	2048      	movs	r0, #72	; 0x48
 800243e:	f7ff fe29 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002442:	2008      	movs	r0, #8
 8002444:	f7ff fe26 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002448:	200f      	movs	r0, #15
 800244a:	f7ff fe23 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800244e:	200c      	movs	r0, #12
 8002450:	f7ff fe20 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002454:	2031      	movs	r0, #49	; 0x31
 8002456:	f7ff fe1d 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800245a:	2036      	movs	r0, #54	; 0x36
 800245c:	f7ff fe1a 	bl	8002094 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002460:	200f      	movs	r0, #15
 8002462:	f7ff fe17 	bl	8002094 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002466:	2011      	movs	r0, #17
 8002468:	f7ff fdf2 	bl	8002050 <ILI9341_Write_Command>
HAL_Delay(120);
 800246c:	2078      	movs	r0, #120	; 0x78
 800246e:	f000 fba5 	bl	8002bbc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002472:	2029      	movs	r0, #41	; 0x29
 8002474:	f7ff fdec 	bl	8002050 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff fe97 	bl	80021ac <ILI9341_Set_Rotation>
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002488:	b08d      	sub	sp, #52	; 0x34
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	6039      	str	r1, [r7, #0]
 8002490:	80fb      	strh	r3, [r7, #6]
 8002492:	466b      	mov	r3, sp
 8002494:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024a2:	d202      	bcs.n	80024aa <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a8:	e002      	b.n	80024b0 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80024aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b6:	4840      	ldr	r0, [pc, #256]	; (80025b8 <ILI9341_Draw_Colour_Burst+0x134>)
 80024b8:	f000 ff0c 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c2:	483d      	ldr	r0, [pc, #244]	; (80025b8 <ILI9341_Draw_Colour_Burst+0x134>)
 80024c4:	f000 ff06 	bl	80032d4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80024d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024d4:	460b      	mov	r3, r1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	2300      	movs	r3, #0
 80024dc:	4688      	mov	r8, r1
 80024de:	4699      	mov	r9, r3
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f4:	2300      	movs	r3, #0
 80024f6:	460c      	mov	r4, r1
 80024f8:	461d      	mov	r5, r3
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	00eb      	lsls	r3, r5, #3
 8002504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002508:	00e2      	lsls	r2, r4, #3
 800250a:	1dcb      	adds	r3, r1, #7
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	ebad 0d03 	sub.w	sp, sp, r3
 8002514:	466b      	mov	r3, sp
 8002516:	3300      	adds	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
 800251e:	e00e      	b.n	800253e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	4413      	add	r3, r2
 8002526:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800252a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	3301      	adds	r3, #1
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	b2d1      	uxtb	r1, r2
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	3302      	adds	r3, #2
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
 800253e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	429a      	cmp	r2, r3
 8002544:	d3ec      	bcc.n	8002520 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255a:	fbb3 f2f2 	udiv	r2, r3, r2
 800255e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002560:	fb01 f202 	mul.w	r2, r1, r2
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	e009      	b.n	8002588 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	b29a      	uxth	r2, r3
 8002578:	230a      	movs	r3, #10
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	480f      	ldr	r0, [pc, #60]	; (80025bc <ILI9341_Draw_Colour_Burst+0x138>)
 800257e:	f002 fde6 	bl	800514e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	3301      	adds	r3, #1
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3f1      	bcc.n	8002574 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	b29a      	uxth	r2, r3
 8002594:	230a      	movs	r3, #10
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	4808      	ldr	r0, [pc, #32]	; (80025bc <ILI9341_Draw_Colour_Burst+0x138>)
 800259a:	f002 fdd8 	bl	800514e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800259e:	2201      	movs	r2, #1
 80025a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a4:	4804      	ldr	r0, [pc, #16]	; (80025b8 <ILI9341_Draw_Colour_Burst+0x134>)
 80025a6:	f000 fe95 	bl	80032d4 <HAL_GPIO_WritePin>
 80025aa:	46b5      	mov	sp, r6
}
 80025ac:	bf00      	nop
 80025ae:	3734      	adds	r7, #52	; 0x34
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025b6:	bf00      	nop
 80025b8:	40020800 	.word	0x40020800
 80025bc:	20000264 	.word	0x20000264

080025c0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <ILI9341_Fill_Screen+0x44>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <ILI9341_Fill_Screen+0x48>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff fd7d 	bl	80020d8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <ILI9341_Fill_Screen+0x44>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <ILI9341_Fill_Screen+0x48>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	fb02 f303 	mul.w	r3, r2, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff44 	bl	8002484 <ILI9341_Draw_Colour_Burst>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000006 	.word	0x20000006
 8002608:	20000004 	.word	0x20000004

0800260c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	80fb      	strh	r3, [r7, #6]
 8002616:	460b      	mov	r3, r1
 8002618:	80bb      	strh	r3, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800261e:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <ILI9341_Draw_Pixel+0x1a4>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	429a      	cmp	r2, r3
 8002628:	f080 80be 	bcs.w	80027a8 <ILI9341_Draw_Pixel+0x19c>
 800262c:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <ILI9341_Draw_Pixel+0x1a8>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	88ba      	ldrh	r2, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	f080 80b7 	bcs.w	80027a8 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800263a:	2200      	movs	r2, #0
 800263c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002640:	485d      	ldr	r0, [pc, #372]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 8002642:	f000 fe47 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002646:	2200      	movs	r2, #0
 8002648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264c:	485a      	ldr	r0, [pc, #360]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 800264e:	f000 fe41 	bl	80032d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002652:	202a      	movs	r0, #42	; 0x2a
 8002654:	f7ff fcea 	bl	800202c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265e:	4856      	ldr	r0, [pc, #344]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 8002660:	f000 fe38 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266a:	4853      	ldr	r0, [pc, #332]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 800266c:	f000 fe32 	bl	80032d4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002670:	2200      	movs	r2, #0
 8002672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002676:	4850      	ldr	r0, [pc, #320]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 8002678:	f000 fe2c 	bl	80032d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	b29b      	uxth	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	753b      	strb	r3, [r7, #20]
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	757b      	strb	r3, [r7, #21]
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	3301      	adds	r3, #1
 8002690:	121b      	asrs	r3, r3, #8
 8002692:	b2db      	uxtb	r3, r3
 8002694:	75bb      	strb	r3, [r7, #22]
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80026a0:	f107 0114 	add.w	r1, r7, #20
 80026a4:	2301      	movs	r3, #1
 80026a6:	2204      	movs	r2, #4
 80026a8:	4844      	ldr	r0, [pc, #272]	; (80027bc <ILI9341_Draw_Pixel+0x1b0>)
 80026aa:	f002 fd50 	bl	800514e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b4:	4840      	ldr	r0, [pc, #256]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 80026b6:	f000 fe0d 	bl	80032d4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c0:	483d      	ldr	r0, [pc, #244]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 80026c2:	f000 fe07 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026cc:	483a      	ldr	r0, [pc, #232]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 80026ce:	f000 fe01 	bl	80032d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80026d2:	202b      	movs	r0, #43	; 0x2b
 80026d4:	f7ff fcaa 	bl	800202c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026de:	4836      	ldr	r0, [pc, #216]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 80026e0:	f000 fdf8 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80026e4:	2201      	movs	r2, #1
 80026e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ea:	4833      	ldr	r0, [pc, #204]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 80026ec:	f000 fdf2 	bl	80032d4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f6:	4830      	ldr	r0, [pc, #192]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 80026f8:	f000 fdec 	bl	80032d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80026fc:	88bb      	ldrh	r3, [r7, #4]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	b29b      	uxth	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	743b      	strb	r3, [r7, #16]
 8002706:	88bb      	ldrh	r3, [r7, #4]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	747b      	strb	r3, [r7, #17]
 800270c:	88bb      	ldrh	r3, [r7, #4]
 800270e:	3301      	adds	r3, #1
 8002710:	121b      	asrs	r3, r3, #8
 8002712:	b2db      	uxtb	r3, r3
 8002714:	74bb      	strb	r3, [r7, #18]
 8002716:	88bb      	ldrh	r3, [r7, #4]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3301      	adds	r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002720:	f107 0110 	add.w	r1, r7, #16
 8002724:	2301      	movs	r3, #1
 8002726:	2204      	movs	r2, #4
 8002728:	4824      	ldr	r0, [pc, #144]	; (80027bc <ILI9341_Draw_Pixel+0x1b0>)
 800272a:	f002 fd10 	bl	800514e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800272e:	2201      	movs	r2, #1
 8002730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002734:	4820      	ldr	r0, [pc, #128]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 8002736:	f000 fdcd 	bl	80032d4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800273a:	2200      	movs	r2, #0
 800273c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002740:	481d      	ldr	r0, [pc, #116]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 8002742:	f000 fdc7 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800274c:	481a      	ldr	r0, [pc, #104]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 800274e:	f000 fdc1 	bl	80032d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002752:	202c      	movs	r0, #44	; 0x2c
 8002754:	f7ff fc6a 	bl	800202c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002758:	2201      	movs	r2, #1
 800275a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800275e:	4816      	ldr	r0, [pc, #88]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 8002760:	f000 fdb8 	bl	80032d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002764:	2201      	movs	r2, #1
 8002766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800276a:	4813      	ldr	r0, [pc, #76]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 800276c:	f000 fdb2 	bl	80032d4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002776:	4810      	ldr	r0, [pc, #64]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 8002778:	f000 fdac 	bl	80032d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	b29b      	uxth	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	733b      	strb	r3, [r7, #12]
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800278c:	f107 010c 	add.w	r1, r7, #12
 8002790:	2301      	movs	r3, #1
 8002792:	2202      	movs	r2, #2
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <ILI9341_Draw_Pixel+0x1b0>)
 8002796:	f002 fcda 	bl	800514e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800279a:	2201      	movs	r2, #1
 800279c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027a0:	4805      	ldr	r0, [pc, #20]	; (80027b8 <ILI9341_Draw_Pixel+0x1ac>)
 80027a2:	f000 fd97 	bl	80032d4 <HAL_GPIO_WritePin>
 80027a6:	e000      	b.n	80027aa <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80027a8:	bf00      	nop
	
}
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000006 	.word	0x20000006
 80027b4:	20000004 	.word	0x20000004
 80027b8:	40020800 	.word	0x40020800
 80027bc:	20000264 	.word	0x20000264

080027c0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4604      	mov	r4, r0
 80027c8:	4608      	mov	r0, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4623      	mov	r3, r4
 80027d0:	80fb      	strh	r3, [r7, #6]
 80027d2:	4603      	mov	r3, r0
 80027d4:	80bb      	strh	r3, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	807b      	strh	r3, [r7, #2]
 80027da:	4613      	mov	r3, r2
 80027dc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <ILI9341_Draw_Rectangle+0xb0>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d23d      	bcs.n	8002866 <ILI9341_Draw_Rectangle+0xa6>
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <ILI9341_Draw_Rectangle+0xb4>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	88ba      	ldrh	r2, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d237      	bcs.n	8002866 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <ILI9341_Draw_Rectangle+0xb0>)
 80027fe:	8812      	ldrh	r2, [r2, #0]
 8002800:	b292      	uxth	r2, r2
 8002802:	4293      	cmp	r3, r2
 8002804:	dd05      	ble.n	8002812 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <ILI9341_Draw_Rectangle+0xb0>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29a      	uxth	r2, r3
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002812:	88ba      	ldrh	r2, [r7, #4]
 8002814:	883b      	ldrh	r3, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	4a16      	ldr	r2, [pc, #88]	; (8002874 <ILI9341_Draw_Rectangle+0xb4>)
 800281a:	8812      	ldrh	r2, [r2, #0]
 800281c:	b292      	uxth	r2, r2
 800281e:	4293      	cmp	r3, r2
 8002820:	dd05      	ble.n	800282e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <ILI9341_Draw_Rectangle+0xb4>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29a      	uxth	r2, r3
 8002828:	88bb      	ldrh	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	4413      	add	r3, r2
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29c      	uxth	r4, r3
 800283a:	88ba      	ldrh	r2, [r7, #4]
 800283c:	883b      	ldrh	r3, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29b      	uxth	r3, r3
 8002846:	88b9      	ldrh	r1, [r7, #4]
 8002848:	88f8      	ldrh	r0, [r7, #6]
 800284a:	4622      	mov	r2, r4
 800284c:	f7ff fc44 	bl	80020d8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002850:	883b      	ldrh	r3, [r7, #0]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	461a      	mov	r2, r3
 800285a:	8b3b      	ldrh	r3, [r7, #24]
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fe10 	bl	8002484 <ILI9341_Draw_Colour_Burst>
 8002864:	e000      	b.n	8002868 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002866:	bf00      	nop
}
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop
 8002870:	20000006 	.word	0x20000006
 8002874:	20000004 	.word	0x20000004

08002878 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800287e:	2310      	movs	r3, #16
 8002880:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002886:	e019      	b.n	80028bc <TP_Read+0x44>
    {
        value <<= 1;
 8002888:	88bb      	ldrh	r3, [r7, #4]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800288e:	2201      	movs	r2, #1
 8002890:	2108      	movs	r1, #8
 8002892:	480e      	ldr	r0, [pc, #56]	; (80028cc <TP_Read+0x54>)
 8002894:	f000 fd1e 	bl	80032d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	2108      	movs	r1, #8
 800289c:	480b      	ldr	r0, [pc, #44]	; (80028cc <TP_Read+0x54>)
 800289e:	f000 fd19 	bl	80032d4 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80028a2:	2110      	movs	r1, #16
 80028a4:	4809      	ldr	r0, [pc, #36]	; (80028cc <TP_Read+0x54>)
 80028a6:	f000 fcfd 	bl	80032a4 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <TP_Read+0x3e>
        {
            value++;
 80028b0:	88bb      	ldrh	r3, [r7, #4]
 80028b2:	3301      	adds	r3, #1
 80028b4:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1e2      	bne.n	8002888 <TP_Read+0x10>
    };

    return value;
 80028c2:	88bb      	ldrh	r3, [r7, #4]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000

080028d0 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80028da:	2308      	movs	r3, #8
 80028dc:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80028de:	2200      	movs	r2, #0
 80028e0:	2108      	movs	r1, #8
 80028e2:	4815      	ldr	r0, [pc, #84]	; (8002938 <TP_Write+0x68>)
 80028e4:	f000 fcf6 	bl	80032d4 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80028e8:	e01e      	b.n	8002928 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	da05      	bge.n	80028fe <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80028f2:	2201      	movs	r2, #1
 80028f4:	2120      	movs	r1, #32
 80028f6:	4810      	ldr	r0, [pc, #64]	; (8002938 <TP_Write+0x68>)
 80028f8:	f000 fcec 	bl	80032d4 <HAL_GPIO_WritePin>
 80028fc:	e004      	b.n	8002908 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	2120      	movs	r1, #32
 8002902:	480d      	ldr	r0, [pc, #52]	; (8002938 <TP_Write+0x68>)
 8002904:	f000 fce6 	bl	80032d4 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800290e:	2201      	movs	r2, #1
 8002910:	2108      	movs	r1, #8
 8002912:	4809      	ldr	r0, [pc, #36]	; (8002938 <TP_Write+0x68>)
 8002914:	f000 fcde 	bl	80032d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002918:	2200      	movs	r2, #0
 800291a:	2108      	movs	r1, #8
 800291c:	4806      	ldr	r0, [pc, #24]	; (8002938 <TP_Write+0x68>)
 800291e:	f000 fcd9 	bl	80032d4 <HAL_GPIO_WritePin>
        i--;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	3b01      	subs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1dd      	bne.n	80028ea <TP_Write+0x1a>
    };
}
 800292e:	bf00      	nop
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	00000000 	.word	0x00000000

08002940 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002948:	2201      	movs	r2, #1
 800294a:	2108      	movs	r1, #8
 800294c:	485a      	ldr	r0, [pc, #360]	; (8002ab8 <TP_Read_Coordinates+0x178>)
 800294e:	f000 fcc1 	bl	80032d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002952:	2201      	movs	r2, #1
 8002954:	2120      	movs	r1, #32
 8002956:	4858      	ldr	r0, [pc, #352]	; (8002ab8 <TP_Read_Coordinates+0x178>)
 8002958:	f000 fcbc 	bl	80032d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 800295c:	2201      	movs	r2, #1
 800295e:	2140      	movs	r1, #64	; 0x40
 8002960:	4855      	ldr	r0, [pc, #340]	; (8002ab8 <TP_Read_Coordinates+0x178>)
 8002962:	f000 fcb7 	bl	80032d4 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 800296a:	2300      	movs	r3, #0
 800296c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002976:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800297c:	2200      	movs	r2, #0
 800297e:	2140      	movs	r1, #64	; 0x40
 8002980:	484d      	ldr	r0, [pc, #308]	; (8002ab8 <TP_Read_Coordinates+0x178>)
 8002982:	f000 fca7 	bl	80032d4 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002986:	e023      	b.n	80029d0 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002988:	2090      	movs	r0, #144	; 0x90
 800298a:	f7ff ffa1 	bl	80028d0 <TP_Write>

				rawy = TP_Read();	
 800298e:	f7ff ff73 	bl	8002878 <TP_Read>
 8002992:	4603      	mov	r3, r0
 8002994:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	4413      	add	r3, r2
 800299c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 800299e:	89fb      	ldrh	r3, [r7, #14]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80029a6:	20d0      	movs	r0, #208	; 0xd0
 80029a8:	f7ff ff92 	bl	80028d0 <TP_Write>
        rawx = TP_Read();
 80029ac:	f7ff ff64 	bl	8002878 <TP_Read>
 80029b0:	4603      	mov	r3, r0
 80029b2:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80029b4:	89bb      	ldrh	r3, [r7, #12]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	4413      	add	r3, r2
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80029bc:	89bb      	ldrh	r3, [r7, #12]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]
        samples--;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	3301      	adds	r3, #1
 80029ce:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <TP_Read_Coordinates+0xa4>
 80029d6:	2104      	movs	r1, #4
 80029d8:	4837      	ldr	r0, [pc, #220]	; (8002ab8 <TP_Read_Coordinates+0x178>)
 80029da:	f000 fc63 	bl	80032a4 <HAL_GPIO_ReadPin>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0d1      	beq.n	8002988 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80029e4:	2201      	movs	r2, #1
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	4833      	ldr	r0, [pc, #204]	; (8002ab8 <TP_Read_Coordinates+0x178>)
 80029ea:	f000 fc73 	bl	80032d4 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029f4:	d14d      	bne.n	8002a92 <TP_Read_Coordinates+0x152>
 80029f6:	2104      	movs	r1, #4
 80029f8:	482f      	ldr	r0, [pc, #188]	; (8002ab8 <TP_Read_Coordinates+0x178>)
 80029fa:	f000 fc53 	bl	80032a4 <HAL_GPIO_ReadPin>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d146      	bne.n	8002a92 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002a20:	89bb      	ldrh	r3, [r7, #12]
 8002a22:	425b      	negs	r3, r3
 8002a24:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	425b      	negs	r3, r3
 8002a2a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002a2c:	89ba      	ldrh	r2, [r7, #12]
 8002a2e:	4b23      	ldr	r3, [pc, #140]	; (8002abc <TP_Read_Coordinates+0x17c>)
 8002a30:	fba3 1302 	umull	r1, r3, r3, r2
 8002a34:	1ad2      	subs	r2, r2, r3
 8002a36:	0852      	lsrs	r2, r2, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a4a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002ab0 <TP_Read_Coordinates+0x170>
 8002a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a56:	ee17 3a90 	vmov	r3, s15
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <TP_Read_Coordinates+0x180>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	09db      	lsrs	r3, r3, #7
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b0f      	subs	r3, #15
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a76:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002ab0 <TP_Read_Coordinates+0x170>
 8002a7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3302      	adds	r3, #2
 8002a82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a86:	ee17 2a90 	vmov	r2, s15
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e007      	b.n	8002aa2 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002aa0:	2300      	movs	r3, #0
		}
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	f3af 8000 	nop.w
 8002ab0:	28f5c28f 	.word	0x28f5c28f
 8002ab4:	3ff28f5c 	.word	0x3ff28f5c
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	e01e01e1 	.word	0xe01e01e1
 8002ac0:	a0a0a0a1 	.word	0xa0a0a0a1

08002ac4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002ac8:	2104      	movs	r1, #4
 8002aca:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <TP_Touchpad_Pressed+0x1c>)
 8002acc:	f000 fbea 	bl	80032a4 <HAL_GPIO_ReadPin>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002ada:	2300      	movs	r3, #0
	}
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_Init+0x34>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_Init+0x34>)
 8002aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_Init+0x34>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <HAL_Init+0x34>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b00:	2003      	movs	r0, #3
 8002b02:	f000 f94f 	bl	8002da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 f808 	bl	8002b1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b0c:	f7fe fdfc 	bl	8001708 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00

08002b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_InitTick+0x54>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x58>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f967 	bl	8002e0e <HAL_SYSTICK_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00e      	b.n	8002b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d80a      	bhi.n	8002b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b50:	2200      	movs	r2, #0
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f000 f92f 	bl	8002dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b5c:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <HAL_InitTick+0x5c>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000000 	.word	0x20000000
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	20000008 	.word	0x20000008

08002b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_IncTick+0x20>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000000c 	.word	0x2000000c
 8002ba0:	200003e8 	.word	0x200003e8

08002ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_GetTick+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	200003e8 	.word	0x200003e8

08002bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7ff ffee 	bl	8002ba4 <HAL_GetTick>
 8002bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d005      	beq.n	8002be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_Delay+0x44>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002be2:	bf00      	nop
 8002be4:	f7ff ffde 	bl	8002ba4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d8f7      	bhi.n	8002be4 <HAL_Delay+0x28>
  {
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000000c 	.word	0x2000000c

08002c04 <__NVIC_SetPriorityGrouping>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <__NVIC_SetPriorityGrouping+0x40>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <__NVIC_SetPriorityGrouping+0x40>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00
 8002c48:	05fa0000 	.word	0x05fa0000

08002c4c <__NVIC_GetPriorityGrouping>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <__NVIC_GetPriorityGrouping+0x18>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	f003 0307 	and.w	r3, r3, #7
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_EnableIRQ>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db0b      	blt.n	8002c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4907      	ldr	r1, [pc, #28]	; (8002ca0 <__NVIC_EnableIRQ+0x38>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	3b04      	subs	r3, #4
 8002cdc:	0112      	lsls	r2, r2, #4
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	bf28      	it	cs
 8002d16:	2304      	movcs	r3, #4
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b03      	subs	r3, #3
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d40:	f04f 31ff 	mov.w	r1, #4294967295
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	4313      	orrs	r3, r2
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d70:	d301      	bcc.n	8002d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00f      	b.n	8002d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <SysTick_Config+0x40>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7e:	210f      	movs	r1, #15
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f7ff ff8e 	bl	8002ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <SysTick_Config+0x40>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <SysTick_Config+0x40>)
 8002d90:	2207      	movs	r2, #7
 8002d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	e000e010 	.word	0xe000e010

08002da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff29 	bl	8002c04 <__NVIC_SetPriorityGrouping>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dcc:	f7ff ff3e 	bl	8002c4c <__NVIC_GetPriorityGrouping>
 8002dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7ff ff8e 	bl	8002cf8 <NVIC_EncodePriority>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff5d 	bl	8002ca4 <__NVIC_SetPriority>
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff31 	bl	8002c68 <__NVIC_EnableIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ffa2 	bl	8002d60 <SysTick_Config>
 8002e1c:	4603      	mov	r3, r0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e34:	f7ff feb6 	bl	8002ba4 <HAL_GetTick>
 8002e38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d008      	beq.n	8002e58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e052      	b.n	8002efe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0216 	bic.w	r2, r2, #22
 8002e66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <HAL_DMA_Abort+0x62>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0208 	bic.w	r2, r2, #8
 8002e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea8:	e013      	b.n	8002ed2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eaa:	f7ff fe7b 	bl	8002ba4 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d90c      	bls.n	8002ed2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e015      	b.n	8002efe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e4      	bne.n	8002eaa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	223f      	movs	r2, #63	; 0x3f
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d004      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e00c      	b.n	8002f3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2205      	movs	r2, #5
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e175      	b.n	8003258 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8164 	bne.w	8003252 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d00b      	beq.n	8002faa <HAL_GPIO_Init+0x5e>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f9e:	2b11      	cmp	r3, #17
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b12      	cmp	r3, #18
 8002fa8:	d130      	bne.n	800300c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 0201 	and.w	r2, r3, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x100>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b12      	cmp	r3, #18
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80be 	beq.w	8003252 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_GPIO_Init+0x324>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a65      	ldr	r2, [pc, #404]	; (8003270 <HAL_GPIO_Init+0x324>)
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_GPIO_Init+0x324>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030ee:	4a61      	ldr	r2, [pc, #388]	; (8003274 <HAL_GPIO_Init+0x328>)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a58      	ldr	r2, [pc, #352]	; (8003278 <HAL_GPIO_Init+0x32c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d037      	beq.n	800318a <HAL_GPIO_Init+0x23e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a57      	ldr	r2, [pc, #348]	; (800327c <HAL_GPIO_Init+0x330>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_GPIO_Init+0x23a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a56      	ldr	r2, [pc, #344]	; (8003280 <HAL_GPIO_Init+0x334>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02b      	beq.n	8003182 <HAL_GPIO_Init+0x236>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a55      	ldr	r2, [pc, #340]	; (8003284 <HAL_GPIO_Init+0x338>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d025      	beq.n	800317e <HAL_GPIO_Init+0x232>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a54      	ldr	r2, [pc, #336]	; (8003288 <HAL_GPIO_Init+0x33c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01f      	beq.n	800317a <HAL_GPIO_Init+0x22e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a53      	ldr	r2, [pc, #332]	; (800328c <HAL_GPIO_Init+0x340>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d019      	beq.n	8003176 <HAL_GPIO_Init+0x22a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_GPIO_Init+0x344>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_Init+0x226>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a51      	ldr	r2, [pc, #324]	; (8003294 <HAL_GPIO_Init+0x348>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_Init+0x222>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a50      	ldr	r2, [pc, #320]	; (8003298 <HAL_GPIO_Init+0x34c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_Init+0x21e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4f      	ldr	r2, [pc, #316]	; (800329c <HAL_GPIO_Init+0x350>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_Init+0x21a>
 8003162:	2309      	movs	r3, #9
 8003164:	e012      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003166:	230a      	movs	r3, #10
 8003168:	e010      	b.n	800318c <HAL_GPIO_Init+0x240>
 800316a:	2308      	movs	r3, #8
 800316c:	e00e      	b.n	800318c <HAL_GPIO_Init+0x240>
 800316e:	2307      	movs	r3, #7
 8003170:	e00c      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003172:	2306      	movs	r3, #6
 8003174:	e00a      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003176:	2305      	movs	r3, #5
 8003178:	e008      	b.n	800318c <HAL_GPIO_Init+0x240>
 800317a:	2304      	movs	r3, #4
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x240>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x240>
 800318a:	2300      	movs	r3, #0
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800319c:	4935      	ldr	r1, [pc, #212]	; (8003274 <HAL_GPIO_Init+0x328>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_GPIO_Init+0x354>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ce:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <HAL_GPIO_Init+0x354>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_GPIO_Init+0x354>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f8:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <HAL_GPIO_Init+0x354>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_GPIO_Init+0x354>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_GPIO_Init+0x354>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_GPIO_Init+0x354>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_GPIO_Init+0x354>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	f67f ae86 	bls.w	8002f6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40013800 	.word	0x40013800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00
 8003288:	40021000 	.word	0x40021000
 800328c:	40021400 	.word	0x40021400
 8003290:	40021800 	.word	0x40021800
 8003294:	40021c00 	.word	0x40021c00
 8003298:	40022000 	.word	0x40022000
 800329c:	40022400 	.word	0x40022400
 80032a0:	40013c00 	.word	0x40013c00

080032a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e001      	b.n	80032c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
 80032e0:	4613      	mov	r3, r2
 80032e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e4:	787b      	ldrb	r3, [r7, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032f0:	e003      	b.n	80032fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	041a      	lsls	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e07f      	b.n	800341a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fb7c 	bl	8000a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003358:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003368:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	e006      	b.n	8003390 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800338e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d104      	bne.n	80033a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_I2C_Init+0x11c>)
 80033ae:	430b      	orrs	r3, r1
 80033b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	ea42 0103 	orr.w	r1, r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	021a      	lsls	r2, r3, #8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69d9      	ldr	r1, [r3, #28]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	02008000 	.word	0x02008000

08003428 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	461a      	mov	r2, r3
 8003434:	460b      	mov	r3, r1
 8003436:	817b      	strh	r3, [r7, #10]
 8003438:	4613      	mov	r3, r2
 800343a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b20      	cmp	r3, #32
 8003446:	f040 80da 	bne.w	80035fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_I2C_Master_Transmit+0x30>
 8003454:	2302      	movs	r3, #2
 8003456:	e0d3      	b.n	8003600 <HAL_I2C_Master_Transmit+0x1d8>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003460:	f7ff fba0 	bl	8002ba4 <HAL_GetTick>
 8003464:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2319      	movs	r3, #25
 800346c:	2201      	movs	r2, #1
 800346e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f9e6 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0be      	b.n	8003600 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2210      	movs	r2, #16
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2bff      	cmp	r3, #255	; 0xff
 80034b2:	d90e      	bls.n	80034d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	22ff      	movs	r2, #255	; 0xff
 80034b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	8979      	ldrh	r1, [r7, #10]
 80034c2:	4b51      	ldr	r3, [pc, #324]	; (8003608 <HAL_I2C_Master_Transmit+0x1e0>)
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fb48 	bl	8003b60 <I2C_TransferConfig>
 80034d0:	e06c      	b.n	80035ac <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	8979      	ldrh	r1, [r7, #10]
 80034e4:	4b48      	ldr	r3, [pc, #288]	; (8003608 <HAL_I2C_Master_Transmit+0x1e0>)
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fb37 	bl	8003b60 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80034f2:	e05b      	b.n	80035ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	6a39      	ldr	r1, [r7, #32]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f9e3 	bl	80038c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e07b      	b.n	8003600 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d034      	beq.n	80035ac <HAL_I2C_Master_Transmit+0x184>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d130      	bne.n	80035ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2200      	movs	r2, #0
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f975 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e04d      	b.n	8003600 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2bff      	cmp	r3, #255	; 0xff
 800356c:	d90e      	bls.n	800358c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	2300      	movs	r3, #0
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 faeb 	bl	8003b60 <I2C_TransferConfig>
 800358a:	e00f      	b.n	80035ac <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fada 	bl	8003b60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d19e      	bne.n	80034f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	6a39      	ldr	r1, [r7, #32]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f9c2 	bl	8003944 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e01a      	b.n	8003600 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2220      	movs	r2, #32
 80035d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_I2C_Master_Transmit+0x1e4>)
 80035de:	400b      	ands	r3, r1
 80035e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
  }
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	80002000 	.word	0x80002000
 800360c:	fe00e800 	.word	0xfe00e800

08003610 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	461a      	mov	r2, r3
 800361c:	460b      	mov	r3, r1
 800361e:	817b      	strh	r3, [r7, #10]
 8003620:	4613      	mov	r3, r2
 8003622:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b20      	cmp	r3, #32
 800362e:	f040 80db 	bne.w	80037e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_I2C_Master_Receive+0x30>
 800363c:	2302      	movs	r3, #2
 800363e:	e0d4      	b.n	80037ea <HAL_I2C_Master_Receive+0x1da>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003648:	f7ff faac 	bl	8002ba4 <HAL_GetTick>
 800364c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2319      	movs	r3, #25
 8003654:	2201      	movs	r2, #1
 8003656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8f2 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0bf      	b.n	80037ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2222      	movs	r2, #34	; 0x22
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2210      	movs	r2, #16
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	893a      	ldrh	r2, [r7, #8]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	2bff      	cmp	r3, #255	; 0xff
 800369a:	d90e      	bls.n	80036ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	8979      	ldrh	r1, [r7, #10]
 80036aa:	4b52      	ldr	r3, [pc, #328]	; (80037f4 <HAL_I2C_Master_Receive+0x1e4>)
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fa54 	bl	8003b60 <I2C_TransferConfig>
 80036b8:	e06d      	b.n	8003796 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	8979      	ldrh	r1, [r7, #10]
 80036cc:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <HAL_I2C_Master_Receive+0x1e4>)
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fa43 	bl	8003b60 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80036da:	e05c      	b.n	8003796 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	6a39      	ldr	r1, [r7, #32]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f96b 	bl	80039bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e07c      	b.n	80037ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d034      	beq.n	8003796 <HAL_I2C_Master_Receive+0x186>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d130      	bne.n	8003796 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	2200      	movs	r2, #0
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f880 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e04d      	b.n	80037ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	2bff      	cmp	r3, #255	; 0xff
 8003756:	d90e      	bls.n	8003776 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	22ff      	movs	r2, #255	; 0xff
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	b2da      	uxtb	r2, r3
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f9f6 	bl	8003b60 <I2C_TransferConfig>
 8003774:	e00f      	b.n	8003796 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	b2da      	uxtb	r2, r3
 8003786:	8979      	ldrh	r1, [r7, #10]
 8003788:	2300      	movs	r3, #0
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f9e5 	bl	8003b60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d19d      	bne.n	80036dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	6a39      	ldr	r1, [r7, #32]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f8cd 	bl	8003944 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e01a      	b.n	80037ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2220      	movs	r2, #32
 80037ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_I2C_Master_Receive+0x1e8>)
 80037c8:	400b      	ands	r3, r1
 80037ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	80002400 	.word	0x80002400
 80037f8:	fe00e800 	.word	0xfe00e800

080037fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d103      	bne.n	800381a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d007      	beq.n	8003838 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	619a      	str	r2, [r3, #24]
  }
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003854:	e022      	b.n	800389c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d01e      	beq.n	800389c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7ff f9a1 	bl	8002ba4 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d113      	bne.n	800389c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e00f      	b.n	80038bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d0cd      	beq.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038d0:	e02c      	b.n	800392c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f8dc 	bl	8003a94 <I2C_IsAcknowledgeFailed>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e02a      	b.n	800393c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d01e      	beq.n	800392c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7ff f959 	bl	8002ba4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d113      	bne.n	800392c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e007      	b.n	800393c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d1cb      	bne.n	80038d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003950:	e028      	b.n	80039a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f89c 	bl	8003a94 <I2C_IsAcknowledgeFailed>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e026      	b.n	80039b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7ff f91d 	bl	8002ba4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d113      	bne.n	80039a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d1cf      	bne.n	8003952 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039c8:	e055      	b.n	8003a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f860 	bl	8003a94 <I2C_IsAcknowledgeFailed>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e053      	b.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d129      	bne.n	8003a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d105      	bne.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e03f      	b.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e022      	b.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a40:	f7ff f8b0 	bl	8002ba4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d302      	bcc.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e007      	b.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d1a2      	bne.n	80039ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	fe00e800 	.word	0xfe00e800

08003a94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d151      	bne.n	8003b52 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aae:	e022      	b.n	8003af6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d01e      	beq.n	8003af6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab8:	f7ff f874 	bl	8002ba4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d302      	bcc.n	8003ace <I2C_IsAcknowledgeFailed+0x3a>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d113      	bne.n	8003af6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e02e      	b.n	8003b54 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d1d5      	bne.n	8003ab0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2210      	movs	r2, #16
 8003b0a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2220      	movs	r2, #32
 8003b12:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7ff fe71 	bl	80037fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <I2C_IsAcknowledgeFailed+0xc8>)
 8003b26:	400b      	ands	r3, r1
 8003b28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f043 0204 	orr.w	r2, r3, #4
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	fe00e800 	.word	0xfe00e800

08003b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	817b      	strh	r3, [r7, #10]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	0d5b      	lsrs	r3, r3, #21
 8003b7c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <I2C_TransferConfig+0x58>)
 8003b82:	430b      	orrs	r3, r1
 8003b84:	43db      	mvns	r3, r3
 8003b86:	ea02 0103 	and.w	r1, r2, r3
 8003b8a:	897b      	ldrh	r3, [r7, #10]
 8003b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b90:	7a7b      	ldrb	r3, [r7, #9]
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	03ff63ff 	.word	0x03ff63ff

08003bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d138      	bne.n	8003c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e032      	b.n	8003c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	; 0x24
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d139      	bne.n	8003cdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e033      	b.n	8003cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2224      	movs	r2, #36	; 0x24
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ca4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40007000 	.word	0x40007000

08003d0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d16:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	; 0x40
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d3a:	f7fe ff33 	bl	8002ba4 <HAL_GetTick>
 8003d3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d40:	e009      	b.n	8003d56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d42:	f7fe ff2f 	bl	8002ba4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d50:	d901      	bls.n	8003d56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e022      	b.n	8003d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d62:	d1ee      	bne.n	8003d42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0f      	ldr	r2, [pc, #60]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d70:	f7fe ff18 	bl	8002ba4 <HAL_GetTick>
 8003d74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d76:	e009      	b.n	8003d8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d78:	f7fe ff14 	bl	8002ba4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d86:	d901      	bls.n	8003d8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e007      	b.n	8003d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d98:	d1ee      	bne.n	8003d78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40007000 	.word	0x40007000

08003dac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e29b      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8087 	beq.w	8003ede <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd0:	4b96      	ldr	r3, [pc, #600]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d00c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ddc:	4b93      	ldr	r3, [pc, #588]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d112      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62>
 8003de8:	4b90      	ldr	r3, [pc, #576]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df4:	d10b      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df6:	4b8d      	ldr	r3, [pc, #564]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d06c      	beq.n	8003edc <HAL_RCC_OscConfig+0x130>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d168      	bne.n	8003edc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e275      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_OscConfig+0x7a>
 8003e18:	4b84      	ldr	r3, [pc, #528]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a83      	ldr	r2, [pc, #524]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e02e      	b.n	8003e84 <HAL_RCC_OscConfig+0xd8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x9c>
 8003e2e:	4b7f      	ldr	r3, [pc, #508]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7e      	ldr	r2, [pc, #504]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b7c      	ldr	r3, [pc, #496]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a7b      	ldr	r2, [pc, #492]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e01d      	b.n	8003e84 <HAL_RCC_OscConfig+0xd8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0xc0>
 8003e52:	4b76      	ldr	r3, [pc, #472]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a75      	ldr	r2, [pc, #468]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b73      	ldr	r3, [pc, #460]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a72      	ldr	r2, [pc, #456]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xd8>
 8003e6c:	4b6f      	ldr	r3, [pc, #444]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6e      	ldr	r2, [pc, #440]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b6c      	ldr	r3, [pc, #432]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a6b      	ldr	r2, [pc, #428]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fe8a 	bl	8002ba4 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe fe86 	bl	8002ba4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e229      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b61      	ldr	r3, [pc, #388]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xe8>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fe76 	bl	8002ba4 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fe72 	bl	8002ba4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e215      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	4b57      	ldr	r3, [pc, #348]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x110>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d069      	beq.n	8003fbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eea:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b4d      	ldr	r3, [pc, #308]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d11c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x190>
 8003f02:	4b4a      	ldr	r3, [pc, #296]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d116      	bne.n	8003f3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_RCC_OscConfig+0x17a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1e9      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	493d      	ldr	r1, [pc, #244]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	e040      	b.n	8003fbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d023      	beq.n	8003f8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a38      	ldr	r2, [pc, #224]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe fe28 	bl	8002ba4 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f58:	f7fe fe24 	bl	8002ba4 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e1c7      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4929      	ldr	r1, [pc, #164]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
 8003f8a:	e018      	b.n	8003fbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fe fe04 	bl	8002ba4 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7fe fe00 	bl	8002ba4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e1a3      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d038      	beq.n	800403c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d019      	beq.n	8004006 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	4a15      	ldr	r2, [pc, #84]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fe fde1 	bl	8002ba4 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe6:	f7fe fddd 	bl	8002ba4 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e180      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x23a>
 8004004:	e01a      	b.n	800403c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	4a08      	ldr	r2, [pc, #32]	; (800402c <HAL_RCC_OscConfig+0x280>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004012:	f7fe fdc7 	bl	8002ba4 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004018:	e00a      	b.n	8004030 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401a:	f7fe fdc3 	bl	8002ba4 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d903      	bls.n	8004030 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e166      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
 800402c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	4b92      	ldr	r3, [pc, #584]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ee      	bne.n	800401a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80a4 	beq.w	8004192 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b8c      	ldr	r3, [pc, #560]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10d      	bne.n	8004072 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	4b89      	ldr	r3, [pc, #548]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a88      	ldr	r2, [pc, #544]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b86      	ldr	r3, [pc, #536]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004072:	4b83      	ldr	r3, [pc, #524]	; (8004280 <HAL_RCC_OscConfig+0x4d4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d118      	bne.n	80040b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800407e:	4b80      	ldr	r3, [pc, #512]	; (8004280 <HAL_RCC_OscConfig+0x4d4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7f      	ldr	r2, [pc, #508]	; (8004280 <HAL_RCC_OscConfig+0x4d4>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7fe fd8b 	bl	8002ba4 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fe fd87 	bl	8002ba4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b64      	cmp	r3, #100	; 0x64
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e12a      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a4:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCC_OscConfig+0x4d4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x31a>
 80040b8:	4b70      	ldr	r3, [pc, #448]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a6f      	ldr	r2, [pc, #444]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	e02d      	b.n	8004122 <HAL_RCC_OscConfig+0x376>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x33c>
 80040ce:	4b6b      	ldr	r3, [pc, #428]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a6a      	ldr	r2, [pc, #424]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	4b68      	ldr	r3, [pc, #416]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a67      	ldr	r2, [pc, #412]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e01c      	b.n	8004122 <HAL_RCC_OscConfig+0x376>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_OscConfig+0x35e>
 80040f0:	4b62      	ldr	r3, [pc, #392]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a61      	ldr	r2, [pc, #388]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040f6:	f043 0304 	orr.w	r3, r3, #4
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b5f      	ldr	r3, [pc, #380]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a5e      	ldr	r2, [pc, #376]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	e00b      	b.n	8004122 <HAL_RCC_OscConfig+0x376>
 800410a:	4b5c      	ldr	r3, [pc, #368]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a5b      	ldr	r2, [pc, #364]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d015      	beq.n	8004156 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fe fd3b 	bl	8002ba4 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fe fd37 	bl	8002ba4 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0d8      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004148:	4b4c      	ldr	r3, [pc, #304]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ee      	beq.n	8004132 <HAL_RCC_OscConfig+0x386>
 8004154:	e014      	b.n	8004180 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fe fd25 	bl	8002ba4 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fe fd21 	bl	8002ba4 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0c2      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004174:	4b41      	ldr	r3, [pc, #260]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ee      	bne.n	800415e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004186:	4b3d      	ldr	r3, [pc, #244]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a3c      	ldr	r2, [pc, #240]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80ae 	beq.w	80042f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419c:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d06d      	beq.n	8004284 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d14b      	bne.n	8004248 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b0:	4b32      	ldr	r3, [pc, #200]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80041b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe fcf2 	bl	8002ba4 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fe fcee 	bl	8002ba4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e091      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	019b      	lsls	r3, r3, #6
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	071b      	lsls	r3, r3, #28
 800420e:	491b      	ldr	r1, [pc, #108]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a18      	ldr	r2, [pc, #96]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe fcc0 	bl	8002ba4 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004228:	f7fe fcbc 	bl	8002ba4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e05f      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x47c>
 8004246:	e057      	b.n	80042f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a0b      	ldr	r2, [pc, #44]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe fca6 	bl	8002ba4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fe fca2 	bl	8002ba4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e045      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x4b0>
 800427a:	e03d      	b.n	80042f8 <HAL_RCC_OscConfig+0x54c>
 800427c:	40023800 	.word	0x40023800
 8004280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004284:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <HAL_RCC_OscConfig+0x558>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d030      	beq.n	80042f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d129      	bne.n	80042f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d122      	bne.n	80042f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042bc:	4293      	cmp	r3, r2
 80042be:	d119      	bne.n	80042f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	3b01      	subs	r3, #1
 80042ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d10f      	bne.n	80042f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800

08004308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0d0      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004320:	4b6a      	ldr	r3, [pc, #424]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d910      	bls.n	8004350 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b67      	ldr	r3, [pc, #412]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 020f 	bic.w	r2, r3, #15
 8004336:	4965      	ldr	r1, [pc, #404]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b63      	ldr	r3, [pc, #396]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0b8      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004368:	4b59      	ldr	r3, [pc, #356]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004380:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4a52      	ldr	r2, [pc, #328]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800438a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438c:	4b50      	ldr	r3, [pc, #320]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	494d      	ldr	r1, [pc, #308]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d040      	beq.n	800442c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d115      	bne.n	80043ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e07f      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d107      	bne.n	80043da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	4b41      	ldr	r3, [pc, #260]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e073      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e06b      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 0203 	bic.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4936      	ldr	r1, [pc, #216]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fc:	f7fe fbd2 	bl	8002ba4 <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	e00a      	b.n	800441a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004404:	f7fe fbce 	bl	8002ba4 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e053      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 020c 	and.w	r2, r3, #12
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	429a      	cmp	r2, r3
 800442a:	d1eb      	bne.n	8004404 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800442c:	4b27      	ldr	r3, [pc, #156]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d210      	bcs.n	800445c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 020f 	bic.w	r2, r3, #15
 8004442:	4922      	ldr	r1, [pc, #136]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b20      	ldr	r3, [pc, #128]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e032      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4916      	ldr	r1, [pc, #88]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	490e      	ldr	r1, [pc, #56]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800449a:	f000 f821 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 800449e:	4602      	mov	r2, r0
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	490a      	ldr	r1, [pc, #40]	; (80044d4 <HAL_RCC_ClockConfig+0x1cc>)
 80044ac:	5ccb      	ldrb	r3, [r1, r3]
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <HAL_RCC_ClockConfig+0x1d0>)
 80044b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x1d4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fb2e 	bl	8002b1c <HAL_InitTick>

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40023c00 	.word	0x40023c00
 80044d0:	40023800 	.word	0x40023800
 80044d4:	0800f850 	.word	0x0800f850
 80044d8:	20000000 	.word	0x20000000
 80044dc:	20000008 	.word	0x20000008

080044e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e4:	b094      	sub	sp, #80	; 0x50
 80044e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	647b      	str	r3, [r7, #68]	; 0x44
 80044ec:	2300      	movs	r3, #0
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f0:	2300      	movs	r3, #0
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f8:	4b79      	ldr	r3, [pc, #484]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d00d      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x40>
 8004504:	2b08      	cmp	r3, #8
 8004506:	f200 80e1 	bhi.w	80046cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x34>
 800450e:	2b04      	cmp	r3, #4
 8004510:	d003      	beq.n	800451a <HAL_RCC_GetSysClockFreq+0x3a>
 8004512:	e0db      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4b73      	ldr	r3, [pc, #460]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004518:	e0db      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800451a:	4b73      	ldr	r3, [pc, #460]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800451c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800451e:	e0d8      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004520:	4b6f      	ldr	r3, [pc, #444]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800452a:	4b6d      	ldr	r3, [pc, #436]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d063      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004536:	4b6a      	ldr	r3, [pc, #424]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	2200      	movs	r2, #0
 800453e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004540:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
 800454a:	2300      	movs	r3, #0
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
 800454e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	f04f 0000 	mov.w	r0, #0
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	0159      	lsls	r1, r3, #5
 8004560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004564:	0150      	lsls	r0, r2, #5
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4621      	mov	r1, r4
 800456c:	1a51      	subs	r1, r2, r1
 800456e:	6139      	str	r1, [r7, #16]
 8004570:	4629      	mov	r1, r5
 8004572:	eb63 0301 	sbc.w	r3, r3, r1
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004584:	4659      	mov	r1, fp
 8004586:	018b      	lsls	r3, r1, #6
 8004588:	4651      	mov	r1, sl
 800458a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800458e:	4651      	mov	r1, sl
 8004590:	018a      	lsls	r2, r1, #6
 8004592:	4651      	mov	r1, sl
 8004594:	ebb2 0801 	subs.w	r8, r2, r1
 8004598:	4659      	mov	r1, fp
 800459a:	eb63 0901 	sbc.w	r9, r3, r1
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045b2:	4690      	mov	r8, r2
 80045b4:	4699      	mov	r9, r3
 80045b6:	4623      	mov	r3, r4
 80045b8:	eb18 0303 	adds.w	r3, r8, r3
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	462b      	mov	r3, r5
 80045c0:	eb49 0303 	adc.w	r3, r9, r3
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045d2:	4629      	mov	r1, r5
 80045d4:	024b      	lsls	r3, r1, #9
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045dc:	4621      	mov	r1, r4
 80045de:	024a      	lsls	r2, r1, #9
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e6:	2200      	movs	r2, #0
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045f0:	f7fb fe7e 	bl	80002f0 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4613      	mov	r3, r2
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fc:	e058      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045fe:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	099b      	lsrs	r3, r3, #6
 8004604:	2200      	movs	r2, #0
 8004606:	4618      	mov	r0, r3
 8004608:	4611      	mov	r1, r2
 800460a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800460e:	623b      	str	r3, [r7, #32]
 8004610:	2300      	movs	r3, #0
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
 8004614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004618:	4642      	mov	r2, r8
 800461a:	464b      	mov	r3, r9
 800461c:	f04f 0000 	mov.w	r0, #0
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	0159      	lsls	r1, r3, #5
 8004626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800462a:	0150      	lsls	r0, r2, #5
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4641      	mov	r1, r8
 8004632:	ebb2 0a01 	subs.w	sl, r2, r1
 8004636:	4649      	mov	r1, r9
 8004638:	eb63 0b01 	sbc.w	fp, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800464c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004650:	ebb2 040a 	subs.w	r4, r2, sl
 8004654:	eb63 050b 	sbc.w	r5, r3, fp
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	00eb      	lsls	r3, r5, #3
 8004662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004666:	00e2      	lsls	r2, r4, #3
 8004668:	4614      	mov	r4, r2
 800466a:	461d      	mov	r5, r3
 800466c:	4643      	mov	r3, r8
 800466e:	18e3      	adds	r3, r4, r3
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	464b      	mov	r3, r9
 8004674:	eb45 0303 	adc.w	r3, r5, r3
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004686:	4629      	mov	r1, r5
 8004688:	028b      	lsls	r3, r1, #10
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004690:	4621      	mov	r1, r4
 8004692:	028a      	lsls	r2, r1, #10
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469a:	2200      	movs	r2, #0
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	61fa      	str	r2, [r7, #28]
 80046a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a4:	f7fb fe24 	bl	80002f0 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4613      	mov	r3, r2
 80046ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	3301      	adds	r3, #1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80046c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046ca:	e002      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3750      	adds	r7, #80	; 0x50
 80046d8:	46bd      	mov	sp, r7
 80046da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00f42400 	.word	0x00f42400
 80046e8:	007a1200 	.word	0x007a1200

080046ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_RCC_GetHCLKFreq+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000000 	.word	0x20000000

08004704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004708:	f7ff fff0 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0a9b      	lsrs	r3, r3, #10
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	0800f860 	.word	0x0800f860

0800472c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004730:	f7ff ffdc 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0b5b      	lsrs	r3, r3, #13
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	; (8004750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	0800f860 	.word	0x0800f860

08004754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d012      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800477c:	4b69      	ldr	r3, [pc, #420]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a68      	ldr	r2, [pc, #416]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004782:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004786:	6093      	str	r3, [r2, #8]
 8004788:	4b66      	ldr	r3, [pc, #408]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	4964      	ldr	r1, [pc, #400]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ae:	4b5d      	ldr	r3, [pc, #372]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	4959      	ldr	r1, [pc, #356]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047cc:	d101      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047da:	2301      	movs	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d017      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047ea:	4b4e      	ldr	r3, [pc, #312]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	494a      	ldr	r1, [pc, #296]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004808:	d101      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 808b 	beq.w	800494e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004838:	4b3a      	ldr	r3, [pc, #232]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	4a39      	ldr	r2, [pc, #228]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004842:	6413      	str	r3, [r2, #64]	; 0x40
 8004844:	4b37      	ldr	r3, [pc, #220]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004850:	4b35      	ldr	r3, [pc, #212]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a34      	ldr	r2, [pc, #208]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fe f9a2 	bl	8002ba4 <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004864:	f7fe f99e 	bl	8002ba4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e38f      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004876:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004882:	4b28      	ldr	r3, [pc, #160]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d035      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	429a      	cmp	r2, r3
 800489e:	d02e      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048a0:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048aa:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048b6:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048c2:	4a18      	ldr	r2, [pc, #96]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048c8:	4b16      	ldr	r3, [pc, #88]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d114      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fe f966 	bl	8002ba4 <HAL_GetTick>
 80048d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048da:	e00a      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fe f962 	bl	8002ba4 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e351      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f2:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0ee      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800490a:	d111      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004918:	4b04      	ldr	r3, [pc, #16]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800491a:	400b      	ands	r3, r1
 800491c:	4901      	ldr	r1, [pc, #4]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
 8004922:	e00b      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004924:	40023800 	.word	0x40023800
 8004928:	40007000 	.word	0x40007000
 800492c:	0ffffcff 	.word	0x0ffffcff
 8004930:	4bac      	ldr	r3, [pc, #688]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4aab      	ldr	r2, [pc, #684]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004936:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800493a:	6093      	str	r3, [r2, #8]
 800493c:	4ba9      	ldr	r3, [pc, #676]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004948:	49a6      	ldr	r1, [pc, #664]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	4313      	orrs	r3, r2
 800494c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d010      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800495a:	4ba2      	ldr	r3, [pc, #648]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004960:	4aa0      	ldr	r2, [pc, #640]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004966:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800496a:	4b9e      	ldr	r3, [pc, #632]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	499b      	ldr	r1, [pc, #620]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004988:	4b96      	ldr	r3, [pc, #600]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004996:	4993      	ldr	r1, [pc, #588]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049aa:	4b8e      	ldr	r3, [pc, #568]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b8:	498a      	ldr	r1, [pc, #552]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049cc:	4b85      	ldr	r3, [pc, #532]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049da:	4982      	ldr	r1, [pc, #520]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049ee:	4b7d      	ldr	r3, [pc, #500]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4979      	ldr	r1, [pc, #484]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a10:	4b74      	ldr	r3, [pc, #464]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	4971      	ldr	r1, [pc, #452]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a32:	4b6c      	ldr	r3, [pc, #432]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	f023 020c 	bic.w	r2, r3, #12
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a40:	4968      	ldr	r1, [pc, #416]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a54:	4b63      	ldr	r3, [pc, #396]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	4960      	ldr	r1, [pc, #384]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a76:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	4957      	ldr	r1, [pc, #348]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a98:	4b52      	ldr	r3, [pc, #328]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	494f      	ldr	r1, [pc, #316]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004aba:	4b4a      	ldr	r3, [pc, #296]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	4946      	ldr	r1, [pc, #280]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004adc:	4b41      	ldr	r3, [pc, #260]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	493e      	ldr	r1, [pc, #248]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0c:	4935      	ldr	r1, [pc, #212]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b20:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2e:	492d      	ldr	r1, [pc, #180]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b42:	4b28      	ldr	r3, [pc, #160]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b50:	4924      	ldr	r1, [pc, #144]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b60:	d101      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b82:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b90:	4914      	ldr	r1, [pc, #80]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb4:	490b      	ldr	r1, [pc, #44]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00f      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd8:	4902      	ldr	r1, [pc, #8]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bf4:	4b8a      	ldr	r3, [pc, #552]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	4986      	ldr	r1, [pc, #536]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00b      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c18:	4b81      	ldr	r3, [pc, #516]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c28:	497d      	ldr	r1, [pc, #500]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d006      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80d6 	beq.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c44:	4b76      	ldr	r3, [pc, #472]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a75      	ldr	r2, [pc, #468]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fd ffa8 	bl	8002ba4 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c58:	f7fd ffa4 	bl	8002ba4 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e195      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c6a:	4b6d      	ldr	r3, [pc, #436]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d021      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d11d      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c8a:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c98:	4b61      	ldr	r3, [pc, #388]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9e:	0e1b      	lsrs	r3, r3, #24
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	019a      	lsls	r2, r3, #6
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	071b      	lsls	r3, r3, #28
 8004cbe:	4958      	ldr	r1, [pc, #352]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02e      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf0:	d129      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cf2:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d00:	4b47      	ldr	r3, [pc, #284]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d06:	0f1b      	lsrs	r3, r3, #28
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	019a      	lsls	r2, r3, #6
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	071b      	lsls	r3, r3, #28
 8004d26:	493e      	ldr	r1, [pc, #248]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d2e:	4b3c      	ldr	r3, [pc, #240]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d34:	f023 021f 	bic.w	r2, r3, #31
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	4938      	ldr	r1, [pc, #224]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01d      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d52:	4b33      	ldr	r3, [pc, #204]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d58:	0e1b      	lsrs	r3, r3, #24
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d60:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d66:	0f1b      	lsrs	r3, r3, #28
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	019a      	lsls	r2, r3, #6
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	071b      	lsls	r3, r3, #28
 8004d86:	4926      	ldr	r1, [pc, #152]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	019a      	lsls	r2, r3, #6
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	071b      	lsls	r3, r3, #28
 8004db6:	491a      	ldr	r1, [pc, #104]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dbe:	4b18      	ldr	r3, [pc, #96]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a17      	ldr	r2, [pc, #92]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dca:	f7fd feeb 	bl	8002ba4 <HAL_GetTick>
 8004dce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dd2:	f7fd fee7 	bl	8002ba4 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b64      	cmp	r3, #100	; 0x64
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0d8      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	f040 80ce 	bne.w	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e04:	f7fd fece 	bl	8002ba4 <HAL_GetTick>
 8004e08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e0c:	f7fd feca 	bl	8002ba4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d904      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e0bb      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e24:	4b5e      	ldr	r3, [pc, #376]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e30:	d0ec      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d02e      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12a      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e5a:	4b51      	ldr	r3, [pc, #324]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e68:	4b4d      	ldr	r3, [pc, #308]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6e:	0f1b      	lsrs	r3, r3, #28
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	019a      	lsls	r2, r3, #6
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	071b      	lsls	r3, r3, #28
 8004e8e:	4944      	ldr	r1, [pc, #272]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e96:	4b42      	ldr	r3, [pc, #264]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	493d      	ldr	r1, [pc, #244]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d022      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec4:	d11d      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	0e1b      	lsrs	r3, r3, #24
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ed4:	4b32      	ldr	r3, [pc, #200]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	0f1b      	lsrs	r3, r3, #28
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	019a      	lsls	r2, r3, #6
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	4929      	ldr	r1, [pc, #164]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d028      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	0e1b      	lsrs	r3, r3, #24
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f1c:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	0c1b      	lsrs	r3, r3, #16
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	019a      	lsls	r2, r3, #6
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	431a      	orrs	r2, r3
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	061b      	lsls	r3, r3, #24
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	4917      	ldr	r1, [pc, #92]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4911      	ldr	r1, [pc, #68]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f60:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0e      	ldr	r2, [pc, #56]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd fe1a 	bl	8002ba4 <HAL_GetTick>
 8004f70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f74:	f7fd fe16 	bl	8002ba4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e007      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f92:	d1ef      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800

08004fa4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e01c      	b.n	8004ff0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	795b      	ldrb	r3, [r3, #5]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fc fafc 	bl	80015c4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0204 	orr.w	r2, r2, #4
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e09d      	b.n	8005146 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d108      	bne.n	8005024 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800501a:	d009      	beq.n	8005030 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	61da      	str	r2, [r3, #28]
 8005022:	e005      	b.n	8005030 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fc fb18 	bl	8001680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005066:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005070:	d902      	bls.n	8005078 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e002      	b.n	800507e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800507c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005086:	d007      	beq.n	8005098 <HAL_SPI_Init+0xa0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005090:	d002      	beq.n	8005098 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	ea42 0103 	orr.w	r1, r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	f003 0204 	and.w	r2, r3, #4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005114:	ea42 0103 	orr.w	r1, r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005134:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b088      	sub	sp, #32
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_SPI_Transmit+0x22>
 800516c:	2302      	movs	r3, #2
 800516e:	e158      	b.n	8005422 <HAL_SPI_Transmit+0x2d4>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005178:	f7fd fd14 	bl	8002ba4 <HAL_GetTick>
 800517c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d002      	beq.n	8005194 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800518e:	2302      	movs	r3, #2
 8005190:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005192:	e13d      	b.n	8005410 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_Transmit+0x52>
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051a4:	e134      	b.n	8005410 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2203      	movs	r2, #3
 80051aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	88fa      	ldrh	r2, [r7, #6]
 80051be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f0:	d10f      	bne.n	8005212 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005210:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d007      	beq.n	8005230 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005238:	d94b      	bls.n	80052d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_SPI_Transmit+0xfa>
 8005242:	8afb      	ldrh	r3, [r7, #22]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d13e      	bne.n	80052c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	881a      	ldrh	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800526c:	e02b      	b.n	80052c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b02      	cmp	r3, #2
 800527a:	d112      	bne.n	80052a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	881a      	ldrh	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	1c9a      	adds	r2, r3, #2
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052a0:	e011      	b.n	80052c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a2:	f7fd fc7f 	bl	8002ba4 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d803      	bhi.n	80052ba <HAL_SPI_Transmit+0x16c>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d102      	bne.n	80052c0 <HAL_SPI_Transmit+0x172>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d102      	bne.n	80052c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052c4:	e0a4      	b.n	8005410 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1ce      	bne.n	800526e <HAL_SPI_Transmit+0x120>
 80052d0:	e07c      	b.n	80053cc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_SPI_Transmit+0x192>
 80052da:	8afb      	ldrh	r3, [r7, #22]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d170      	bne.n	80053c2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d912      	bls.n	8005310 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	881a      	ldrh	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b02      	subs	r3, #2
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800530e:	e058      	b.n	80053c2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	7812      	ldrb	r2, [r2, #0]
 800531c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005336:	e044      	b.n	80053c2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d12b      	bne.n	800539e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b01      	cmp	r3, #1
 800534e:	d912      	bls.n	8005376 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	881a      	ldrh	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	1c9a      	adds	r2, r3, #2
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b02      	subs	r3, #2
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005374:	e025      	b.n	80053c2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800539c:	e011      	b.n	80053c2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800539e:	f7fd fc01 	bl	8002ba4 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d803      	bhi.n	80053b6 <HAL_SPI_Transmit+0x268>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d102      	bne.n	80053bc <HAL_SPI_Transmit+0x26e>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053c0:	e026      	b.n	8005410 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1b5      	bne.n	8005338 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f945 	bl	8005660 <SPI_EndRxTxTransaction>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e000      	b.n	8005410 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800540e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005420:	7ffb      	ldrb	r3, [r7, #31]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800543c:	f7fd fbb2 	bl	8002ba4 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	4413      	add	r3, r2
 800544a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800544c:	f7fd fbaa 	bl	8002ba4 <HAL_GetTick>
 8005450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005452:	4b39      	ldr	r3, [pc, #228]	; (8005538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	015b      	lsls	r3, r3, #5
 8005458:	0d1b      	lsrs	r3, r3, #20
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	fb02 f303 	mul.w	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005462:	e054      	b.n	800550e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d050      	beq.n	800550e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800546c:	f7fd fb9a 	bl	8002ba4 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	429a      	cmp	r2, r3
 800547a:	d902      	bls.n	8005482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d13d      	bne.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549a:	d111      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a4:	d004      	beq.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ae:	d107      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c8:	d10f      	bne.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e017      	b.n	800552e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3b01      	subs	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d19b      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000000 	.word	0x20000000

0800553c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800554a:	f7fd fb2b 	bl	8002ba4 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	4413      	add	r3, r2
 8005558:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800555a:	f7fd fb23 	bl	8002ba4 <HAL_GetTick>
 800555e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005560:	4b3e      	ldr	r3, [pc, #248]	; (800565c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	00da      	lsls	r2, r3, #3
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	0d1b      	lsrs	r3, r3, #20
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005578:	e062      	b.n	8005640 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005580:	d109      	bne.n	8005596 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005594:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d050      	beq.n	8005640 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800559e:	f7fd fb01 	bl	8002ba4 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d902      	bls.n	80055b4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d13d      	bne.n	8005630 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055cc:	d111      	bne.n	80055f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d6:	d004      	beq.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e0:	d107      	bne.n	80055f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fa:	d10f      	bne.n	800561c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800561a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e010      	b.n	8005652 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3b01      	subs	r3, #1
 800563e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	d194      	bne.n	800557a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000000 	.word	0x20000000

08005660 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2200      	movs	r2, #0
 8005674:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff ff5f 	bl	800553c <SPI_WaitFifoStateUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005688:	f043 0220 	orr.w	r2, r3, #32
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e027      	b.n	80056e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	2180      	movs	r1, #128	; 0x80
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff fec4 	bl	800542c <SPI_WaitFlagStateUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e014      	b.n	80056e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff ff38 	bl	800553c <SPI_WaitFifoStateUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d6:	f043 0220 	orr.w	r2, r3, #32
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e000      	b.n	80056e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e049      	b.n	8005792 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fc f9e8 	bl	8001ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f000 fac6 	bl	8005cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d001      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e054      	b.n	800585e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a26      	ldr	r2, [pc, #152]	; (800586c <HAL_TIM_Base_Start_IT+0xd0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d022      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057de:	d01d      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <HAL_TIM_Base_Start_IT+0xd4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d018      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a21      	ldr	r2, [pc, #132]	; (8005874 <HAL_TIM_Base_Start_IT+0xd8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_TIM_Base_Start_IT+0xdc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00e      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1e      	ldr	r2, [pc, #120]	; (800587c <HAL_TIM_Base_Start_IT+0xe0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d009      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <HAL_TIM_Base_Start_IT+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <HAL_TIM_Base_Start_IT+0xe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d115      	bne.n	8005848 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	4b19      	ldr	r3, [pc, #100]	; (8005888 <HAL_TIM_Base_Start_IT+0xec>)
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b06      	cmp	r3, #6
 800582c:	d015      	beq.n	800585a <HAL_TIM_Base_Start_IT+0xbe>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005834:	d011      	beq.n	800585a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005846:	e008      	b.n	800585a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e000      	b.n	800585c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40010400 	.word	0x40010400
 8005880:	40014000 	.word	0x40014000
 8005884:	40001800 	.word	0x40001800
 8005888:	00010007 	.word	0x00010007

0800588c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0202 	mvn.w	r2, #2
 80058b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9d6 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f9c8 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f9d9 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b04      	cmp	r3, #4
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0204 	mvn.w	r2, #4
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9ac 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f99e 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f9af 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b08      	cmp	r3, #8
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0208 	mvn.w	r2, #8
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2204      	movs	r2, #4
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f982 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f974 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f985 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b10      	cmp	r3, #16
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0210 	mvn.w	r2, #16
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2208      	movs	r2, #8
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f958 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f94a 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f95b 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d10e      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d107      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0201 	mvn.w	r2, #1
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f924 	bl	8005c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d10e      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a28:	2b80      	cmp	r3, #128	; 0x80
 8005a2a:	d107      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb12 	bl	8006060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4a:	d10e      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a56:	2b80      	cmp	r3, #128	; 0x80
 8005a58:	d107      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fb05 	bl	8006074 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d10e      	bne.n	8005a96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b40      	cmp	r3, #64	; 0x40
 8005a84:	d107      	bne.n	8005a96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f909 	bl	8005ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d10e      	bne.n	8005ac2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d107      	bne.n	8005ac2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f06f 0220 	mvn.w	r2, #32
 8005aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fac5 	bl	800604c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIM_ConfigClockSource+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e0b3      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x180>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4b55      	ldr	r3, [pc, #340]	; (8005c54 <HAL_TIM_ConfigClockSource+0x188>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1c:	d03e      	beq.n	8005b9c <HAL_TIM_ConfigClockSource+0xd0>
 8005b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b22:	f200 8087 	bhi.w	8005c34 <HAL_TIM_ConfigClockSource+0x168>
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	f000 8085 	beq.w	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b32:	d87f      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x168>
 8005b34:	2b70      	cmp	r3, #112	; 0x70
 8005b36:	d01a      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0xa2>
 8005b38:	2b70      	cmp	r3, #112	; 0x70
 8005b3a:	d87b      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x168>
 8005b3c:	2b60      	cmp	r3, #96	; 0x60
 8005b3e:	d050      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0x116>
 8005b40:	2b60      	cmp	r3, #96	; 0x60
 8005b42:	d877      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x168>
 8005b44:	2b50      	cmp	r3, #80	; 0x50
 8005b46:	d03c      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0xf6>
 8005b48:	2b50      	cmp	r3, #80	; 0x50
 8005b4a:	d873      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x168>
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d058      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x136>
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d86f      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x168>
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	d064      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x156>
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d86b      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x168>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d060      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x156>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d867      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x168>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d05c      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x156>
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d05a      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b6c:	e062      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6899      	ldr	r1, [r3, #8]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f000 f9b7 	bl	8005ef0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	609a      	str	r2, [r3, #8]
      break;
 8005b9a:	e04e      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6899      	ldr	r1, [r3, #8]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f000 f9a0 	bl	8005ef0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bbe:	609a      	str	r2, [r3, #8]
      break;
 8005bc0:	e03b      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6859      	ldr	r1, [r3, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f000 f914 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2150      	movs	r1, #80	; 0x50
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f96d 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005be0:	e02b      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6859      	ldr	r1, [r3, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f000 f933 	bl	8005e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2160      	movs	r1, #96	; 0x60
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 f95d 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005c00:	e01b      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f000 f8f4 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2140      	movs	r1, #64	; 0x40
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 f94d 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005c20:	e00b      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f000 f944 	bl	8005eba <TIM_ITRx_SetConfig>
        break;
 8005c32:	e002      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	fffeff88 	.word	0xfffeff88

08005c58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a40      	ldr	r2, [pc, #256]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d013      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cda:	d00f      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3d      	ldr	r2, [pc, #244]	; (8005dd4 <TIM_Base_SetConfig+0x118>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00b      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	; (8005dd8 <TIM_Base_SetConfig+0x11c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d007      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3b      	ldr	r2, [pc, #236]	; (8005ddc <TIM_Base_SetConfig+0x120>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3a      	ldr	r2, [pc, #232]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d108      	bne.n	8005d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2f      	ldr	r2, [pc, #188]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d02b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1c:	d027      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2c      	ldr	r2, [pc, #176]	; (8005dd4 <TIM_Base_SetConfig+0x118>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d023      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2b      	ldr	r2, [pc, #172]	; (8005dd8 <TIM_Base_SetConfig+0x11c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01f      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <TIM_Base_SetConfig+0x120>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d017      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <TIM_Base_SetConfig+0x128>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <TIM_Base_SetConfig+0x12c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a26      	ldr	r2, [pc, #152]	; (8005dec <TIM_Base_SetConfig+0x130>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a25      	ldr	r2, [pc, #148]	; (8005df0 <TIM_Base_SetConfig+0x134>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a24      	ldr	r2, [pc, #144]	; (8005df4 <TIM_Base_SetConfig+0x138>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a23      	ldr	r2, [pc, #140]	; (8005df8 <TIM_Base_SetConfig+0x13c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d108      	bne.n	8005d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <TIM_Base_SetConfig+0x114>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0xf8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <TIM_Base_SetConfig+0x124>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d103      	bne.n	8005dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	615a      	str	r2, [r3, #20]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800
 8005df0:	40001800 	.word	0x40001800
 8005df4:	40001c00 	.word	0x40001c00
 8005df8:	40002000 	.word	0x40002000

08005dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 030a 	bic.w	r3, r3, #10
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0210 	bic.w	r2, r3, #16
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f043 0307 	orr.w	r3, r3, #7
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e06d      	b.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a30      	ldr	r2, [pc, #192]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2f      	ldr	r2, [pc, #188]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d108      	bne.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a20      	ldr	r2, [pc, #128]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d01d      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a15      	ldr	r2, [pc, #84]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a16      	ldr	r2, [pc, #88]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d10c      	bne.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	4313      	orrs	r3, r2
 8006008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400
 8006038:	40000400 	.word	0x40000400
 800603c:	40000800 	.word	0x40000800
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40014000 	.word	0x40014000
 8006048:	40001800 	.word	0x40001800

0800604c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e040      	b.n	800611c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fb fd8c 	bl	8001bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2224      	movs	r2, #36	; 0x24
 80060b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa94 	bl	80065f4 <UART_SetConfig>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e022      	b.n	800611c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fcec 	bl	8006abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fd73 	bl	8006c00 <UART_CheckIdleState>
 800611a:	4603      	mov	r3, r0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006136:	2b20      	cmp	r3, #32
 8006138:	d12c      	bne.n	8006194 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_UART_Receive_IT+0x22>
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e025      	b.n	8006196 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_UART_Receive_IT+0x34>
 8006154:	2302      	movs	r3, #2
 8006156:	e01e      	b.n	8006196 <HAL_UART_Receive_IT+0x72>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006182:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	461a      	mov	r2, r3
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fdfe 	bl	8006d8c <UART_Start_Receive_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	e000      	b.n	8006196 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80061c6:	4013      	ands	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d113      	bne.n	80061f8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00e      	beq.n	80061f8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d009      	beq.n	80061f8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 81cd 	beq.w	8006588 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
      }
      return;
 80061f6:	e1c7      	b.n	8006588 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80e8 	beq.w	80063d0 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4b6e      	ldr	r3, [pc, #440]	; (80063c8 <HAL_UART_IRQHandler+0x228>)
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80dd 	beq.w	80063d0 <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d010      	beq.n	8006242 <HAL_UART_IRQHandler+0xa2>
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2201      	movs	r2, #1
 8006230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006238:	f043 0201 	orr.w	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d010      	beq.n	800626e <HAL_UART_IRQHandler+0xce>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2202      	movs	r2, #2
 800625c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006264:	f043 0204 	orr.w	r2, r3, #4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <HAL_UART_IRQHandler+0xfa>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2204      	movs	r2, #4
 8006288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006290:	f043 0202 	orr.w	r2, r3, #2
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d104      	bne.n	80062b8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2208      	movs	r2, #8
 80062be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c6:	f043 0208 	orr.w	r2, r3, #8
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d011      	beq.n	80062fe <HAL_UART_IRQHandler+0x15e>
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f4:	f043 0220 	orr.w	r2, r3, #32
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8141 	beq.w	800658c <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006334:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d004      	beq.n	800634e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800634a:	2b00      	cmp	r3, #0
 800634c:	d031      	beq.n	80063b2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fda4 	bl	8006e9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d123      	bne.n	80063aa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006370:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006376:	2b00      	cmp	r3, #0
 8006378:	d013      	beq.n	80063a2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637e:	4a13      	ldr	r2, [pc, #76]	; (80063cc <HAL_UART_IRQHandler+0x22c>)
 8006380:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	4618      	mov	r0, r3
 8006388:	f7fc fdbd 	bl	8002f06 <HAL_DMA_Abort_IT>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d017      	beq.n	80063c2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	e00f      	b.n	80063c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f906 	bl	80065b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	e00b      	b.n	80063c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f902 	bl	80065b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	e007      	b.n	80063c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8fe 	bl	80065b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063c0:	e0e4      	b.n	800658c <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c2:	bf00      	nop
    return;
 80063c4:	e0e2      	b.n	800658c <HAL_UART_IRQHandler+0x3ec>
 80063c6:	bf00      	nop
 80063c8:	04000120 	.word	0x04000120
 80063cc:	08006efb 	.word	0x08006efb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	f040 80a3 	bne.w	8006520 <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 809d 	beq.w	8006520 <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8097 	beq.w	8006520 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2210      	movs	r2, #16
 80063f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	d152      	bne.n	80064ae <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006412:	893b      	ldrh	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 80bb 	beq.w	8006590 <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006420:	893a      	ldrh	r2, [r7, #8]
 8006422:	429a      	cmp	r2, r3
 8006424:	f080 80b4 	bcs.w	8006590 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	893a      	ldrh	r2, [r7, #8]
 800642c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643a:	d02a      	beq.n	8006492 <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800644a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0201 	bic.w	r2, r2, #1
 800645a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0210 	bic.w	r2, r2, #16
 8006486:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	4618      	mov	r0, r3
 800648e:	f7fc fcca 	bl	8002e26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f88e 	bl	80065c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064ac:	e070      	b.n	8006590 <HAL_UART_IRQHandler+0x3f0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d063      	beq.n	8006594 <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 80064cc:	897b      	ldrh	r3, [r7, #10]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d060      	beq.n	8006594 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064e0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0210 	bic.w	r2, r2, #16
 8006512:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006514:	897b      	ldrh	r3, [r7, #10]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f855 	bl	80065c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800651e:	e039      	b.n	8006594 <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00d      	beq.n	8006546 <HAL_UART_IRQHandler+0x3a6>
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800653c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f84e 	bl	80065e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006544:	e029      	b.n	800659a <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00d      	beq.n	800656c <HAL_UART_IRQHandler+0x3cc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_UART_IRQHandler+0x3cc>
  {
    if (huart->TxISR != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01a      	beq.n	8006598 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
    }
    return;
 800656a:	e015      	b.n	8006598 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d011      	beq.n	800659a <HAL_UART_IRQHandler+0x3fa>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00c      	beq.n	800659a <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fcd0 	bl	8006f26 <UART_EndTransmit_IT>
    return;
 8006586:	e008      	b.n	800659a <HAL_UART_IRQHandler+0x3fa>
      return;
 8006588:	bf00      	nop
 800658a:	e006      	b.n	800659a <HAL_UART_IRQHandler+0x3fa>
    return;
 800658c:	bf00      	nop
 800658e:	e004      	b.n	800659a <HAL_UART_IRQHandler+0x3fa>
      return;
 8006590:	bf00      	nop
 8006592:	e002      	b.n	800659a <HAL_UART_IRQHandler+0x3fa>
      return;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <HAL_UART_IRQHandler+0x3fa>
    return;
 8006598:	bf00      	nop
  }

}
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4ba6      	ldr	r3, [pc, #664]	; (80068b8 <UART_SetConfig+0x2c4>)
 8006620:	4013      	ands	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	6979      	ldr	r1, [r7, #20]
 8006628:	430b      	orrs	r3, r1
 800662a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a94      	ldr	r2, [pc, #592]	; (80068bc <UART_SetConfig+0x2c8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d120      	bne.n	80066b2 <UART_SetConfig+0xbe>
 8006670:	4b93      	ldr	r3, [pc, #588]	; (80068c0 <UART_SetConfig+0x2cc>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b03      	cmp	r3, #3
 800667c:	d816      	bhi.n	80066ac <UART_SetConfig+0xb8>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0x90>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	08006695 	.word	0x08006695
 8006688:	080066a1 	.word	0x080066a1
 800668c:	0800669b 	.word	0x0800669b
 8006690:	080066a7 	.word	0x080066a7
 8006694:	2301      	movs	r3, #1
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e150      	b.n	800693c <UART_SetConfig+0x348>
 800669a:	2302      	movs	r3, #2
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e14d      	b.n	800693c <UART_SetConfig+0x348>
 80066a0:	2304      	movs	r3, #4
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e14a      	b.n	800693c <UART_SetConfig+0x348>
 80066a6:	2308      	movs	r3, #8
 80066a8:	77fb      	strb	r3, [r7, #31]
 80066aa:	e147      	b.n	800693c <UART_SetConfig+0x348>
 80066ac:	2310      	movs	r3, #16
 80066ae:	77fb      	strb	r3, [r7, #31]
 80066b0:	e144      	b.n	800693c <UART_SetConfig+0x348>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a83      	ldr	r2, [pc, #524]	; (80068c4 <UART_SetConfig+0x2d0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d132      	bne.n	8006722 <UART_SetConfig+0x12e>
 80066bc:	4b80      	ldr	r3, [pc, #512]	; (80068c0 <UART_SetConfig+0x2cc>)
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c2:	f003 030c 	and.w	r3, r3, #12
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d828      	bhi.n	800671c <UART_SetConfig+0x128>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0xdc>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	08006705 	.word	0x08006705
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	08006711 	.word	0x08006711
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	0800671d 	.word	0x0800671d
 80066ec:	0800671d 	.word	0x0800671d
 80066f0:	0800670b 	.word	0x0800670b
 80066f4:	0800671d 	.word	0x0800671d
 80066f8:	0800671d 	.word	0x0800671d
 80066fc:	0800671d 	.word	0x0800671d
 8006700:	08006717 	.word	0x08006717
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e118      	b.n	800693c <UART_SetConfig+0x348>
 800670a:	2302      	movs	r3, #2
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e115      	b.n	800693c <UART_SetConfig+0x348>
 8006710:	2304      	movs	r3, #4
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e112      	b.n	800693c <UART_SetConfig+0x348>
 8006716:	2308      	movs	r3, #8
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e10f      	b.n	800693c <UART_SetConfig+0x348>
 800671c:	2310      	movs	r3, #16
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e10c      	b.n	800693c <UART_SetConfig+0x348>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a68      	ldr	r2, [pc, #416]	; (80068c8 <UART_SetConfig+0x2d4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d120      	bne.n	800676e <UART_SetConfig+0x17a>
 800672c:	4b64      	ldr	r3, [pc, #400]	; (80068c0 <UART_SetConfig+0x2cc>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006736:	2b30      	cmp	r3, #48	; 0x30
 8006738:	d013      	beq.n	8006762 <UART_SetConfig+0x16e>
 800673a:	2b30      	cmp	r3, #48	; 0x30
 800673c:	d814      	bhi.n	8006768 <UART_SetConfig+0x174>
 800673e:	2b20      	cmp	r3, #32
 8006740:	d009      	beq.n	8006756 <UART_SetConfig+0x162>
 8006742:	2b20      	cmp	r3, #32
 8006744:	d810      	bhi.n	8006768 <UART_SetConfig+0x174>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <UART_SetConfig+0x15c>
 800674a:	2b10      	cmp	r3, #16
 800674c:	d006      	beq.n	800675c <UART_SetConfig+0x168>
 800674e:	e00b      	b.n	8006768 <UART_SetConfig+0x174>
 8006750:	2300      	movs	r3, #0
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e0f2      	b.n	800693c <UART_SetConfig+0x348>
 8006756:	2302      	movs	r3, #2
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e0ef      	b.n	800693c <UART_SetConfig+0x348>
 800675c:	2304      	movs	r3, #4
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e0ec      	b.n	800693c <UART_SetConfig+0x348>
 8006762:	2308      	movs	r3, #8
 8006764:	77fb      	strb	r3, [r7, #31]
 8006766:	e0e9      	b.n	800693c <UART_SetConfig+0x348>
 8006768:	2310      	movs	r3, #16
 800676a:	77fb      	strb	r3, [r7, #31]
 800676c:	e0e6      	b.n	800693c <UART_SetConfig+0x348>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a56      	ldr	r2, [pc, #344]	; (80068cc <UART_SetConfig+0x2d8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d120      	bne.n	80067ba <UART_SetConfig+0x1c6>
 8006778:	4b51      	ldr	r3, [pc, #324]	; (80068c0 <UART_SetConfig+0x2cc>)
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006782:	2bc0      	cmp	r3, #192	; 0xc0
 8006784:	d013      	beq.n	80067ae <UART_SetConfig+0x1ba>
 8006786:	2bc0      	cmp	r3, #192	; 0xc0
 8006788:	d814      	bhi.n	80067b4 <UART_SetConfig+0x1c0>
 800678a:	2b80      	cmp	r3, #128	; 0x80
 800678c:	d009      	beq.n	80067a2 <UART_SetConfig+0x1ae>
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d810      	bhi.n	80067b4 <UART_SetConfig+0x1c0>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <UART_SetConfig+0x1a8>
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d006      	beq.n	80067a8 <UART_SetConfig+0x1b4>
 800679a:	e00b      	b.n	80067b4 <UART_SetConfig+0x1c0>
 800679c:	2300      	movs	r3, #0
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e0cc      	b.n	800693c <UART_SetConfig+0x348>
 80067a2:	2302      	movs	r3, #2
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e0c9      	b.n	800693c <UART_SetConfig+0x348>
 80067a8:	2304      	movs	r3, #4
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e0c6      	b.n	800693c <UART_SetConfig+0x348>
 80067ae:	2308      	movs	r3, #8
 80067b0:	77fb      	strb	r3, [r7, #31]
 80067b2:	e0c3      	b.n	800693c <UART_SetConfig+0x348>
 80067b4:	2310      	movs	r3, #16
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e0c0      	b.n	800693c <UART_SetConfig+0x348>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a44      	ldr	r2, [pc, #272]	; (80068d0 <UART_SetConfig+0x2dc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d125      	bne.n	8006810 <UART_SetConfig+0x21c>
 80067c4:	4b3e      	ldr	r3, [pc, #248]	; (80068c0 <UART_SetConfig+0x2cc>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d2:	d017      	beq.n	8006804 <UART_SetConfig+0x210>
 80067d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d8:	d817      	bhi.n	800680a <UART_SetConfig+0x216>
 80067da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067de:	d00b      	beq.n	80067f8 <UART_SetConfig+0x204>
 80067e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e4:	d811      	bhi.n	800680a <UART_SetConfig+0x216>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <UART_SetConfig+0x1fe>
 80067ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ee:	d006      	beq.n	80067fe <UART_SetConfig+0x20a>
 80067f0:	e00b      	b.n	800680a <UART_SetConfig+0x216>
 80067f2:	2300      	movs	r3, #0
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e0a1      	b.n	800693c <UART_SetConfig+0x348>
 80067f8:	2302      	movs	r3, #2
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e09e      	b.n	800693c <UART_SetConfig+0x348>
 80067fe:	2304      	movs	r3, #4
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	e09b      	b.n	800693c <UART_SetConfig+0x348>
 8006804:	2308      	movs	r3, #8
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e098      	b.n	800693c <UART_SetConfig+0x348>
 800680a:	2310      	movs	r3, #16
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e095      	b.n	800693c <UART_SetConfig+0x348>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a2f      	ldr	r2, [pc, #188]	; (80068d4 <UART_SetConfig+0x2e0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d125      	bne.n	8006866 <UART_SetConfig+0x272>
 800681a:	4b29      	ldr	r3, [pc, #164]	; (80068c0 <UART_SetConfig+0x2cc>)
 800681c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006828:	d017      	beq.n	800685a <UART_SetConfig+0x266>
 800682a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800682e:	d817      	bhi.n	8006860 <UART_SetConfig+0x26c>
 8006830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006834:	d00b      	beq.n	800684e <UART_SetConfig+0x25a>
 8006836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683a:	d811      	bhi.n	8006860 <UART_SetConfig+0x26c>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <UART_SetConfig+0x254>
 8006840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006844:	d006      	beq.n	8006854 <UART_SetConfig+0x260>
 8006846:	e00b      	b.n	8006860 <UART_SetConfig+0x26c>
 8006848:	2301      	movs	r3, #1
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	e076      	b.n	800693c <UART_SetConfig+0x348>
 800684e:	2302      	movs	r3, #2
 8006850:	77fb      	strb	r3, [r7, #31]
 8006852:	e073      	b.n	800693c <UART_SetConfig+0x348>
 8006854:	2304      	movs	r3, #4
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	e070      	b.n	800693c <UART_SetConfig+0x348>
 800685a:	2308      	movs	r3, #8
 800685c:	77fb      	strb	r3, [r7, #31]
 800685e:	e06d      	b.n	800693c <UART_SetConfig+0x348>
 8006860:	2310      	movs	r3, #16
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e06a      	b.n	800693c <UART_SetConfig+0x348>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1b      	ldr	r2, [pc, #108]	; (80068d8 <UART_SetConfig+0x2e4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d138      	bne.n	80068e2 <UART_SetConfig+0x2ee>
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <UART_SetConfig+0x2cc>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006876:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800687a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800687e:	d017      	beq.n	80068b0 <UART_SetConfig+0x2bc>
 8006880:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006884:	d82a      	bhi.n	80068dc <UART_SetConfig+0x2e8>
 8006886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688a:	d00b      	beq.n	80068a4 <UART_SetConfig+0x2b0>
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d824      	bhi.n	80068dc <UART_SetConfig+0x2e8>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <UART_SetConfig+0x2aa>
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689a:	d006      	beq.n	80068aa <UART_SetConfig+0x2b6>
 800689c:	e01e      	b.n	80068dc <UART_SetConfig+0x2e8>
 800689e:	2300      	movs	r3, #0
 80068a0:	77fb      	strb	r3, [r7, #31]
 80068a2:	e04b      	b.n	800693c <UART_SetConfig+0x348>
 80068a4:	2302      	movs	r3, #2
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e048      	b.n	800693c <UART_SetConfig+0x348>
 80068aa:	2304      	movs	r3, #4
 80068ac:	77fb      	strb	r3, [r7, #31]
 80068ae:	e045      	b.n	800693c <UART_SetConfig+0x348>
 80068b0:	2308      	movs	r3, #8
 80068b2:	77fb      	strb	r3, [r7, #31]
 80068b4:	e042      	b.n	800693c <UART_SetConfig+0x348>
 80068b6:	bf00      	nop
 80068b8:	efff69f3 	.word	0xefff69f3
 80068bc:	40011000 	.word	0x40011000
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40004400 	.word	0x40004400
 80068c8:	40004800 	.word	0x40004800
 80068cc:	40004c00 	.word	0x40004c00
 80068d0:	40005000 	.word	0x40005000
 80068d4:	40011400 	.word	0x40011400
 80068d8:	40007800 	.word	0x40007800
 80068dc:	2310      	movs	r3, #16
 80068de:	77fb      	strb	r3, [r7, #31]
 80068e0:	e02c      	b.n	800693c <UART_SetConfig+0x348>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a72      	ldr	r2, [pc, #456]	; (8006ab0 <UART_SetConfig+0x4bc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d125      	bne.n	8006938 <UART_SetConfig+0x344>
 80068ec:	4b71      	ldr	r3, [pc, #452]	; (8006ab4 <UART_SetConfig+0x4c0>)
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068fa:	d017      	beq.n	800692c <UART_SetConfig+0x338>
 80068fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006900:	d817      	bhi.n	8006932 <UART_SetConfig+0x33e>
 8006902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006906:	d00b      	beq.n	8006920 <UART_SetConfig+0x32c>
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690c:	d811      	bhi.n	8006932 <UART_SetConfig+0x33e>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <UART_SetConfig+0x326>
 8006912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006916:	d006      	beq.n	8006926 <UART_SetConfig+0x332>
 8006918:	e00b      	b.n	8006932 <UART_SetConfig+0x33e>
 800691a:	2300      	movs	r3, #0
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e00d      	b.n	800693c <UART_SetConfig+0x348>
 8006920:	2302      	movs	r3, #2
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e00a      	b.n	800693c <UART_SetConfig+0x348>
 8006926:	2304      	movs	r3, #4
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e007      	b.n	800693c <UART_SetConfig+0x348>
 800692c:	2308      	movs	r3, #8
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e004      	b.n	800693c <UART_SetConfig+0x348>
 8006932:	2310      	movs	r3, #16
 8006934:	77fb      	strb	r3, [r7, #31]
 8006936:	e001      	b.n	800693c <UART_SetConfig+0x348>
 8006938:	2310      	movs	r3, #16
 800693a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006944:	d15c      	bne.n	8006a00 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8006946:	7ffb      	ldrb	r3, [r7, #31]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d828      	bhi.n	800699e <UART_SetConfig+0x3aa>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <UART_SetConfig+0x360>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006979 	.word	0x08006979
 8006958:	08006981 	.word	0x08006981
 800695c:	08006989 	.word	0x08006989
 8006960:	0800699f 	.word	0x0800699f
 8006964:	0800698f 	.word	0x0800698f
 8006968:	0800699f 	.word	0x0800699f
 800696c:	0800699f 	.word	0x0800699f
 8006970:	0800699f 	.word	0x0800699f
 8006974:	08006997 	.word	0x08006997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006978:	f7fd fec4 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 800697c:	61b8      	str	r0, [r7, #24]
        break;
 800697e:	e013      	b.n	80069a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006980:	f7fd fed4 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8006984:	61b8      	str	r0, [r7, #24]
        break;
 8006986:	e00f      	b.n	80069a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006988:	4b4b      	ldr	r3, [pc, #300]	; (8006ab8 <UART_SetConfig+0x4c4>)
 800698a:	61bb      	str	r3, [r7, #24]
        break;
 800698c:	e00c      	b.n	80069a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698e:	f7fd fda7 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8006992:	61b8      	str	r0, [r7, #24]
        break;
 8006994:	e008      	b.n	80069a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800699a:	61bb      	str	r3, [r7, #24]
        break;
 800699c:	e004      	b.n	80069a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	77bb      	strb	r3, [r7, #30]
        break;
 80069a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d074      	beq.n	8006a98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	005a      	lsls	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	441a      	add	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b0f      	cmp	r3, #15
 80069ca:	d916      	bls.n	80069fa <UART_SetConfig+0x406>
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d2:	d212      	bcs.n	80069fa <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f023 030f 	bic.w	r3, r3, #15
 80069dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	89fb      	ldrh	r3, [r7, #14]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	89fa      	ldrh	r2, [r7, #14]
 80069f6:	60da      	str	r2, [r3, #12]
 80069f8:	e04e      	b.n	8006a98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	77bb      	strb	r3, [r7, #30]
 80069fe:	e04b      	b.n	8006a98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a00:	7ffb      	ldrb	r3, [r7, #31]
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d827      	bhi.n	8006a56 <UART_SetConfig+0x462>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x418>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	08006a57 	.word	0x08006a57
 8006a1c:	08006a47 	.word	0x08006a47
 8006a20:	08006a57 	.word	0x08006a57
 8006a24:	08006a57 	.word	0x08006a57
 8006a28:	08006a57 	.word	0x08006a57
 8006a2c:	08006a4f 	.word	0x08006a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a30:	f7fd fe68 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8006a34:	61b8      	str	r0, [r7, #24]
        break;
 8006a36:	e013      	b.n	8006a60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a38:	f7fd fe78 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8006a3c:	61b8      	str	r0, [r7, #24]
        break;
 8006a3e:	e00f      	b.n	8006a60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a40:	4b1d      	ldr	r3, [pc, #116]	; (8006ab8 <UART_SetConfig+0x4c4>)
 8006a42:	61bb      	str	r3, [r7, #24]
        break;
 8006a44:	e00c      	b.n	8006a60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a46:	f7fd fd4b 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8006a4a:	61b8      	str	r0, [r7, #24]
        break;
 8006a4c:	e008      	b.n	8006a60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a52:	61bb      	str	r3, [r7, #24]
        break;
 8006a54:	e004      	b.n	8006a60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a5e:	bf00      	nop
    }

    if (pclk != 0U)
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d018      	beq.n	8006a98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	085a      	lsrs	r2, r3, #1
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	441a      	add	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d908      	bls.n	8006a94 <UART_SetConfig+0x4a0>
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a88:	d204      	bcs.n	8006a94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	60da      	str	r2, [r3, #12]
 8006a92:	e001      	b.n	8006a98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006aa4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40007c00 	.word	0x40007c00
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	00f42400 	.word	0x00f42400

08006abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01a      	beq.n	8006bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bba:	d10a      	bne.n	8006bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c10:	f7fb ffc8 	bl	8002ba4 <HAL_GetTick>
 8006c14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d10e      	bne.n	8006c42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f82d 	bl	8006c92 <UART_WaitOnFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e023      	b.n	8006c8a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d10e      	bne.n	8006c6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f817 	bl	8006c92 <UART_WaitOnFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e00d      	b.n	8006c8a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca2:	e05e      	b.n	8006d62 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d05a      	beq.n	8006d62 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cac:	f7fb ff7a 	bl	8002ba4 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d302      	bcc.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d11b      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cd0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e043      	b.n	8006d82 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d02c      	beq.n	8006d62 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d16:	d124      	bne.n	8006d62 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d30:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0201 	bic.w	r2, r2, #1
 8006d40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e00f      	b.n	8006d82 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	bf0c      	ite	eq
 8006d72:	2301      	moveq	r3, #1
 8006d74:	2300      	movne	r3, #0
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d091      	beq.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbe:	d10e      	bne.n	8006dde <UART_Start_Receive_IT+0x52>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <UART_Start_Receive_IT+0x48>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dd2:	e02d      	b.n	8006e30 <UART_Start_Receive_IT+0xa4>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	22ff      	movs	r2, #255	; 0xff
 8006dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ddc:	e028      	b.n	8006e30 <UART_Start_Receive_IT+0xa4>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10d      	bne.n	8006e02 <UART_Start_Receive_IT+0x76>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <UART_Start_Receive_IT+0x6c>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	22ff      	movs	r2, #255	; 0xff
 8006df2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006df6:	e01b      	b.n	8006e30 <UART_Start_Receive_IT+0xa4>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	227f      	movs	r2, #127	; 0x7f
 8006dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e00:	e016      	b.n	8006e30 <UART_Start_Receive_IT+0xa4>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e0a:	d10d      	bne.n	8006e28 <UART_Start_Receive_IT+0x9c>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d104      	bne.n	8006e1e <UART_Start_Receive_IT+0x92>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	227f      	movs	r2, #127	; 0x7f
 8006e18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e1c:	e008      	b.n	8006e30 <UART_Start_Receive_IT+0xa4>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	223f      	movs	r2, #63	; 0x3f
 8006e22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e26:	e003      	b.n	8006e30 <UART_Start_Receive_IT+0xa4>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2222      	movs	r2, #34	; 0x22
 8006e3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0201 	orr.w	r2, r2, #1
 8006e4c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e56:	d107      	bne.n	8006e68 <UART_Start_Receive_IT+0xdc>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <UART_Start_Receive_IT+0x108>)
 8006e64:	665a      	str	r2, [r3, #100]	; 0x64
 8006e66:	e002      	b.n	8006e6e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4a0b      	ldr	r2, [pc, #44]	; (8006e98 <UART_Start_Receive_IT+0x10c>)
 8006e6c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006e84:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	0800702d 	.word	0x0800702d
 8006e98:	08006f59 	.word	0x08006f59

08006e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eb2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d107      	bne.n	8006edc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0210 	bic.w	r2, r2, #16
 8006eda:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff fb4b 	bl	80065b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1e:	bf00      	nop
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff fb28 	bl	80065a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f66:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6c:	2b22      	cmp	r3, #34	; 0x22
 8006f6e:	d151      	bne.n	8007014 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f78:	89bb      	ldrh	r3, [r7, #12]
 8006f7a:	b2d9      	uxtb	r1, r3
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	400a      	ands	r2, r1
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d138      	bne.n	8007024 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fc0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d10f      	bne.n	8007006 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0210 	bic.w	r2, r2, #16
 8006ff4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fae2 	bl	80065c8 <HAL_UARTEx_RxEventCallback>
 8007004:	e002      	b.n	800700c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fa fa60 	bl	80014cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007012:	e007      	b.n	8007024 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0208 	orr.w	r2, r2, #8
 8007022:	619a      	str	r2, [r3, #24]
}
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800703a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007040:	2b22      	cmp	r3, #34	; 0x22
 8007042:	d151      	bne.n	80070e8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007050:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007052:	89ba      	ldrh	r2, [r7, #12]
 8007054:	89fb      	ldrh	r3, [r7, #14]
 8007056:	4013      	ands	r3, r2
 8007058:	b29a      	uxth	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d138      	bne.n	80070f8 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007094:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d10f      	bne.n	80070da <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0210 	bic.w	r2, r2, #16
 80070c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fa78 	bl	80065c8 <HAL_UARTEx_RxEventCallback>
 80070d8:	e002      	b.n	80070e0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fa f9f6 	bl	80014cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070e6:	e007      	b.n	80070f8 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0208 	orr.w	r2, r2, #8
 80070f6:	619a      	str	r2, [r3, #24]
}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <__cvt>:
 8007100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007102:	ed2d 8b02 	vpush	{d8}
 8007106:	eeb0 8b40 	vmov.f64	d8, d0
 800710a:	b085      	sub	sp, #20
 800710c:	4617      	mov	r7, r2
 800710e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007110:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007112:	ee18 2a90 	vmov	r2, s17
 8007116:	f025 0520 	bic.w	r5, r5, #32
 800711a:	2a00      	cmp	r2, #0
 800711c:	bfb6      	itet	lt
 800711e:	222d      	movlt	r2, #45	; 0x2d
 8007120:	2200      	movge	r2, #0
 8007122:	eeb1 8b40 	vneglt.f64	d8, d0
 8007126:	2d46      	cmp	r5, #70	; 0x46
 8007128:	460c      	mov	r4, r1
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	d004      	beq.n	8007138 <__cvt+0x38>
 800712e:	2d45      	cmp	r5, #69	; 0x45
 8007130:	d100      	bne.n	8007134 <__cvt+0x34>
 8007132:	3401      	adds	r4, #1
 8007134:	2102      	movs	r1, #2
 8007136:	e000      	b.n	800713a <__cvt+0x3a>
 8007138:	2103      	movs	r1, #3
 800713a:	ab03      	add	r3, sp, #12
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	ab02      	add	r3, sp, #8
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	4622      	mov	r2, r4
 8007144:	4633      	mov	r3, r6
 8007146:	eeb0 0b48 	vmov.f64	d0, d8
 800714a:	f000 fe2d 	bl	8007da8 <_dtoa_r>
 800714e:	2d47      	cmp	r5, #71	; 0x47
 8007150:	d101      	bne.n	8007156 <__cvt+0x56>
 8007152:	07fb      	lsls	r3, r7, #31
 8007154:	d51a      	bpl.n	800718c <__cvt+0x8c>
 8007156:	2d46      	cmp	r5, #70	; 0x46
 8007158:	eb00 0204 	add.w	r2, r0, r4
 800715c:	d10c      	bne.n	8007178 <__cvt+0x78>
 800715e:	7803      	ldrb	r3, [r0, #0]
 8007160:	2b30      	cmp	r3, #48	; 0x30
 8007162:	d107      	bne.n	8007174 <__cvt+0x74>
 8007164:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716c:	bf1c      	itt	ne
 800716e:	f1c4 0401 	rsbne	r4, r4, #1
 8007172:	6034      	strne	r4, [r6, #0]
 8007174:	6833      	ldr	r3, [r6, #0]
 8007176:	441a      	add	r2, r3
 8007178:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800717c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007180:	bf08      	it	eq
 8007182:	9203      	streq	r2, [sp, #12]
 8007184:	2130      	movs	r1, #48	; 0x30
 8007186:	9b03      	ldr	r3, [sp, #12]
 8007188:	4293      	cmp	r3, r2
 800718a:	d307      	bcc.n	800719c <__cvt+0x9c>
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007190:	1a1b      	subs	r3, r3, r0
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	b005      	add	sp, #20
 8007196:	ecbd 8b02 	vpop	{d8}
 800719a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719c:	1c5c      	adds	r4, r3, #1
 800719e:	9403      	str	r4, [sp, #12]
 80071a0:	7019      	strb	r1, [r3, #0]
 80071a2:	e7f0      	b.n	8007186 <__cvt+0x86>

080071a4 <__exponent>:
 80071a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071a6:	4603      	mov	r3, r0
 80071a8:	2900      	cmp	r1, #0
 80071aa:	bfb8      	it	lt
 80071ac:	4249      	neglt	r1, r1
 80071ae:	f803 2b02 	strb.w	r2, [r3], #2
 80071b2:	bfb4      	ite	lt
 80071b4:	222d      	movlt	r2, #45	; 0x2d
 80071b6:	222b      	movge	r2, #43	; 0x2b
 80071b8:	2909      	cmp	r1, #9
 80071ba:	7042      	strb	r2, [r0, #1]
 80071bc:	dd2a      	ble.n	8007214 <__exponent+0x70>
 80071be:	f10d 0207 	add.w	r2, sp, #7
 80071c2:	4617      	mov	r7, r2
 80071c4:	260a      	movs	r6, #10
 80071c6:	4694      	mov	ip, r2
 80071c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80071cc:	fb06 1415 	mls	r4, r6, r5, r1
 80071d0:	3430      	adds	r4, #48	; 0x30
 80071d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80071d6:	460c      	mov	r4, r1
 80071d8:	2c63      	cmp	r4, #99	; 0x63
 80071da:	f102 32ff 	add.w	r2, r2, #4294967295
 80071de:	4629      	mov	r1, r5
 80071e0:	dcf1      	bgt.n	80071c6 <__exponent+0x22>
 80071e2:	3130      	adds	r1, #48	; 0x30
 80071e4:	f1ac 0402 	sub.w	r4, ip, #2
 80071e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80071ec:	1c41      	adds	r1, r0, #1
 80071ee:	4622      	mov	r2, r4
 80071f0:	42ba      	cmp	r2, r7
 80071f2:	d30a      	bcc.n	800720a <__exponent+0x66>
 80071f4:	f10d 0209 	add.w	r2, sp, #9
 80071f8:	eba2 020c 	sub.w	r2, r2, ip
 80071fc:	42bc      	cmp	r4, r7
 80071fe:	bf88      	it	hi
 8007200:	2200      	movhi	r2, #0
 8007202:	4413      	add	r3, r2
 8007204:	1a18      	subs	r0, r3, r0
 8007206:	b003      	add	sp, #12
 8007208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800720e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007212:	e7ed      	b.n	80071f0 <__exponent+0x4c>
 8007214:	2330      	movs	r3, #48	; 0x30
 8007216:	3130      	adds	r1, #48	; 0x30
 8007218:	7083      	strb	r3, [r0, #2]
 800721a:	70c1      	strb	r1, [r0, #3]
 800721c:	1d03      	adds	r3, r0, #4
 800721e:	e7f1      	b.n	8007204 <__exponent+0x60>

08007220 <_printf_float>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	b08b      	sub	sp, #44	; 0x2c
 8007226:	460c      	mov	r4, r1
 8007228:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800722c:	4616      	mov	r6, r2
 800722e:	461f      	mov	r7, r3
 8007230:	4605      	mov	r5, r0
 8007232:	f000 fcbb 	bl	8007bac <_localeconv_r>
 8007236:	f8d0 b000 	ldr.w	fp, [r0]
 800723a:	4658      	mov	r0, fp
 800723c:	f7f9 f850 	bl	80002e0 <strlen>
 8007240:	2300      	movs	r3, #0
 8007242:	9308      	str	r3, [sp, #32]
 8007244:	f8d8 3000 	ldr.w	r3, [r8]
 8007248:	f894 9018 	ldrb.w	r9, [r4, #24]
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	3307      	adds	r3, #7
 8007250:	f023 0307 	bic.w	r3, r3, #7
 8007254:	f103 0108 	add.w	r1, r3, #8
 8007258:	f8c8 1000 	str.w	r1, [r8]
 800725c:	ed93 0b00 	vldr	d0, [r3]
 8007260:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80074c0 <_printf_float+0x2a0>
 8007264:	eeb0 7bc0 	vabs.f64	d7, d0
 8007268:	eeb4 7b46 	vcmp.f64	d7, d6
 800726c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007270:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8007274:	4682      	mov	sl, r0
 8007276:	dd24      	ble.n	80072c2 <_printf_float+0xa2>
 8007278:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800727c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007280:	d502      	bpl.n	8007288 <_printf_float+0x68>
 8007282:	232d      	movs	r3, #45	; 0x2d
 8007284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007288:	498f      	ldr	r1, [pc, #572]	; (80074c8 <_printf_float+0x2a8>)
 800728a:	4b90      	ldr	r3, [pc, #576]	; (80074cc <_printf_float+0x2ac>)
 800728c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007290:	bf94      	ite	ls
 8007292:	4688      	movls	r8, r1
 8007294:	4698      	movhi	r8, r3
 8007296:	2303      	movs	r3, #3
 8007298:	6123      	str	r3, [r4, #16]
 800729a:	f022 0204 	bic.w	r2, r2, #4
 800729e:	2300      	movs	r3, #0
 80072a0:	6022      	str	r2, [r4, #0]
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	9700      	str	r7, [sp, #0]
 80072a6:	4633      	mov	r3, r6
 80072a8:	aa09      	add	r2, sp, #36	; 0x24
 80072aa:	4621      	mov	r1, r4
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 f9d1 	bl	8007654 <_printf_common>
 80072b2:	3001      	adds	r0, #1
 80072b4:	f040 808a 	bne.w	80073cc <_printf_float+0x1ac>
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	b00b      	add	sp, #44	; 0x2c
 80072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80072c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ca:	d709      	bvc.n	80072e0 <_printf_float+0xc0>
 80072cc:	ee10 3a90 	vmov	r3, s1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfbc      	itt	lt
 80072d4:	232d      	movlt	r3, #45	; 0x2d
 80072d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072da:	497d      	ldr	r1, [pc, #500]	; (80074d0 <_printf_float+0x2b0>)
 80072dc:	4b7d      	ldr	r3, [pc, #500]	; (80074d4 <_printf_float+0x2b4>)
 80072de:	e7d5      	b.n	800728c <_printf_float+0x6c>
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80072e6:	9104      	str	r1, [sp, #16]
 80072e8:	1c59      	adds	r1, r3, #1
 80072ea:	d13c      	bne.n	8007366 <_printf_float+0x146>
 80072ec:	2306      	movs	r3, #6
 80072ee:	6063      	str	r3, [r4, #4]
 80072f0:	2300      	movs	r3, #0
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	ab08      	add	r3, sp, #32
 80072f6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80072fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072fe:	ab07      	add	r3, sp, #28
 8007300:	6861      	ldr	r1, [r4, #4]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	6022      	str	r2, [r4, #0]
 8007306:	f10d 031b 	add.w	r3, sp, #27
 800730a:	4628      	mov	r0, r5
 800730c:	f7ff fef8 	bl	8007100 <__cvt>
 8007310:	9b04      	ldr	r3, [sp, #16]
 8007312:	9907      	ldr	r1, [sp, #28]
 8007314:	2b47      	cmp	r3, #71	; 0x47
 8007316:	4680      	mov	r8, r0
 8007318:	d108      	bne.n	800732c <_printf_float+0x10c>
 800731a:	1cc8      	adds	r0, r1, #3
 800731c:	db02      	blt.n	8007324 <_printf_float+0x104>
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	4299      	cmp	r1, r3
 8007322:	dd41      	ble.n	80073a8 <_printf_float+0x188>
 8007324:	f1a9 0902 	sub.w	r9, r9, #2
 8007328:	fa5f f989 	uxtb.w	r9, r9
 800732c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007330:	d820      	bhi.n	8007374 <_printf_float+0x154>
 8007332:	3901      	subs	r1, #1
 8007334:	464a      	mov	r2, r9
 8007336:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800733a:	9107      	str	r1, [sp, #28]
 800733c:	f7ff ff32 	bl	80071a4 <__exponent>
 8007340:	9a08      	ldr	r2, [sp, #32]
 8007342:	9004      	str	r0, [sp, #16]
 8007344:	1813      	adds	r3, r2, r0
 8007346:	2a01      	cmp	r2, #1
 8007348:	6123      	str	r3, [r4, #16]
 800734a:	dc02      	bgt.n	8007352 <_printf_float+0x132>
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	07d2      	lsls	r2, r2, #31
 8007350:	d501      	bpl.n	8007356 <_printf_float+0x136>
 8007352:	3301      	adds	r3, #1
 8007354:	6123      	str	r3, [r4, #16]
 8007356:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0a2      	beq.n	80072a4 <_printf_float+0x84>
 800735e:	232d      	movs	r3, #45	; 0x2d
 8007360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007364:	e79e      	b.n	80072a4 <_printf_float+0x84>
 8007366:	9904      	ldr	r1, [sp, #16]
 8007368:	2947      	cmp	r1, #71	; 0x47
 800736a:	d1c1      	bne.n	80072f0 <_printf_float+0xd0>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1bf      	bne.n	80072f0 <_printf_float+0xd0>
 8007370:	2301      	movs	r3, #1
 8007372:	e7bc      	b.n	80072ee <_printf_float+0xce>
 8007374:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007378:	d118      	bne.n	80073ac <_printf_float+0x18c>
 800737a:	2900      	cmp	r1, #0
 800737c:	6863      	ldr	r3, [r4, #4]
 800737e:	dd0b      	ble.n	8007398 <_printf_float+0x178>
 8007380:	6121      	str	r1, [r4, #16]
 8007382:	b913      	cbnz	r3, 800738a <_printf_float+0x16a>
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	07d0      	lsls	r0, r2, #31
 8007388:	d502      	bpl.n	8007390 <_printf_float+0x170>
 800738a:	3301      	adds	r3, #1
 800738c:	440b      	add	r3, r1
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	2300      	movs	r3, #0
 8007392:	65a1      	str	r1, [r4, #88]	; 0x58
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	e7de      	b.n	8007356 <_printf_float+0x136>
 8007398:	b913      	cbnz	r3, 80073a0 <_printf_float+0x180>
 800739a:	6822      	ldr	r2, [r4, #0]
 800739c:	07d2      	lsls	r2, r2, #31
 800739e:	d501      	bpl.n	80073a4 <_printf_float+0x184>
 80073a0:	3302      	adds	r3, #2
 80073a2:	e7f4      	b.n	800738e <_printf_float+0x16e>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e7f2      	b.n	800738e <_printf_float+0x16e>
 80073a8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80073ac:	9b08      	ldr	r3, [sp, #32]
 80073ae:	4299      	cmp	r1, r3
 80073b0:	db05      	blt.n	80073be <_printf_float+0x19e>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	6121      	str	r1, [r4, #16]
 80073b6:	07d8      	lsls	r0, r3, #31
 80073b8:	d5ea      	bpl.n	8007390 <_printf_float+0x170>
 80073ba:	1c4b      	adds	r3, r1, #1
 80073bc:	e7e7      	b.n	800738e <_printf_float+0x16e>
 80073be:	2900      	cmp	r1, #0
 80073c0:	bfd4      	ite	le
 80073c2:	f1c1 0202 	rsble	r2, r1, #2
 80073c6:	2201      	movgt	r2, #1
 80073c8:	4413      	add	r3, r2
 80073ca:	e7e0      	b.n	800738e <_printf_float+0x16e>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	055a      	lsls	r2, r3, #21
 80073d0:	d407      	bmi.n	80073e2 <_printf_float+0x1c2>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	4642      	mov	r2, r8
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	d12a      	bne.n	8007436 <_printf_float+0x216>
 80073e0:	e76a      	b.n	80072b8 <_printf_float+0x98>
 80073e2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073e6:	f240 80e0 	bls.w	80075aa <_printf_float+0x38a>
 80073ea:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80073ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f6:	d133      	bne.n	8007460 <_printf_float+0x240>
 80073f8:	4a37      	ldr	r2, [pc, #220]	; (80074d8 <_printf_float+0x2b8>)
 80073fa:	2301      	movs	r3, #1
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f af58 	beq.w	80072b8 <_printf_float+0x98>
 8007408:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800740c:	429a      	cmp	r2, r3
 800740e:	db02      	blt.n	8007416 <_printf_float+0x1f6>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	07d8      	lsls	r0, r3, #31
 8007414:	d50f      	bpl.n	8007436 <_printf_float+0x216>
 8007416:	4653      	mov	r3, sl
 8007418:	465a      	mov	r2, fp
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f af49 	beq.w	80072b8 <_printf_float+0x98>
 8007426:	f04f 0800 	mov.w	r8, #0
 800742a:	f104 091a 	add.w	r9, r4, #26
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	3b01      	subs	r3, #1
 8007432:	4543      	cmp	r3, r8
 8007434:	dc09      	bgt.n	800744a <_printf_float+0x22a>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	079b      	lsls	r3, r3, #30
 800743a:	f100 8106 	bmi.w	800764a <_printf_float+0x42a>
 800743e:	68e0      	ldr	r0, [r4, #12]
 8007440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007442:	4298      	cmp	r0, r3
 8007444:	bfb8      	it	lt
 8007446:	4618      	movlt	r0, r3
 8007448:	e738      	b.n	80072bc <_printf_float+0x9c>
 800744a:	2301      	movs	r3, #1
 800744c:	464a      	mov	r2, r9
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f af2f 	beq.w	80072b8 <_printf_float+0x98>
 800745a:	f108 0801 	add.w	r8, r8, #1
 800745e:	e7e6      	b.n	800742e <_printf_float+0x20e>
 8007460:	9b07      	ldr	r3, [sp, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	dc3a      	bgt.n	80074dc <_printf_float+0x2bc>
 8007466:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <_printf_float+0x2b8>)
 8007468:	2301      	movs	r3, #1
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f af21 	beq.w	80072b8 <_printf_float+0x98>
 8007476:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800747a:	4313      	orrs	r3, r2
 800747c:	d102      	bne.n	8007484 <_printf_float+0x264>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	07d9      	lsls	r1, r3, #31
 8007482:	d5d8      	bpl.n	8007436 <_printf_float+0x216>
 8007484:	4653      	mov	r3, sl
 8007486:	465a      	mov	r2, fp
 8007488:	4631      	mov	r1, r6
 800748a:	4628      	mov	r0, r5
 800748c:	47b8      	blx	r7
 800748e:	3001      	adds	r0, #1
 8007490:	f43f af12 	beq.w	80072b8 <_printf_float+0x98>
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	f104 0a1a 	add.w	sl, r4, #26
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	425b      	negs	r3, r3
 80074a0:	454b      	cmp	r3, r9
 80074a2:	dc01      	bgt.n	80074a8 <_printf_float+0x288>
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	e795      	b.n	80073d4 <_printf_float+0x1b4>
 80074a8:	2301      	movs	r3, #1
 80074aa:	4652      	mov	r2, sl
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	f43f af00 	beq.w	80072b8 <_printf_float+0x98>
 80074b8:	f109 0901 	add.w	r9, r9, #1
 80074bc:	e7ee      	b.n	800749c <_printf_float+0x27c>
 80074be:	bf00      	nop
 80074c0:	ffffffff 	.word	0xffffffff
 80074c4:	7fefffff 	.word	0x7fefffff
 80074c8:	0800faa8 	.word	0x0800faa8
 80074cc:	0800faac 	.word	0x0800faac
 80074d0:	0800fab0 	.word	0x0800fab0
 80074d4:	0800fab4 	.word	0x0800fab4
 80074d8:	0800fab8 	.word	0x0800fab8
 80074dc:	9a08      	ldr	r2, [sp, #32]
 80074de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bfa8      	it	ge
 80074e4:	461a      	movge	r2, r3
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	4691      	mov	r9, r2
 80074ea:	dc38      	bgt.n	800755e <_printf_float+0x33e>
 80074ec:	2300      	movs	r3, #0
 80074ee:	9305      	str	r3, [sp, #20]
 80074f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f4:	f104 021a 	add.w	r2, r4, #26
 80074f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074fa:	9905      	ldr	r1, [sp, #20]
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	eba3 0309 	sub.w	r3, r3, r9
 8007502:	428b      	cmp	r3, r1
 8007504:	dc33      	bgt.n	800756e <_printf_float+0x34e>
 8007506:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800750a:	429a      	cmp	r2, r3
 800750c:	db3c      	blt.n	8007588 <_printf_float+0x368>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	07da      	lsls	r2, r3, #31
 8007512:	d439      	bmi.n	8007588 <_printf_float+0x368>
 8007514:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007518:	eba2 0903 	sub.w	r9, r2, r3
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	4591      	cmp	r9, r2
 8007522:	bfa8      	it	ge
 8007524:	4691      	movge	r9, r2
 8007526:	f1b9 0f00 	cmp.w	r9, #0
 800752a:	dc35      	bgt.n	8007598 <_printf_float+0x378>
 800752c:	f04f 0800 	mov.w	r8, #0
 8007530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007534:	f104 0a1a 	add.w	sl, r4, #26
 8007538:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	eba3 0309 	sub.w	r3, r3, r9
 8007542:	4543      	cmp	r3, r8
 8007544:	f77f af77 	ble.w	8007436 <_printf_float+0x216>
 8007548:	2301      	movs	r3, #1
 800754a:	4652      	mov	r2, sl
 800754c:	4631      	mov	r1, r6
 800754e:	4628      	mov	r0, r5
 8007550:	47b8      	blx	r7
 8007552:	3001      	adds	r0, #1
 8007554:	f43f aeb0 	beq.w	80072b8 <_printf_float+0x98>
 8007558:	f108 0801 	add.w	r8, r8, #1
 800755c:	e7ec      	b.n	8007538 <_printf_float+0x318>
 800755e:	4613      	mov	r3, r2
 8007560:	4631      	mov	r1, r6
 8007562:	4642      	mov	r2, r8
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	3001      	adds	r0, #1
 800756a:	d1bf      	bne.n	80074ec <_printf_float+0x2cc>
 800756c:	e6a4      	b.n	80072b8 <_printf_float+0x98>
 800756e:	2301      	movs	r3, #1
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	9204      	str	r2, [sp, #16]
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	f43f ae9d 	beq.w	80072b8 <_printf_float+0x98>
 800757e:	9b05      	ldr	r3, [sp, #20]
 8007580:	9a04      	ldr	r2, [sp, #16]
 8007582:	3301      	adds	r3, #1
 8007584:	9305      	str	r3, [sp, #20]
 8007586:	e7b7      	b.n	80074f8 <_printf_float+0x2d8>
 8007588:	4653      	mov	r3, sl
 800758a:	465a      	mov	r2, fp
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	d1be      	bne.n	8007514 <_printf_float+0x2f4>
 8007596:	e68f      	b.n	80072b8 <_printf_float+0x98>
 8007598:	9a04      	ldr	r2, [sp, #16]
 800759a:	464b      	mov	r3, r9
 800759c:	4442      	add	r2, r8
 800759e:	4631      	mov	r1, r6
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b8      	blx	r7
 80075a4:	3001      	adds	r0, #1
 80075a6:	d1c1      	bne.n	800752c <_printf_float+0x30c>
 80075a8:	e686      	b.n	80072b8 <_printf_float+0x98>
 80075aa:	9a08      	ldr	r2, [sp, #32]
 80075ac:	2a01      	cmp	r2, #1
 80075ae:	dc01      	bgt.n	80075b4 <_printf_float+0x394>
 80075b0:	07db      	lsls	r3, r3, #31
 80075b2:	d537      	bpl.n	8007624 <_printf_float+0x404>
 80075b4:	2301      	movs	r3, #1
 80075b6:	4642      	mov	r2, r8
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	f43f ae7a 	beq.w	80072b8 <_printf_float+0x98>
 80075c4:	4653      	mov	r3, sl
 80075c6:	465a      	mov	r2, fp
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f ae72 	beq.w	80072b8 <_printf_float+0x98>
 80075d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80075d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	9b08      	ldr	r3, [sp, #32]
 80075e2:	d01a      	beq.n	800761a <_printf_float+0x3fa>
 80075e4:	3b01      	subs	r3, #1
 80075e6:	f108 0201 	add.w	r2, r8, #1
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	d10e      	bne.n	8007612 <_printf_float+0x3f2>
 80075f4:	e660      	b.n	80072b8 <_printf_float+0x98>
 80075f6:	2301      	movs	r3, #1
 80075f8:	464a      	mov	r2, r9
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b8      	blx	r7
 8007600:	3001      	adds	r0, #1
 8007602:	f43f ae59 	beq.w	80072b8 <_printf_float+0x98>
 8007606:	f108 0801 	add.w	r8, r8, #1
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	3b01      	subs	r3, #1
 800760e:	4543      	cmp	r3, r8
 8007610:	dcf1      	bgt.n	80075f6 <_printf_float+0x3d6>
 8007612:	9b04      	ldr	r3, [sp, #16]
 8007614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007618:	e6dd      	b.n	80073d6 <_printf_float+0x1b6>
 800761a:	f04f 0800 	mov.w	r8, #0
 800761e:	f104 091a 	add.w	r9, r4, #26
 8007622:	e7f2      	b.n	800760a <_printf_float+0x3ea>
 8007624:	2301      	movs	r3, #1
 8007626:	4642      	mov	r2, r8
 8007628:	e7df      	b.n	80075ea <_printf_float+0x3ca>
 800762a:	2301      	movs	r3, #1
 800762c:	464a      	mov	r2, r9
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f ae3f 	beq.w	80072b8 <_printf_float+0x98>
 800763a:	f108 0801 	add.w	r8, r8, #1
 800763e:	68e3      	ldr	r3, [r4, #12]
 8007640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007642:	1a5b      	subs	r3, r3, r1
 8007644:	4543      	cmp	r3, r8
 8007646:	dcf0      	bgt.n	800762a <_printf_float+0x40a>
 8007648:	e6f9      	b.n	800743e <_printf_float+0x21e>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	f104 0919 	add.w	r9, r4, #25
 8007652:	e7f4      	b.n	800763e <_printf_float+0x41e>

08007654 <_printf_common>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	4616      	mov	r6, r2
 800765a:	4699      	mov	r9, r3
 800765c:	688a      	ldr	r2, [r1, #8]
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007664:	4293      	cmp	r3, r2
 8007666:	bfb8      	it	lt
 8007668:	4613      	movlt	r3, r2
 800766a:	6033      	str	r3, [r6, #0]
 800766c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007670:	4607      	mov	r7, r0
 8007672:	460c      	mov	r4, r1
 8007674:	b10a      	cbz	r2, 800767a <_printf_common+0x26>
 8007676:	3301      	adds	r3, #1
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	0699      	lsls	r1, r3, #26
 800767e:	bf42      	ittt	mi
 8007680:	6833      	ldrmi	r3, [r6, #0]
 8007682:	3302      	addmi	r3, #2
 8007684:	6033      	strmi	r3, [r6, #0]
 8007686:	6825      	ldr	r5, [r4, #0]
 8007688:	f015 0506 	ands.w	r5, r5, #6
 800768c:	d106      	bne.n	800769c <_printf_common+0x48>
 800768e:	f104 0a19 	add.w	sl, r4, #25
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	6832      	ldr	r2, [r6, #0]
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	42ab      	cmp	r3, r5
 800769a:	dc26      	bgt.n	80076ea <_printf_common+0x96>
 800769c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076a0:	1e13      	subs	r3, r2, #0
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	bf18      	it	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	0692      	lsls	r2, r2, #26
 80076aa:	d42b      	bmi.n	8007704 <_printf_common+0xb0>
 80076ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b0:	4649      	mov	r1, r9
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c0      	blx	r8
 80076b6:	3001      	adds	r0, #1
 80076b8:	d01e      	beq.n	80076f8 <_printf_common+0xa4>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	6922      	ldr	r2, [r4, #16]
 80076be:	f003 0306 	and.w	r3, r3, #6
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	bf02      	ittt	eq
 80076c6:	68e5      	ldreq	r5, [r4, #12]
 80076c8:	6833      	ldreq	r3, [r6, #0]
 80076ca:	1aed      	subeq	r5, r5, r3
 80076cc:	68a3      	ldr	r3, [r4, #8]
 80076ce:	bf0c      	ite	eq
 80076d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d4:	2500      	movne	r5, #0
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bfc4      	itt	gt
 80076da:	1a9b      	subgt	r3, r3, r2
 80076dc:	18ed      	addgt	r5, r5, r3
 80076de:	2600      	movs	r6, #0
 80076e0:	341a      	adds	r4, #26
 80076e2:	42b5      	cmp	r5, r6
 80076e4:	d11a      	bne.n	800771c <_printf_common+0xc8>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e008      	b.n	80076fc <_printf_common+0xa8>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4652      	mov	r2, sl
 80076ee:	4649      	mov	r1, r9
 80076f0:	4638      	mov	r0, r7
 80076f2:	47c0      	blx	r8
 80076f4:	3001      	adds	r0, #1
 80076f6:	d103      	bne.n	8007700 <_printf_common+0xac>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007700:	3501      	adds	r5, #1
 8007702:	e7c6      	b.n	8007692 <_printf_common+0x3e>
 8007704:	18e1      	adds	r1, r4, r3
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	2030      	movs	r0, #48	; 0x30
 800770a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770e:	4422      	add	r2, r4
 8007710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007718:	3302      	adds	r3, #2
 800771a:	e7c7      	b.n	80076ac <_printf_common+0x58>
 800771c:	2301      	movs	r3, #1
 800771e:	4622      	mov	r2, r4
 8007720:	4649      	mov	r1, r9
 8007722:	4638      	mov	r0, r7
 8007724:	47c0      	blx	r8
 8007726:	3001      	adds	r0, #1
 8007728:	d0e6      	beq.n	80076f8 <_printf_common+0xa4>
 800772a:	3601      	adds	r6, #1
 800772c:	e7d9      	b.n	80076e2 <_printf_common+0x8e>
	...

08007730 <_printf_i>:
 8007730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	7e0f      	ldrb	r7, [r1, #24]
 8007736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007738:	2f78      	cmp	r7, #120	; 0x78
 800773a:	4691      	mov	r9, r2
 800773c:	4680      	mov	r8, r0
 800773e:	460c      	mov	r4, r1
 8007740:	469a      	mov	sl, r3
 8007742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007746:	d807      	bhi.n	8007758 <_printf_i+0x28>
 8007748:	2f62      	cmp	r7, #98	; 0x62
 800774a:	d80a      	bhi.n	8007762 <_printf_i+0x32>
 800774c:	2f00      	cmp	r7, #0
 800774e:	f000 80d4 	beq.w	80078fa <_printf_i+0x1ca>
 8007752:	2f58      	cmp	r7, #88	; 0x58
 8007754:	f000 80c0 	beq.w	80078d8 <_printf_i+0x1a8>
 8007758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800775c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007760:	e03a      	b.n	80077d8 <_printf_i+0xa8>
 8007762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007766:	2b15      	cmp	r3, #21
 8007768:	d8f6      	bhi.n	8007758 <_printf_i+0x28>
 800776a:	a101      	add	r1, pc, #4	; (adr r1, 8007770 <_printf_i+0x40>)
 800776c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077dd 	.word	0x080077dd
 8007778:	08007759 	.word	0x08007759
 800777c:	08007759 	.word	0x08007759
 8007780:	08007759 	.word	0x08007759
 8007784:	08007759 	.word	0x08007759
 8007788:	080077dd 	.word	0x080077dd
 800778c:	08007759 	.word	0x08007759
 8007790:	08007759 	.word	0x08007759
 8007794:	08007759 	.word	0x08007759
 8007798:	08007759 	.word	0x08007759
 800779c:	080078e1 	.word	0x080078e1
 80077a0:	08007809 	.word	0x08007809
 80077a4:	0800789b 	.word	0x0800789b
 80077a8:	08007759 	.word	0x08007759
 80077ac:	08007759 	.word	0x08007759
 80077b0:	08007903 	.word	0x08007903
 80077b4:	08007759 	.word	0x08007759
 80077b8:	08007809 	.word	0x08007809
 80077bc:	08007759 	.word	0x08007759
 80077c0:	08007759 	.word	0x08007759
 80077c4:	080078a3 	.word	0x080078a3
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	602a      	str	r2, [r5, #0]
 80077d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d8:	2301      	movs	r3, #1
 80077da:	e09f      	b.n	800791c <_printf_i+0x1ec>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	0607      	lsls	r7, r0, #24
 80077e2:	f103 0104 	add.w	r1, r3, #4
 80077e6:	6029      	str	r1, [r5, #0]
 80077e8:	d501      	bpl.n	80077ee <_printf_i+0xbe>
 80077ea:	681e      	ldr	r6, [r3, #0]
 80077ec:	e003      	b.n	80077f6 <_printf_i+0xc6>
 80077ee:	0646      	lsls	r6, r0, #25
 80077f0:	d5fb      	bpl.n	80077ea <_printf_i+0xba>
 80077f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	da03      	bge.n	8007802 <_printf_i+0xd2>
 80077fa:	232d      	movs	r3, #45	; 0x2d
 80077fc:	4276      	negs	r6, r6
 80077fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007802:	485a      	ldr	r0, [pc, #360]	; (800796c <_printf_i+0x23c>)
 8007804:	230a      	movs	r3, #10
 8007806:	e012      	b.n	800782e <_printf_i+0xfe>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	6820      	ldr	r0, [r4, #0]
 800780c:	1d19      	adds	r1, r3, #4
 800780e:	6029      	str	r1, [r5, #0]
 8007810:	0605      	lsls	r5, r0, #24
 8007812:	d501      	bpl.n	8007818 <_printf_i+0xe8>
 8007814:	681e      	ldr	r6, [r3, #0]
 8007816:	e002      	b.n	800781e <_printf_i+0xee>
 8007818:	0641      	lsls	r1, r0, #25
 800781a:	d5fb      	bpl.n	8007814 <_printf_i+0xe4>
 800781c:	881e      	ldrh	r6, [r3, #0]
 800781e:	4853      	ldr	r0, [pc, #332]	; (800796c <_printf_i+0x23c>)
 8007820:	2f6f      	cmp	r7, #111	; 0x6f
 8007822:	bf0c      	ite	eq
 8007824:	2308      	moveq	r3, #8
 8007826:	230a      	movne	r3, #10
 8007828:	2100      	movs	r1, #0
 800782a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800782e:	6865      	ldr	r5, [r4, #4]
 8007830:	60a5      	str	r5, [r4, #8]
 8007832:	2d00      	cmp	r5, #0
 8007834:	bfa2      	ittt	ge
 8007836:	6821      	ldrge	r1, [r4, #0]
 8007838:	f021 0104 	bicge.w	r1, r1, #4
 800783c:	6021      	strge	r1, [r4, #0]
 800783e:	b90e      	cbnz	r6, 8007844 <_printf_i+0x114>
 8007840:	2d00      	cmp	r5, #0
 8007842:	d04b      	beq.n	80078dc <_printf_i+0x1ac>
 8007844:	4615      	mov	r5, r2
 8007846:	fbb6 f1f3 	udiv	r1, r6, r3
 800784a:	fb03 6711 	mls	r7, r3, r1, r6
 800784e:	5dc7      	ldrb	r7, [r0, r7]
 8007850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007854:	4637      	mov	r7, r6
 8007856:	42bb      	cmp	r3, r7
 8007858:	460e      	mov	r6, r1
 800785a:	d9f4      	bls.n	8007846 <_printf_i+0x116>
 800785c:	2b08      	cmp	r3, #8
 800785e:	d10b      	bne.n	8007878 <_printf_i+0x148>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	07de      	lsls	r6, r3, #31
 8007864:	d508      	bpl.n	8007878 <_printf_i+0x148>
 8007866:	6923      	ldr	r3, [r4, #16]
 8007868:	6861      	ldr	r1, [r4, #4]
 800786a:	4299      	cmp	r1, r3
 800786c:	bfde      	ittt	le
 800786e:	2330      	movle	r3, #48	; 0x30
 8007870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007878:	1b52      	subs	r2, r2, r5
 800787a:	6122      	str	r2, [r4, #16]
 800787c:	f8cd a000 	str.w	sl, [sp]
 8007880:	464b      	mov	r3, r9
 8007882:	aa03      	add	r2, sp, #12
 8007884:	4621      	mov	r1, r4
 8007886:	4640      	mov	r0, r8
 8007888:	f7ff fee4 	bl	8007654 <_printf_common>
 800788c:	3001      	adds	r0, #1
 800788e:	d14a      	bne.n	8007926 <_printf_i+0x1f6>
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
 8007894:	b004      	add	sp, #16
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	f043 0320 	orr.w	r3, r3, #32
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	4833      	ldr	r0, [pc, #204]	; (8007970 <_printf_i+0x240>)
 80078a4:	2778      	movs	r7, #120	; 0x78
 80078a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	6829      	ldr	r1, [r5, #0]
 80078ae:	061f      	lsls	r7, r3, #24
 80078b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80078b4:	d402      	bmi.n	80078bc <_printf_i+0x18c>
 80078b6:	065f      	lsls	r7, r3, #25
 80078b8:	bf48      	it	mi
 80078ba:	b2b6      	uxthmi	r6, r6
 80078bc:	07df      	lsls	r7, r3, #31
 80078be:	bf48      	it	mi
 80078c0:	f043 0320 	orrmi.w	r3, r3, #32
 80078c4:	6029      	str	r1, [r5, #0]
 80078c6:	bf48      	it	mi
 80078c8:	6023      	strmi	r3, [r4, #0]
 80078ca:	b91e      	cbnz	r6, 80078d4 <_printf_i+0x1a4>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	f023 0320 	bic.w	r3, r3, #32
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	2310      	movs	r3, #16
 80078d6:	e7a7      	b.n	8007828 <_printf_i+0xf8>
 80078d8:	4824      	ldr	r0, [pc, #144]	; (800796c <_printf_i+0x23c>)
 80078da:	e7e4      	b.n	80078a6 <_printf_i+0x176>
 80078dc:	4615      	mov	r5, r2
 80078de:	e7bd      	b.n	800785c <_printf_i+0x12c>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	6826      	ldr	r6, [r4, #0]
 80078e4:	6961      	ldr	r1, [r4, #20]
 80078e6:	1d18      	adds	r0, r3, #4
 80078e8:	6028      	str	r0, [r5, #0]
 80078ea:	0635      	lsls	r5, r6, #24
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	d501      	bpl.n	80078f4 <_printf_i+0x1c4>
 80078f0:	6019      	str	r1, [r3, #0]
 80078f2:	e002      	b.n	80078fa <_printf_i+0x1ca>
 80078f4:	0670      	lsls	r0, r6, #25
 80078f6:	d5fb      	bpl.n	80078f0 <_printf_i+0x1c0>
 80078f8:	8019      	strh	r1, [r3, #0]
 80078fa:	2300      	movs	r3, #0
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	4615      	mov	r5, r2
 8007900:	e7bc      	b.n	800787c <_printf_i+0x14c>
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	1d1a      	adds	r2, r3, #4
 8007906:	602a      	str	r2, [r5, #0]
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	2100      	movs	r1, #0
 800790e:	4628      	mov	r0, r5
 8007910:	f7f8 fc96 	bl	8000240 <memchr>
 8007914:	b108      	cbz	r0, 800791a <_printf_i+0x1ea>
 8007916:	1b40      	subs	r0, r0, r5
 8007918:	6060      	str	r0, [r4, #4]
 800791a:	6863      	ldr	r3, [r4, #4]
 800791c:	6123      	str	r3, [r4, #16]
 800791e:	2300      	movs	r3, #0
 8007920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007924:	e7aa      	b.n	800787c <_printf_i+0x14c>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	462a      	mov	r2, r5
 800792a:	4649      	mov	r1, r9
 800792c:	4640      	mov	r0, r8
 800792e:	47d0      	blx	sl
 8007930:	3001      	adds	r0, #1
 8007932:	d0ad      	beq.n	8007890 <_printf_i+0x160>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	079b      	lsls	r3, r3, #30
 8007938:	d413      	bmi.n	8007962 <_printf_i+0x232>
 800793a:	68e0      	ldr	r0, [r4, #12]
 800793c:	9b03      	ldr	r3, [sp, #12]
 800793e:	4298      	cmp	r0, r3
 8007940:	bfb8      	it	lt
 8007942:	4618      	movlt	r0, r3
 8007944:	e7a6      	b.n	8007894 <_printf_i+0x164>
 8007946:	2301      	movs	r3, #1
 8007948:	4632      	mov	r2, r6
 800794a:	4649      	mov	r1, r9
 800794c:	4640      	mov	r0, r8
 800794e:	47d0      	blx	sl
 8007950:	3001      	adds	r0, #1
 8007952:	d09d      	beq.n	8007890 <_printf_i+0x160>
 8007954:	3501      	adds	r5, #1
 8007956:	68e3      	ldr	r3, [r4, #12]
 8007958:	9903      	ldr	r1, [sp, #12]
 800795a:	1a5b      	subs	r3, r3, r1
 800795c:	42ab      	cmp	r3, r5
 800795e:	dcf2      	bgt.n	8007946 <_printf_i+0x216>
 8007960:	e7eb      	b.n	800793a <_printf_i+0x20a>
 8007962:	2500      	movs	r5, #0
 8007964:	f104 0619 	add.w	r6, r4, #25
 8007968:	e7f5      	b.n	8007956 <_printf_i+0x226>
 800796a:	bf00      	nop
 800796c:	0800faba 	.word	0x0800faba
 8007970:	0800facb 	.word	0x0800facb

08007974 <std>:
 8007974:	2300      	movs	r3, #0
 8007976:	b510      	push	{r4, lr}
 8007978:	4604      	mov	r4, r0
 800797a:	e9c0 3300 	strd	r3, r3, [r0]
 800797e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007982:	6083      	str	r3, [r0, #8]
 8007984:	8181      	strh	r1, [r0, #12]
 8007986:	6643      	str	r3, [r0, #100]	; 0x64
 8007988:	81c2      	strh	r2, [r0, #14]
 800798a:	6183      	str	r3, [r0, #24]
 800798c:	4619      	mov	r1, r3
 800798e:	2208      	movs	r2, #8
 8007990:	305c      	adds	r0, #92	; 0x5c
 8007992:	f000 f902 	bl	8007b9a <memset>
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <std+0x38>)
 8007998:	6263      	str	r3, [r4, #36]	; 0x24
 800799a:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <std+0x3c>)
 800799c:	62a3      	str	r3, [r4, #40]	; 0x28
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <std+0x40>)
 80079a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079a2:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <std+0x44>)
 80079a4:	6224      	str	r4, [r4, #32]
 80079a6:	6323      	str	r3, [r4, #48]	; 0x30
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	bf00      	nop
 80079ac:	08007b15 	.word	0x08007b15
 80079b0:	08007b37 	.word	0x08007b37
 80079b4:	08007b6f 	.word	0x08007b6f
 80079b8:	08007b93 	.word	0x08007b93

080079bc <stdio_exit_handler>:
 80079bc:	4a02      	ldr	r2, [pc, #8]	; (80079c8 <stdio_exit_handler+0xc>)
 80079be:	4903      	ldr	r1, [pc, #12]	; (80079cc <stdio_exit_handler+0x10>)
 80079c0:	4803      	ldr	r0, [pc, #12]	; (80079d0 <stdio_exit_handler+0x14>)
 80079c2:	f000 b869 	b.w	8007a98 <_fwalk_sglue>
 80079c6:	bf00      	nop
 80079c8:	20000010 	.word	0x20000010
 80079cc:	08009535 	.word	0x08009535
 80079d0:	2000001c 	.word	0x2000001c

080079d4 <cleanup_stdio>:
 80079d4:	6841      	ldr	r1, [r0, #4]
 80079d6:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <cleanup_stdio+0x34>)
 80079d8:	4299      	cmp	r1, r3
 80079da:	b510      	push	{r4, lr}
 80079dc:	4604      	mov	r4, r0
 80079de:	d001      	beq.n	80079e4 <cleanup_stdio+0x10>
 80079e0:	f001 fda8 	bl	8009534 <_fflush_r>
 80079e4:	68a1      	ldr	r1, [r4, #8]
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <cleanup_stdio+0x38>)
 80079e8:	4299      	cmp	r1, r3
 80079ea:	d002      	beq.n	80079f2 <cleanup_stdio+0x1e>
 80079ec:	4620      	mov	r0, r4
 80079ee:	f001 fda1 	bl	8009534 <_fflush_r>
 80079f2:	68e1      	ldr	r1, [r4, #12]
 80079f4:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <cleanup_stdio+0x3c>)
 80079f6:	4299      	cmp	r1, r3
 80079f8:	d004      	beq.n	8007a04 <cleanup_stdio+0x30>
 80079fa:	4620      	mov	r0, r4
 80079fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a00:	f001 bd98 	b.w	8009534 <_fflush_r>
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	bf00      	nop
 8007a08:	200003ec 	.word	0x200003ec
 8007a0c:	20000454 	.word	0x20000454
 8007a10:	200004bc 	.word	0x200004bc

08007a14 <global_stdio_init.part.0>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <global_stdio_init.part.0+0x30>)
 8007a18:	4c0b      	ldr	r4, [pc, #44]	; (8007a48 <global_stdio_init.part.0+0x34>)
 8007a1a:	4a0c      	ldr	r2, [pc, #48]	; (8007a4c <global_stdio_init.part.0+0x38>)
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	2200      	movs	r2, #0
 8007a22:	2104      	movs	r1, #4
 8007a24:	f7ff ffa6 	bl	8007974 <std>
 8007a28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	2109      	movs	r1, #9
 8007a30:	f7ff ffa0 	bl	8007974 <std>
 8007a34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007a38:	2202      	movs	r2, #2
 8007a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3e:	2112      	movs	r1, #18
 8007a40:	f7ff bf98 	b.w	8007974 <std>
 8007a44:	20000524 	.word	0x20000524
 8007a48:	200003ec 	.word	0x200003ec
 8007a4c:	080079bd 	.word	0x080079bd

08007a50 <__sfp_lock_acquire>:
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <__sfp_lock_acquire+0x8>)
 8007a52:	f000 b91f 	b.w	8007c94 <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	2000052d 	.word	0x2000052d

08007a5c <__sfp_lock_release>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	; (8007a64 <__sfp_lock_release+0x8>)
 8007a5e:	f000 b91a 	b.w	8007c96 <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	2000052d 	.word	0x2000052d

08007a68 <__sinit>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	f7ff fff0 	bl	8007a50 <__sfp_lock_acquire>
 8007a70:	6a23      	ldr	r3, [r4, #32]
 8007a72:	b11b      	cbz	r3, 8007a7c <__sinit+0x14>
 8007a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a78:	f7ff bff0 	b.w	8007a5c <__sfp_lock_release>
 8007a7c:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <__sinit+0x28>)
 8007a7e:	6223      	str	r3, [r4, #32]
 8007a80:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <__sinit+0x2c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f5      	bne.n	8007a74 <__sinit+0xc>
 8007a88:	f7ff ffc4 	bl	8007a14 <global_stdio_init.part.0>
 8007a8c:	e7f2      	b.n	8007a74 <__sinit+0xc>
 8007a8e:	bf00      	nop
 8007a90:	080079d5 	.word	0x080079d5
 8007a94:	20000524 	.word	0x20000524

08007a98 <_fwalk_sglue>:
 8007a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	4688      	mov	r8, r1
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	2600      	movs	r6, #0
 8007aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8007aac:	d505      	bpl.n	8007aba <_fwalk_sglue+0x22>
 8007aae:	6824      	ldr	r4, [r4, #0]
 8007ab0:	2c00      	cmp	r4, #0
 8007ab2:	d1f7      	bne.n	8007aa4 <_fwalk_sglue+0xc>
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aba:	89ab      	ldrh	r3, [r5, #12]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d907      	bls.n	8007ad0 <_fwalk_sglue+0x38>
 8007ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	d003      	beq.n	8007ad0 <_fwalk_sglue+0x38>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4638      	mov	r0, r7
 8007acc:	47c0      	blx	r8
 8007ace:	4306      	orrs	r6, r0
 8007ad0:	3568      	adds	r5, #104	; 0x68
 8007ad2:	e7e9      	b.n	8007aa8 <_fwalk_sglue+0x10>

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	b500      	push	{lr}
 8007ad8:	b09c      	sub	sp, #112	; 0x70
 8007ada:	ab1d      	add	r3, sp, #116	; 0x74
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ae4:	4809      	ldr	r0, [pc, #36]	; (8007b0c <siprintf+0x38>)
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	9104      	str	r1, [sp, #16]
 8007aea:	4909      	ldr	r1, [pc, #36]	; (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	f001 fb98 	bl	800922c <_svfiprintf_r>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	; 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	20000068 	.word	0x20000068
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <__sread>:
 8007b14:	b510      	push	{r4, lr}
 8007b16:	460c      	mov	r4, r1
 8007b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1c:	f000 f86c 	bl	8007bf8 <_read_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	bfab      	itete	ge
 8007b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b26:	89a3      	ldrhlt	r3, [r4, #12]
 8007b28:	181b      	addge	r3, r3, r0
 8007b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b2e:	bfac      	ite	ge
 8007b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b32:	81a3      	strhlt	r3, [r4, #12]
 8007b34:	bd10      	pop	{r4, pc}

08007b36 <__swrite>:
 8007b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3a:	461f      	mov	r7, r3
 8007b3c:	898b      	ldrh	r3, [r1, #12]
 8007b3e:	05db      	lsls	r3, r3, #23
 8007b40:	4605      	mov	r5, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	4616      	mov	r6, r2
 8007b46:	d505      	bpl.n	8007b54 <__swrite+0x1e>
 8007b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f000 f840 	bl	8007bd4 <_lseek_r>
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b5e:	81a3      	strh	r3, [r4, #12]
 8007b60:	4632      	mov	r2, r6
 8007b62:	463b      	mov	r3, r7
 8007b64:	4628      	mov	r0, r5
 8007b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6a:	f000 b857 	b.w	8007c1c <_write_r>

08007b6e <__sseek>:
 8007b6e:	b510      	push	{r4, lr}
 8007b70:	460c      	mov	r4, r1
 8007b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b76:	f000 f82d 	bl	8007bd4 <_lseek_r>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	bf15      	itete	ne
 8007b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b8a:	81a3      	strheq	r3, [r4, #12]
 8007b8c:	bf18      	it	ne
 8007b8e:	81a3      	strhne	r3, [r4, #12]
 8007b90:	bd10      	pop	{r4, pc}

08007b92 <__sclose>:
 8007b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b96:	f000 b80d 	b.w	8007bb4 <_close_r>

08007b9a <memset>:
 8007b9a:	4402      	add	r2, r0
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d100      	bne.n	8007ba4 <memset+0xa>
 8007ba2:	4770      	bx	lr
 8007ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba8:	e7f9      	b.n	8007b9e <memset+0x4>
	...

08007bac <_localeconv_r>:
 8007bac:	4800      	ldr	r0, [pc, #0]	; (8007bb0 <_localeconv_r+0x4>)
 8007bae:	4770      	bx	lr
 8007bb0:	2000015c 	.word	0x2000015c

08007bb4 <_close_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d06      	ldr	r5, [pc, #24]	; (8007bd0 <_close_r+0x1c>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	f7f9 fe4d 	bl	800185e <_close>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_close_r+0x1a>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_close_r+0x1a>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	20000528 	.word	0x20000528

08007bd4 <_lseek_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_lseek_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7f9 fe62 	bl	80018ac <_lseek>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_lseek_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_lseek_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	20000528 	.word	0x20000528

08007bf8 <_read_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d07      	ldr	r5, [pc, #28]	; (8007c18 <_read_r+0x20>)
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4608      	mov	r0, r1
 8007c00:	4611      	mov	r1, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	602a      	str	r2, [r5, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7f9 fdf0 	bl	80017ec <_read>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_read_r+0x1e>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_read_r+0x1e>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	20000528 	.word	0x20000528

08007c1c <_write_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d07      	ldr	r5, [pc, #28]	; (8007c3c <_write_r+0x20>)
 8007c20:	4604      	mov	r4, r0
 8007c22:	4608      	mov	r0, r1
 8007c24:	4611      	mov	r1, r2
 8007c26:	2200      	movs	r2, #0
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f7f9 fdfb 	bl	8001826 <_write>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_write_r+0x1e>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_write_r+0x1e>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	20000528 	.word	0x20000528

08007c40 <__errno>:
 8007c40:	4b01      	ldr	r3, [pc, #4]	; (8007c48 <__errno+0x8>)
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000068 	.word	0x20000068

08007c4c <__libc_init_array>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	4d0d      	ldr	r5, [pc, #52]	; (8007c84 <__libc_init_array+0x38>)
 8007c50:	4c0d      	ldr	r4, [pc, #52]	; (8007c88 <__libc_init_array+0x3c>)
 8007c52:	1b64      	subs	r4, r4, r5
 8007c54:	10a4      	asrs	r4, r4, #2
 8007c56:	2600      	movs	r6, #0
 8007c58:	42a6      	cmp	r6, r4
 8007c5a:	d109      	bne.n	8007c70 <__libc_init_array+0x24>
 8007c5c:	4d0b      	ldr	r5, [pc, #44]	; (8007c8c <__libc_init_array+0x40>)
 8007c5e:	4c0c      	ldr	r4, [pc, #48]	; (8007c90 <__libc_init_array+0x44>)
 8007c60:	f002 f80c 	bl	8009c7c <_init>
 8007c64:	1b64      	subs	r4, r4, r5
 8007c66:	10a4      	asrs	r4, r4, #2
 8007c68:	2600      	movs	r6, #0
 8007c6a:	42a6      	cmp	r6, r4
 8007c6c:	d105      	bne.n	8007c7a <__libc_init_array+0x2e>
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c74:	4798      	blx	r3
 8007c76:	3601      	adds	r6, #1
 8007c78:	e7ee      	b.n	8007c58 <__libc_init_array+0xc>
 8007c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7e:	4798      	blx	r3
 8007c80:	3601      	adds	r6, #1
 8007c82:	e7f2      	b.n	8007c6a <__libc_init_array+0x1e>
 8007c84:	0800fe24 	.word	0x0800fe24
 8007c88:	0800fe24 	.word	0x0800fe24
 8007c8c:	0800fe24 	.word	0x0800fe24
 8007c90:	0800fe28 	.word	0x0800fe28

08007c94 <__retarget_lock_acquire_recursive>:
 8007c94:	4770      	bx	lr

08007c96 <__retarget_lock_release_recursive>:
 8007c96:	4770      	bx	lr

08007c98 <quorem>:
 8007c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	6903      	ldr	r3, [r0, #16]
 8007c9e:	690c      	ldr	r4, [r1, #16]
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	db7e      	blt.n	8007da4 <quorem+0x10c>
 8007ca6:	3c01      	subs	r4, #1
 8007ca8:	f101 0814 	add.w	r8, r1, #20
 8007cac:	f100 0514 	add.w	r5, r0, #20
 8007cb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cca:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cce:	d331      	bcc.n	8007d34 <quorem+0x9c>
 8007cd0:	f04f 0e00 	mov.w	lr, #0
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	46ac      	mov	ip, r5
 8007cd8:	46f2      	mov	sl, lr
 8007cda:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cde:	b293      	uxth	r3, r2
 8007ce0:	fb06 e303 	mla	r3, r6, r3, lr
 8007ce4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ce8:	0c1a      	lsrs	r2, r3, #16
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	ebaa 0303 	sub.w	r3, sl, r3
 8007cf0:	f8dc a000 	ldr.w	sl, [ip]
 8007cf4:	fa13 f38a 	uxtah	r3, r3, sl
 8007cf8:	fb06 220e 	mla	r2, r6, lr, r2
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	9b00      	ldr	r3, [sp, #0]
 8007d00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d04:	b292      	uxth	r2, r2
 8007d06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d12:	4581      	cmp	r9, r0
 8007d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d18:	f84c 3b04 	str.w	r3, [ip], #4
 8007d1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d20:	d2db      	bcs.n	8007cda <quorem+0x42>
 8007d22:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d26:	b92b      	cbnz	r3, 8007d34 <quorem+0x9c>
 8007d28:	9b01      	ldr	r3, [sp, #4]
 8007d2a:	3b04      	subs	r3, #4
 8007d2c:	429d      	cmp	r5, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	d32c      	bcc.n	8007d8c <quorem+0xf4>
 8007d32:	613c      	str	r4, [r7, #16]
 8007d34:	4638      	mov	r0, r7
 8007d36:	f001 f91f 	bl	8008f78 <__mcmp>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	db22      	blt.n	8007d84 <quorem+0xec>
 8007d3e:	3601      	adds	r6, #1
 8007d40:	4629      	mov	r1, r5
 8007d42:	2000      	movs	r0, #0
 8007d44:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d48:	f8d1 c000 	ldr.w	ip, [r1]
 8007d4c:	b293      	uxth	r3, r2
 8007d4e:	1ac3      	subs	r3, r0, r3
 8007d50:	0c12      	lsrs	r2, r2, #16
 8007d52:	fa13 f38c 	uxtah	r3, r3, ip
 8007d56:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007d5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d64:	45c1      	cmp	r9, r8
 8007d66:	f841 3b04 	str.w	r3, [r1], #4
 8007d6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d6e:	d2e9      	bcs.n	8007d44 <quorem+0xac>
 8007d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d78:	b922      	cbnz	r2, 8007d84 <quorem+0xec>
 8007d7a:	3b04      	subs	r3, #4
 8007d7c:	429d      	cmp	r5, r3
 8007d7e:	461a      	mov	r2, r3
 8007d80:	d30a      	bcc.n	8007d98 <quorem+0x100>
 8007d82:	613c      	str	r4, [r7, #16]
 8007d84:	4630      	mov	r0, r6
 8007d86:	b003      	add	sp, #12
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8c:	6812      	ldr	r2, [r2, #0]
 8007d8e:	3b04      	subs	r3, #4
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d1ce      	bne.n	8007d32 <quorem+0x9a>
 8007d94:	3c01      	subs	r4, #1
 8007d96:	e7c9      	b.n	8007d2c <quorem+0x94>
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	3b04      	subs	r3, #4
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d1f0      	bne.n	8007d82 <quorem+0xea>
 8007da0:	3c01      	subs	r4, #1
 8007da2:	e7eb      	b.n	8007d7c <quorem+0xe4>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7ee      	b.n	8007d86 <quorem+0xee>

08007da8 <_dtoa_r>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	ed2d 8b02 	vpush	{d8}
 8007db0:	69c5      	ldr	r5, [r0, #28]
 8007db2:	b091      	sub	sp, #68	; 0x44
 8007db4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007db8:	ec59 8b10 	vmov	r8, r9, d0
 8007dbc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007dbe:	9106      	str	r1, [sp, #24]
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	9208      	str	r2, [sp, #32]
 8007dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8007dc6:	b975      	cbnz	r5, 8007de6 <_dtoa_r+0x3e>
 8007dc8:	2010      	movs	r0, #16
 8007dca:	f000 fda5 	bl	8008918 <malloc>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	61f0      	str	r0, [r6, #28]
 8007dd2:	b920      	cbnz	r0, 8007dde <_dtoa_r+0x36>
 8007dd4:	4ba6      	ldr	r3, [pc, #664]	; (8008070 <_dtoa_r+0x2c8>)
 8007dd6:	21ef      	movs	r1, #239	; 0xef
 8007dd8:	48a6      	ldr	r0, [pc, #664]	; (8008074 <_dtoa_r+0x2cc>)
 8007dda:	f001 fc0b 	bl	80095f4 <__assert_func>
 8007dde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007de2:	6005      	str	r5, [r0, #0]
 8007de4:	60c5      	str	r5, [r0, #12]
 8007de6:	69f3      	ldr	r3, [r6, #28]
 8007de8:	6819      	ldr	r1, [r3, #0]
 8007dea:	b151      	cbz	r1, 8007e02 <_dtoa_r+0x5a>
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	604a      	str	r2, [r1, #4]
 8007df0:	2301      	movs	r3, #1
 8007df2:	4093      	lsls	r3, r2
 8007df4:	608b      	str	r3, [r1, #8]
 8007df6:	4630      	mov	r0, r6
 8007df8:	f000 fe82 	bl	8008b00 <_Bfree>
 8007dfc:	69f3      	ldr	r3, [r6, #28]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	f1b9 0300 	subs.w	r3, r9, #0
 8007e06:	bfbb      	ittet	lt
 8007e08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e0c:	9303      	strlt	r3, [sp, #12]
 8007e0e:	2300      	movge	r3, #0
 8007e10:	2201      	movlt	r2, #1
 8007e12:	bfac      	ite	ge
 8007e14:	6023      	strge	r3, [r4, #0]
 8007e16:	6022      	strlt	r2, [r4, #0]
 8007e18:	4b97      	ldr	r3, [pc, #604]	; (8008078 <_dtoa_r+0x2d0>)
 8007e1a:	9c03      	ldr	r4, [sp, #12]
 8007e1c:	43a3      	bics	r3, r4
 8007e1e:	d11c      	bne.n	8007e5a <_dtoa_r+0xb2>
 8007e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e22:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e2c:	ea53 0308 	orrs.w	r3, r3, r8
 8007e30:	f000 84fb 	beq.w	800882a <_dtoa_r+0xa82>
 8007e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e36:	b963      	cbnz	r3, 8007e52 <_dtoa_r+0xaa>
 8007e38:	4b90      	ldr	r3, [pc, #576]	; (800807c <_dtoa_r+0x2d4>)
 8007e3a:	e020      	b.n	8007e7e <_dtoa_r+0xd6>
 8007e3c:	4b90      	ldr	r3, [pc, #576]	; (8008080 <_dtoa_r+0x2d8>)
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	3308      	adds	r3, #8
 8007e42:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	9801      	ldr	r0, [sp, #4]
 8007e48:	b011      	add	sp, #68	; 0x44
 8007e4a:	ecbd 8b02 	vpop	{d8}
 8007e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e52:	4b8a      	ldr	r3, [pc, #552]	; (800807c <_dtoa_r+0x2d4>)
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	3303      	adds	r3, #3
 8007e58:	e7f3      	b.n	8007e42 <_dtoa_r+0x9a>
 8007e5a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007e5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e66:	d10c      	bne.n	8007e82 <_dtoa_r+0xda>
 8007e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 84d7 	beq.w	8008824 <_dtoa_r+0xa7c>
 8007e76:	4b83      	ldr	r3, [pc, #524]	; (8008084 <_dtoa_r+0x2dc>)
 8007e78:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	e7e1      	b.n	8007e46 <_dtoa_r+0x9e>
 8007e82:	aa0e      	add	r2, sp, #56	; 0x38
 8007e84:	a90f      	add	r1, sp, #60	; 0x3c
 8007e86:	4630      	mov	r0, r6
 8007e88:	eeb0 0b48 	vmov.f64	d0, d8
 8007e8c:	f001 f91a 	bl	80090c4 <__d2b>
 8007e90:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007e94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e96:	4605      	mov	r5, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d046      	beq.n	8007f2a <_dtoa_r+0x182>
 8007e9c:	eeb0 7b48 	vmov.f64	d7, d8
 8007ea0:	ee18 1a90 	vmov	r1, s17
 8007ea4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007ea8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007eac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007eb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	ee07 1a90 	vmov	s15, r1
 8007eba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007ebe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008058 <_dtoa_r+0x2b0>
 8007ec2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007ec6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008060 <_dtoa_r+0x2b8>
 8007eca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007ece:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008068 <_dtoa_r+0x2c0>
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007eda:	eeb0 7b46 	vmov.f64	d7, d6
 8007ede:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007ee2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007ee6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eee:	ee16 ba90 	vmov	fp, s13
 8007ef2:	9009      	str	r0, [sp, #36]	; 0x24
 8007ef4:	d508      	bpl.n	8007f08 <_dtoa_r+0x160>
 8007ef6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007efa:	eeb4 6b47 	vcmp.f64	d6, d7
 8007efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f02:	bf18      	it	ne
 8007f04:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007f08:	f1bb 0f16 	cmp.w	fp, #22
 8007f0c:	d82b      	bhi.n	8007f66 <_dtoa_r+0x1be>
 8007f0e:	495e      	ldr	r1, [pc, #376]	; (8008088 <_dtoa_r+0x2e0>)
 8007f10:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007f14:	ed91 7b00 	vldr	d7, [r1]
 8007f18:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f20:	d501      	bpl.n	8007f26 <_dtoa_r+0x17e>
 8007f22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f26:	2100      	movs	r1, #0
 8007f28:	e01e      	b.n	8007f68 <_dtoa_r+0x1c0>
 8007f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007f32:	2920      	cmp	r1, #32
 8007f34:	bfc1      	itttt	gt
 8007f36:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007f3a:	408c      	lslgt	r4, r1
 8007f3c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007f40:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007f44:	bfd6      	itet	le
 8007f46:	f1c1 0120 	rsble	r1, r1, #32
 8007f4a:	4321      	orrgt	r1, r4
 8007f4c:	fa08 f101 	lslle.w	r1, r8, r1
 8007f50:	ee07 1a90 	vmov	s15, r1
 8007f54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	ee17 1a90 	vmov	r1, s15
 8007f5e:	2001      	movs	r0, #1
 8007f60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f64:	e7a7      	b.n	8007eb6 <_dtoa_r+0x10e>
 8007f66:	2101      	movs	r1, #1
 8007f68:	1ad2      	subs	r2, r2, r3
 8007f6a:	1e53      	subs	r3, r2, #1
 8007f6c:	9305      	str	r3, [sp, #20]
 8007f6e:	bf45      	ittet	mi
 8007f70:	f1c2 0301 	rsbmi	r3, r2, #1
 8007f74:	9304      	strmi	r3, [sp, #16]
 8007f76:	2300      	movpl	r3, #0
 8007f78:	2300      	movmi	r3, #0
 8007f7a:	bf4c      	ite	mi
 8007f7c:	9305      	strmi	r3, [sp, #20]
 8007f7e:	9304      	strpl	r3, [sp, #16]
 8007f80:	f1bb 0f00 	cmp.w	fp, #0
 8007f84:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f86:	db18      	blt.n	8007fba <_dtoa_r+0x212>
 8007f88:	9b05      	ldr	r3, [sp, #20]
 8007f8a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007f8e:	445b      	add	r3, fp
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	2300      	movs	r3, #0
 8007f94:	9a06      	ldr	r2, [sp, #24]
 8007f96:	2a09      	cmp	r2, #9
 8007f98:	d848      	bhi.n	800802c <_dtoa_r+0x284>
 8007f9a:	2a05      	cmp	r2, #5
 8007f9c:	bfc4      	itt	gt
 8007f9e:	3a04      	subgt	r2, #4
 8007fa0:	9206      	strgt	r2, [sp, #24]
 8007fa2:	9a06      	ldr	r2, [sp, #24]
 8007fa4:	f1a2 0202 	sub.w	r2, r2, #2
 8007fa8:	bfcc      	ite	gt
 8007faa:	2400      	movgt	r4, #0
 8007fac:	2401      	movle	r4, #1
 8007fae:	2a03      	cmp	r2, #3
 8007fb0:	d847      	bhi.n	8008042 <_dtoa_r+0x29a>
 8007fb2:	e8df f002 	tbb	[pc, r2]
 8007fb6:	2d0b      	.short	0x2d0b
 8007fb8:	392b      	.short	0x392b
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	eba3 030b 	sub.w	r3, r3, fp
 8007fc2:	9304      	str	r3, [sp, #16]
 8007fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8007fc6:	f1cb 0300 	rsb	r3, fp, #0
 8007fca:	e7e3      	b.n	8007f94 <_dtoa_r+0x1ec>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	9207      	str	r2, [sp, #28]
 8007fd0:	9a08      	ldr	r2, [sp, #32]
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	dc38      	bgt.n	8008048 <_dtoa_r+0x2a0>
 8007fd6:	f04f 0a01 	mov.w	sl, #1
 8007fda:	46d1      	mov	r9, sl
 8007fdc:	4652      	mov	r2, sl
 8007fde:	f8cd a020 	str.w	sl, [sp, #32]
 8007fe2:	69f7      	ldr	r7, [r6, #28]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	2004      	movs	r0, #4
 8007fe8:	f100 0c14 	add.w	ip, r0, #20
 8007fec:	4594      	cmp	ip, r2
 8007fee:	d930      	bls.n	8008052 <_dtoa_r+0x2aa>
 8007ff0:	6079      	str	r1, [r7, #4]
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ff6:	f000 fd43 	bl	8008a80 <_Balloc>
 8007ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ffc:	9001      	str	r0, [sp, #4]
 8007ffe:	4602      	mov	r2, r0
 8008000:	2800      	cmp	r0, #0
 8008002:	d145      	bne.n	8008090 <_dtoa_r+0x2e8>
 8008004:	4b21      	ldr	r3, [pc, #132]	; (800808c <_dtoa_r+0x2e4>)
 8008006:	f240 11af 	movw	r1, #431	; 0x1af
 800800a:	e6e5      	b.n	8007dd8 <_dtoa_r+0x30>
 800800c:	2201      	movs	r2, #1
 800800e:	e7de      	b.n	8007fce <_dtoa_r+0x226>
 8008010:	2200      	movs	r2, #0
 8008012:	9207      	str	r2, [sp, #28]
 8008014:	9a08      	ldr	r2, [sp, #32]
 8008016:	eb0b 0a02 	add.w	sl, fp, r2
 800801a:	f10a 0901 	add.w	r9, sl, #1
 800801e:	464a      	mov	r2, r9
 8008020:	2a01      	cmp	r2, #1
 8008022:	bfb8      	it	lt
 8008024:	2201      	movlt	r2, #1
 8008026:	e7dc      	b.n	8007fe2 <_dtoa_r+0x23a>
 8008028:	2201      	movs	r2, #1
 800802a:	e7f2      	b.n	8008012 <_dtoa_r+0x26a>
 800802c:	2401      	movs	r4, #1
 800802e:	2200      	movs	r2, #0
 8008030:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008034:	f04f 3aff 	mov.w	sl, #4294967295
 8008038:	2100      	movs	r1, #0
 800803a:	46d1      	mov	r9, sl
 800803c:	2212      	movs	r2, #18
 800803e:	9108      	str	r1, [sp, #32]
 8008040:	e7cf      	b.n	8007fe2 <_dtoa_r+0x23a>
 8008042:	2201      	movs	r2, #1
 8008044:	9207      	str	r2, [sp, #28]
 8008046:	e7f5      	b.n	8008034 <_dtoa_r+0x28c>
 8008048:	f8dd a020 	ldr.w	sl, [sp, #32]
 800804c:	46d1      	mov	r9, sl
 800804e:	4652      	mov	r2, sl
 8008050:	e7c7      	b.n	8007fe2 <_dtoa_r+0x23a>
 8008052:	3101      	adds	r1, #1
 8008054:	0040      	lsls	r0, r0, #1
 8008056:	e7c7      	b.n	8007fe8 <_dtoa_r+0x240>
 8008058:	636f4361 	.word	0x636f4361
 800805c:	3fd287a7 	.word	0x3fd287a7
 8008060:	8b60c8b3 	.word	0x8b60c8b3
 8008064:	3fc68a28 	.word	0x3fc68a28
 8008068:	509f79fb 	.word	0x509f79fb
 800806c:	3fd34413 	.word	0x3fd34413
 8008070:	0800fae9 	.word	0x0800fae9
 8008074:	0800fb00 	.word	0x0800fb00
 8008078:	7ff00000 	.word	0x7ff00000
 800807c:	0800fae5 	.word	0x0800fae5
 8008080:	0800fadc 	.word	0x0800fadc
 8008084:	0800fab9 	.word	0x0800fab9
 8008088:	0800fbf0 	.word	0x0800fbf0
 800808c:	0800fb58 	.word	0x0800fb58
 8008090:	69f2      	ldr	r2, [r6, #28]
 8008092:	9901      	ldr	r1, [sp, #4]
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	f1b9 0f0e 	cmp.w	r9, #14
 800809a:	d86c      	bhi.n	8008176 <_dtoa_r+0x3ce>
 800809c:	2c00      	cmp	r4, #0
 800809e:	d06a      	beq.n	8008176 <_dtoa_r+0x3ce>
 80080a0:	f1bb 0f00 	cmp.w	fp, #0
 80080a4:	f340 80a0 	ble.w	80081e8 <_dtoa_r+0x440>
 80080a8:	4ac1      	ldr	r2, [pc, #772]	; (80083b0 <_dtoa_r+0x608>)
 80080aa:	f00b 010f 	and.w	r1, fp, #15
 80080ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80080b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80080b6:	ed92 7b00 	vldr	d7, [r2]
 80080ba:	ea4f 122b 	mov.w	r2, fp, asr #4
 80080be:	f000 8087 	beq.w	80081d0 <_dtoa_r+0x428>
 80080c2:	49bc      	ldr	r1, [pc, #752]	; (80083b4 <_dtoa_r+0x60c>)
 80080c4:	ed91 6b08 	vldr	d6, [r1, #32]
 80080c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80080cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80080d0:	f002 020f 	and.w	r2, r2, #15
 80080d4:	2103      	movs	r1, #3
 80080d6:	48b7      	ldr	r0, [pc, #732]	; (80083b4 <_dtoa_r+0x60c>)
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d17b      	bne.n	80081d4 <_dtoa_r+0x42c>
 80080dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80080e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080ee:	2a00      	cmp	r2, #0
 80080f0:	f000 80a0 	beq.w	8008234 <_dtoa_r+0x48c>
 80080f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80080f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008100:	f140 8098 	bpl.w	8008234 <_dtoa_r+0x48c>
 8008104:	f1b9 0f00 	cmp.w	r9, #0
 8008108:	f000 8094 	beq.w	8008234 <_dtoa_r+0x48c>
 800810c:	f1ba 0f00 	cmp.w	sl, #0
 8008110:	dd2f      	ble.n	8008172 <_dtoa_r+0x3ca>
 8008112:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008116:	ee27 7b06 	vmul.f64	d7, d7, d6
 800811a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800811e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008122:	3101      	adds	r1, #1
 8008124:	4654      	mov	r4, sl
 8008126:	ed9d 6b02 	vldr	d6, [sp, #8]
 800812a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800812e:	ee07 1a90 	vmov	s15, r1
 8008132:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008136:	eea7 5b06 	vfma.f64	d5, d7, d6
 800813a:	ee15 7a90 	vmov	r7, s11
 800813e:	ec51 0b15 	vmov	r0, r1, d5
 8008142:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8008146:	2c00      	cmp	r4, #0
 8008148:	d177      	bne.n	800823a <_dtoa_r+0x492>
 800814a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800814e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008152:	ec41 0b17 	vmov	d7, r0, r1
 8008156:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800815a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815e:	f300 826a 	bgt.w	8008636 <_dtoa_r+0x88e>
 8008162:	eeb1 7b47 	vneg.f64	d7, d7
 8008166:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800816a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800816e:	f100 8260 	bmi.w	8008632 <_dtoa_r+0x88a>
 8008172:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008178:	2a00      	cmp	r2, #0
 800817a:	f2c0 811d 	blt.w	80083b8 <_dtoa_r+0x610>
 800817e:	f1bb 0f0e 	cmp.w	fp, #14
 8008182:	f300 8119 	bgt.w	80083b8 <_dtoa_r+0x610>
 8008186:	4b8a      	ldr	r3, [pc, #552]	; (80083b0 <_dtoa_r+0x608>)
 8008188:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800818c:	ed93 6b00 	vldr	d6, [r3]
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f280 80b7 	bge.w	8008306 <_dtoa_r+0x55e>
 8008198:	f1b9 0f00 	cmp.w	r9, #0
 800819c:	f300 80b3 	bgt.w	8008306 <_dtoa_r+0x55e>
 80081a0:	f040 8246 	bne.w	8008630 <_dtoa_r+0x888>
 80081a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80081a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80081ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b8:	464c      	mov	r4, r9
 80081ba:	464f      	mov	r7, r9
 80081bc:	f280 821c 	bge.w	80085f8 <_dtoa_r+0x850>
 80081c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081c4:	2331      	movs	r3, #49	; 0x31
 80081c6:	f808 3b01 	strb.w	r3, [r8], #1
 80081ca:	f10b 0b01 	add.w	fp, fp, #1
 80081ce:	e218      	b.n	8008602 <_dtoa_r+0x85a>
 80081d0:	2102      	movs	r1, #2
 80081d2:	e780      	b.n	80080d6 <_dtoa_r+0x32e>
 80081d4:	07d4      	lsls	r4, r2, #31
 80081d6:	d504      	bpl.n	80081e2 <_dtoa_r+0x43a>
 80081d8:	ed90 6b00 	vldr	d6, [r0]
 80081dc:	3101      	adds	r1, #1
 80081de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081e2:	1052      	asrs	r2, r2, #1
 80081e4:	3008      	adds	r0, #8
 80081e6:	e777      	b.n	80080d8 <_dtoa_r+0x330>
 80081e8:	d022      	beq.n	8008230 <_dtoa_r+0x488>
 80081ea:	f1cb 0200 	rsb	r2, fp, #0
 80081ee:	4970      	ldr	r1, [pc, #448]	; (80083b0 <_dtoa_r+0x608>)
 80081f0:	f002 000f 	and.w	r0, r2, #15
 80081f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80081f8:	ed91 7b00 	vldr	d7, [r1]
 80081fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008200:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008204:	486b      	ldr	r0, [pc, #428]	; (80083b4 <_dtoa_r+0x60c>)
 8008206:	1112      	asrs	r2, r2, #4
 8008208:	2400      	movs	r4, #0
 800820a:	2102      	movs	r1, #2
 800820c:	b92a      	cbnz	r2, 800821a <_dtoa_r+0x472>
 800820e:	2c00      	cmp	r4, #0
 8008210:	f43f af6a 	beq.w	80080e8 <_dtoa_r+0x340>
 8008214:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008218:	e766      	b.n	80080e8 <_dtoa_r+0x340>
 800821a:	07d7      	lsls	r7, r2, #31
 800821c:	d505      	bpl.n	800822a <_dtoa_r+0x482>
 800821e:	ed90 6b00 	vldr	d6, [r0]
 8008222:	3101      	adds	r1, #1
 8008224:	2401      	movs	r4, #1
 8008226:	ee27 7b06 	vmul.f64	d7, d7, d6
 800822a:	1052      	asrs	r2, r2, #1
 800822c:	3008      	adds	r0, #8
 800822e:	e7ed      	b.n	800820c <_dtoa_r+0x464>
 8008230:	2102      	movs	r1, #2
 8008232:	e759      	b.n	80080e8 <_dtoa_r+0x340>
 8008234:	465a      	mov	r2, fp
 8008236:	464c      	mov	r4, r9
 8008238:	e775      	b.n	8008126 <_dtoa_r+0x37e>
 800823a:	ec41 0b17 	vmov	d7, r0, r1
 800823e:	495c      	ldr	r1, [pc, #368]	; (80083b0 <_dtoa_r+0x608>)
 8008240:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008244:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008248:	9901      	ldr	r1, [sp, #4]
 800824a:	440c      	add	r4, r1
 800824c:	9907      	ldr	r1, [sp, #28]
 800824e:	b351      	cbz	r1, 80082a6 <_dtoa_r+0x4fe>
 8008250:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008254:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008258:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800825c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008260:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008264:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008268:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800826c:	ee14 1a90 	vmov	r1, s9
 8008270:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008274:	3130      	adds	r1, #48	; 0x30
 8008276:	ee36 6b45 	vsub.f64	d6, d6, d5
 800827a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800827e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008282:	f808 1b01 	strb.w	r1, [r8], #1
 8008286:	d439      	bmi.n	80082fc <_dtoa_r+0x554>
 8008288:	ee32 5b46 	vsub.f64	d5, d2, d6
 800828c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008294:	d472      	bmi.n	800837c <_dtoa_r+0x5d4>
 8008296:	45a0      	cmp	r8, r4
 8008298:	f43f af6b 	beq.w	8008172 <_dtoa_r+0x3ca>
 800829c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80082a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80082a4:	e7e0      	b.n	8008268 <_dtoa_r+0x4c0>
 80082a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80082aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80082ae:	4620      	mov	r0, r4
 80082b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80082b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082b8:	ee14 1a90 	vmov	r1, s9
 80082bc:	3130      	adds	r1, #48	; 0x30
 80082be:	f808 1b01 	strb.w	r1, [r8], #1
 80082c2:	45a0      	cmp	r8, r4
 80082c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082cc:	d118      	bne.n	8008300 <_dtoa_r+0x558>
 80082ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80082d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80082d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80082da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082de:	dc4d      	bgt.n	800837c <_dtoa_r+0x5d4>
 80082e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80082e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80082e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ec:	f57f af41 	bpl.w	8008172 <_dtoa_r+0x3ca>
 80082f0:	4680      	mov	r8, r0
 80082f2:	3801      	subs	r0, #1
 80082f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80082f8:	2b30      	cmp	r3, #48	; 0x30
 80082fa:	d0f9      	beq.n	80082f0 <_dtoa_r+0x548>
 80082fc:	4693      	mov	fp, r2
 80082fe:	e02a      	b.n	8008356 <_dtoa_r+0x5ae>
 8008300:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008304:	e7d6      	b.n	80082b4 <_dtoa_r+0x50c>
 8008306:	ed9d 7b02 	vldr	d7, [sp, #8]
 800830a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800830e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008312:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008316:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800831a:	ee15 3a10 	vmov	r3, s10
 800831e:	3330      	adds	r3, #48	; 0x30
 8008320:	f808 3b01 	strb.w	r3, [r8], #1
 8008324:	9b01      	ldr	r3, [sp, #4]
 8008326:	eba8 0303 	sub.w	r3, r8, r3
 800832a:	4599      	cmp	r9, r3
 800832c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008330:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008334:	d133      	bne.n	800839e <_dtoa_r+0x5f6>
 8008336:	ee37 7b07 	vadd.f64	d7, d7, d7
 800833a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800833e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008342:	dc1a      	bgt.n	800837a <_dtoa_r+0x5d2>
 8008344:	eeb4 7b46 	vcmp.f64	d7, d6
 8008348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834c:	d103      	bne.n	8008356 <_dtoa_r+0x5ae>
 800834e:	ee15 3a10 	vmov	r3, s10
 8008352:	07d9      	lsls	r1, r3, #31
 8008354:	d411      	bmi.n	800837a <_dtoa_r+0x5d2>
 8008356:	4629      	mov	r1, r5
 8008358:	4630      	mov	r0, r6
 800835a:	f000 fbd1 	bl	8008b00 <_Bfree>
 800835e:	2300      	movs	r3, #0
 8008360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008362:	f888 3000 	strb.w	r3, [r8]
 8008366:	f10b 0301 	add.w	r3, fp, #1
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800836e:	2b00      	cmp	r3, #0
 8008370:	f43f ad69 	beq.w	8007e46 <_dtoa_r+0x9e>
 8008374:	f8c3 8000 	str.w	r8, [r3]
 8008378:	e565      	b.n	8007e46 <_dtoa_r+0x9e>
 800837a:	465a      	mov	r2, fp
 800837c:	4643      	mov	r3, r8
 800837e:	4698      	mov	r8, r3
 8008380:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008384:	2939      	cmp	r1, #57	; 0x39
 8008386:	d106      	bne.n	8008396 <_dtoa_r+0x5ee>
 8008388:	9901      	ldr	r1, [sp, #4]
 800838a:	4299      	cmp	r1, r3
 800838c:	d1f7      	bne.n	800837e <_dtoa_r+0x5d6>
 800838e:	9801      	ldr	r0, [sp, #4]
 8008390:	2130      	movs	r1, #48	; 0x30
 8008392:	3201      	adds	r2, #1
 8008394:	7001      	strb	r1, [r0, #0]
 8008396:	7819      	ldrb	r1, [r3, #0]
 8008398:	3101      	adds	r1, #1
 800839a:	7019      	strb	r1, [r3, #0]
 800839c:	e7ae      	b.n	80082fc <_dtoa_r+0x554>
 800839e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80083a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083aa:	d1b2      	bne.n	8008312 <_dtoa_r+0x56a>
 80083ac:	e7d3      	b.n	8008356 <_dtoa_r+0x5ae>
 80083ae:	bf00      	nop
 80083b0:	0800fbf0 	.word	0x0800fbf0
 80083b4:	0800fbc8 	.word	0x0800fbc8
 80083b8:	9907      	ldr	r1, [sp, #28]
 80083ba:	2900      	cmp	r1, #0
 80083bc:	f000 80d0 	beq.w	8008560 <_dtoa_r+0x7b8>
 80083c0:	9906      	ldr	r1, [sp, #24]
 80083c2:	2901      	cmp	r1, #1
 80083c4:	f300 80b4 	bgt.w	8008530 <_dtoa_r+0x788>
 80083c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ca:	2900      	cmp	r1, #0
 80083cc:	f000 80ac 	beq.w	8008528 <_dtoa_r+0x780>
 80083d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80083d8:	461c      	mov	r4, r3
 80083da:	9309      	str	r3, [sp, #36]	; 0x24
 80083dc:	9b04      	ldr	r3, [sp, #16]
 80083de:	4413      	add	r3, r2
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	2101      	movs	r1, #1
 80083e6:	4413      	add	r3, r2
 80083e8:	4630      	mov	r0, r6
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	f000 fc3e 	bl	8008c6c <__i2b>
 80083f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f2:	4607      	mov	r7, r0
 80083f4:	f1b8 0f00 	cmp.w	r8, #0
 80083f8:	d00d      	beq.n	8008416 <_dtoa_r+0x66e>
 80083fa:	9a05      	ldr	r2, [sp, #20]
 80083fc:	2a00      	cmp	r2, #0
 80083fe:	dd0a      	ble.n	8008416 <_dtoa_r+0x66e>
 8008400:	4542      	cmp	r2, r8
 8008402:	9904      	ldr	r1, [sp, #16]
 8008404:	bfa8      	it	ge
 8008406:	4642      	movge	r2, r8
 8008408:	1a89      	subs	r1, r1, r2
 800840a:	9104      	str	r1, [sp, #16]
 800840c:	9905      	ldr	r1, [sp, #20]
 800840e:	eba8 0802 	sub.w	r8, r8, r2
 8008412:	1a8a      	subs	r2, r1, r2
 8008414:	9205      	str	r2, [sp, #20]
 8008416:	b303      	cbz	r3, 800845a <_dtoa_r+0x6b2>
 8008418:	9a07      	ldr	r2, [sp, #28]
 800841a:	2a00      	cmp	r2, #0
 800841c:	f000 80a5 	beq.w	800856a <_dtoa_r+0x7c2>
 8008420:	2c00      	cmp	r4, #0
 8008422:	dd13      	ble.n	800844c <_dtoa_r+0x6a4>
 8008424:	4639      	mov	r1, r7
 8008426:	4622      	mov	r2, r4
 8008428:	4630      	mov	r0, r6
 800842a:	930d      	str	r3, [sp, #52]	; 0x34
 800842c:	f000 fcde 	bl	8008dec <__pow5mult>
 8008430:	462a      	mov	r2, r5
 8008432:	4601      	mov	r1, r0
 8008434:	4607      	mov	r7, r0
 8008436:	4630      	mov	r0, r6
 8008438:	f000 fc2e 	bl	8008c98 <__multiply>
 800843c:	4629      	mov	r1, r5
 800843e:	9009      	str	r0, [sp, #36]	; 0x24
 8008440:	4630      	mov	r0, r6
 8008442:	f000 fb5d 	bl	8008b00 <_Bfree>
 8008446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800844a:	4615      	mov	r5, r2
 800844c:	1b1a      	subs	r2, r3, r4
 800844e:	d004      	beq.n	800845a <_dtoa_r+0x6b2>
 8008450:	4629      	mov	r1, r5
 8008452:	4630      	mov	r0, r6
 8008454:	f000 fcca 	bl	8008dec <__pow5mult>
 8008458:	4605      	mov	r5, r0
 800845a:	2101      	movs	r1, #1
 800845c:	4630      	mov	r0, r6
 800845e:	f000 fc05 	bl	8008c6c <__i2b>
 8008462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008464:	2b00      	cmp	r3, #0
 8008466:	4604      	mov	r4, r0
 8008468:	f340 8081 	ble.w	800856e <_dtoa_r+0x7c6>
 800846c:	461a      	mov	r2, r3
 800846e:	4601      	mov	r1, r0
 8008470:	4630      	mov	r0, r6
 8008472:	f000 fcbb 	bl	8008dec <__pow5mult>
 8008476:	9b06      	ldr	r3, [sp, #24]
 8008478:	2b01      	cmp	r3, #1
 800847a:	4604      	mov	r4, r0
 800847c:	dd7a      	ble.n	8008574 <_dtoa_r+0x7cc>
 800847e:	2300      	movs	r3, #0
 8008480:	9309      	str	r3, [sp, #36]	; 0x24
 8008482:	6922      	ldr	r2, [r4, #16]
 8008484:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008488:	6910      	ldr	r0, [r2, #16]
 800848a:	f000 fba1 	bl	8008bd0 <__hi0bits>
 800848e:	f1c0 0020 	rsb	r0, r0, #32
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	4418      	add	r0, r3
 8008496:	f010 001f 	ands.w	r0, r0, #31
 800849a:	f000 8093 	beq.w	80085c4 <_dtoa_r+0x81c>
 800849e:	f1c0 0220 	rsb	r2, r0, #32
 80084a2:	2a04      	cmp	r2, #4
 80084a4:	f340 8085 	ble.w	80085b2 <_dtoa_r+0x80a>
 80084a8:	9b04      	ldr	r3, [sp, #16]
 80084aa:	f1c0 001c 	rsb	r0, r0, #28
 80084ae:	4403      	add	r3, r0
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	9b05      	ldr	r3, [sp, #20]
 80084b4:	4480      	add	r8, r0
 80084b6:	4403      	add	r3, r0
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dd05      	ble.n	80084cc <_dtoa_r+0x724>
 80084c0:	4629      	mov	r1, r5
 80084c2:	461a      	mov	r2, r3
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 fceb 	bl	8008ea0 <__lshift>
 80084ca:	4605      	mov	r5, r0
 80084cc:	9b05      	ldr	r3, [sp, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd05      	ble.n	80084de <_dtoa_r+0x736>
 80084d2:	4621      	mov	r1, r4
 80084d4:	461a      	mov	r2, r3
 80084d6:	4630      	mov	r0, r6
 80084d8:	f000 fce2 	bl	8008ea0 <__lshift>
 80084dc:	4604      	mov	r4, r0
 80084de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d071      	beq.n	80085c8 <_dtoa_r+0x820>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4628      	mov	r0, r5
 80084e8:	f000 fd46 	bl	8008f78 <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	da6b      	bge.n	80085c8 <_dtoa_r+0x820>
 80084f0:	2300      	movs	r3, #0
 80084f2:	4629      	mov	r1, r5
 80084f4:	220a      	movs	r2, #10
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 fb24 	bl	8008b44 <__multadd>
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008502:	4605      	mov	r5, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8197 	beq.w	8008838 <_dtoa_r+0xa90>
 800850a:	4639      	mov	r1, r7
 800850c:	2300      	movs	r3, #0
 800850e:	220a      	movs	r2, #10
 8008510:	4630      	mov	r0, r6
 8008512:	f000 fb17 	bl	8008b44 <__multadd>
 8008516:	f1ba 0f00 	cmp.w	sl, #0
 800851a:	4607      	mov	r7, r0
 800851c:	f300 8093 	bgt.w	8008646 <_dtoa_r+0x89e>
 8008520:	9b06      	ldr	r3, [sp, #24]
 8008522:	2b02      	cmp	r3, #2
 8008524:	dc57      	bgt.n	80085d6 <_dtoa_r+0x82e>
 8008526:	e08e      	b.n	8008646 <_dtoa_r+0x89e>
 8008528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800852a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800852e:	e751      	b.n	80083d4 <_dtoa_r+0x62c>
 8008530:	f109 34ff 	add.w	r4, r9, #4294967295
 8008534:	42a3      	cmp	r3, r4
 8008536:	bfbf      	itttt	lt
 8008538:	1ae2      	sublt	r2, r4, r3
 800853a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800853c:	189b      	addlt	r3, r3, r2
 800853e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008540:	bfae      	itee	ge
 8008542:	1b1c      	subge	r4, r3, r4
 8008544:	4623      	movlt	r3, r4
 8008546:	2400      	movlt	r4, #0
 8008548:	f1b9 0f00 	cmp.w	r9, #0
 800854c:	bfb5      	itete	lt
 800854e:	9a04      	ldrlt	r2, [sp, #16]
 8008550:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008554:	eba2 0809 	sublt.w	r8, r2, r9
 8008558:	464a      	movge	r2, r9
 800855a:	bfb8      	it	lt
 800855c:	2200      	movlt	r2, #0
 800855e:	e73c      	b.n	80083da <_dtoa_r+0x632>
 8008560:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008564:	9f07      	ldr	r7, [sp, #28]
 8008566:	461c      	mov	r4, r3
 8008568:	e744      	b.n	80083f4 <_dtoa_r+0x64c>
 800856a:	461a      	mov	r2, r3
 800856c:	e770      	b.n	8008450 <_dtoa_r+0x6a8>
 800856e:	9b06      	ldr	r3, [sp, #24]
 8008570:	2b01      	cmp	r3, #1
 8008572:	dc18      	bgt.n	80085a6 <_dtoa_r+0x7fe>
 8008574:	9b02      	ldr	r3, [sp, #8]
 8008576:	b9b3      	cbnz	r3, 80085a6 <_dtoa_r+0x7fe>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800857e:	b9a2      	cbnz	r2, 80085aa <_dtoa_r+0x802>
 8008580:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008584:	0d12      	lsrs	r2, r2, #20
 8008586:	0512      	lsls	r2, r2, #20
 8008588:	b18a      	cbz	r2, 80085ae <_dtoa_r+0x806>
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	3301      	adds	r3, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	9b05      	ldr	r3, [sp, #20]
 8008592:	3301      	adds	r3, #1
 8008594:	9305      	str	r3, [sp, #20]
 8008596:	2301      	movs	r3, #1
 8008598:	9309      	str	r3, [sp, #36]	; 0x24
 800859a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800859c:	2b00      	cmp	r3, #0
 800859e:	f47f af70 	bne.w	8008482 <_dtoa_r+0x6da>
 80085a2:	2001      	movs	r0, #1
 80085a4:	e775      	b.n	8008492 <_dtoa_r+0x6ea>
 80085a6:	2300      	movs	r3, #0
 80085a8:	e7f6      	b.n	8008598 <_dtoa_r+0x7f0>
 80085aa:	9b02      	ldr	r3, [sp, #8]
 80085ac:	e7f4      	b.n	8008598 <_dtoa_r+0x7f0>
 80085ae:	9209      	str	r2, [sp, #36]	; 0x24
 80085b0:	e7f3      	b.n	800859a <_dtoa_r+0x7f2>
 80085b2:	d082      	beq.n	80084ba <_dtoa_r+0x712>
 80085b4:	9b04      	ldr	r3, [sp, #16]
 80085b6:	321c      	adds	r2, #28
 80085b8:	4413      	add	r3, r2
 80085ba:	9304      	str	r3, [sp, #16]
 80085bc:	9b05      	ldr	r3, [sp, #20]
 80085be:	4490      	add	r8, r2
 80085c0:	4413      	add	r3, r2
 80085c2:	e779      	b.n	80084b8 <_dtoa_r+0x710>
 80085c4:	4602      	mov	r2, r0
 80085c6:	e7f5      	b.n	80085b4 <_dtoa_r+0x80c>
 80085c8:	f1b9 0f00 	cmp.w	r9, #0
 80085cc:	dc36      	bgt.n	800863c <_dtoa_r+0x894>
 80085ce:	9b06      	ldr	r3, [sp, #24]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	dd33      	ble.n	800863c <_dtoa_r+0x894>
 80085d4:	46ca      	mov	sl, r9
 80085d6:	f1ba 0f00 	cmp.w	sl, #0
 80085da:	d10d      	bne.n	80085f8 <_dtoa_r+0x850>
 80085dc:	4621      	mov	r1, r4
 80085de:	4653      	mov	r3, sl
 80085e0:	2205      	movs	r2, #5
 80085e2:	4630      	mov	r0, r6
 80085e4:	f000 faae 	bl	8008b44 <__multadd>
 80085e8:	4601      	mov	r1, r0
 80085ea:	4604      	mov	r4, r0
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 fcc3 	bl	8008f78 <__mcmp>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	f73f ade4 	bgt.w	80081c0 <_dtoa_r+0x418>
 80085f8:	9b08      	ldr	r3, [sp, #32]
 80085fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80085fe:	ea6f 0b03 	mvn.w	fp, r3
 8008602:	f04f 0900 	mov.w	r9, #0
 8008606:	4621      	mov	r1, r4
 8008608:	4630      	mov	r0, r6
 800860a:	f000 fa79 	bl	8008b00 <_Bfree>
 800860e:	2f00      	cmp	r7, #0
 8008610:	f43f aea1 	beq.w	8008356 <_dtoa_r+0x5ae>
 8008614:	f1b9 0f00 	cmp.w	r9, #0
 8008618:	d005      	beq.n	8008626 <_dtoa_r+0x87e>
 800861a:	45b9      	cmp	r9, r7
 800861c:	d003      	beq.n	8008626 <_dtoa_r+0x87e>
 800861e:	4649      	mov	r1, r9
 8008620:	4630      	mov	r0, r6
 8008622:	f000 fa6d 	bl	8008b00 <_Bfree>
 8008626:	4639      	mov	r1, r7
 8008628:	4630      	mov	r0, r6
 800862a:	f000 fa69 	bl	8008b00 <_Bfree>
 800862e:	e692      	b.n	8008356 <_dtoa_r+0x5ae>
 8008630:	2400      	movs	r4, #0
 8008632:	4627      	mov	r7, r4
 8008634:	e7e0      	b.n	80085f8 <_dtoa_r+0x850>
 8008636:	4693      	mov	fp, r2
 8008638:	4627      	mov	r7, r4
 800863a:	e5c1      	b.n	80081c0 <_dtoa_r+0x418>
 800863c:	9b07      	ldr	r3, [sp, #28]
 800863e:	46ca      	mov	sl, r9
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8100 	beq.w	8008846 <_dtoa_r+0xa9e>
 8008646:	f1b8 0f00 	cmp.w	r8, #0
 800864a:	dd05      	ble.n	8008658 <_dtoa_r+0x8b0>
 800864c:	4639      	mov	r1, r7
 800864e:	4642      	mov	r2, r8
 8008650:	4630      	mov	r0, r6
 8008652:	f000 fc25 	bl	8008ea0 <__lshift>
 8008656:	4607      	mov	r7, r0
 8008658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d05d      	beq.n	800871a <_dtoa_r+0x972>
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4630      	mov	r0, r6
 8008662:	f000 fa0d 	bl	8008a80 <_Balloc>
 8008666:	4680      	mov	r8, r0
 8008668:	b928      	cbnz	r0, 8008676 <_dtoa_r+0x8ce>
 800866a:	4b82      	ldr	r3, [pc, #520]	; (8008874 <_dtoa_r+0xacc>)
 800866c:	4602      	mov	r2, r0
 800866e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008672:	f7ff bbb1 	b.w	8007dd8 <_dtoa_r+0x30>
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	3202      	adds	r2, #2
 800867a:	0092      	lsls	r2, r2, #2
 800867c:	f107 010c 	add.w	r1, r7, #12
 8008680:	300c      	adds	r0, #12
 8008682:	f000 ffa9 	bl	80095d8 <memcpy>
 8008686:	2201      	movs	r2, #1
 8008688:	4641      	mov	r1, r8
 800868a:	4630      	mov	r0, r6
 800868c:	f000 fc08 	bl	8008ea0 <__lshift>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	3301      	adds	r3, #1
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	4453      	add	r3, sl
 800869a:	9308      	str	r3, [sp, #32]
 800869c:	9b02      	ldr	r3, [sp, #8]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	46b9      	mov	r9, r7
 80086a4:	9307      	str	r3, [sp, #28]
 80086a6:	4607      	mov	r7, r0
 80086a8:	9b04      	ldr	r3, [sp, #16]
 80086aa:	4621      	mov	r1, r4
 80086ac:	3b01      	subs	r3, #1
 80086ae:	4628      	mov	r0, r5
 80086b0:	9302      	str	r3, [sp, #8]
 80086b2:	f7ff faf1 	bl	8007c98 <quorem>
 80086b6:	4603      	mov	r3, r0
 80086b8:	3330      	adds	r3, #48	; 0x30
 80086ba:	9005      	str	r0, [sp, #20]
 80086bc:	4649      	mov	r1, r9
 80086be:	4628      	mov	r0, r5
 80086c0:	9309      	str	r3, [sp, #36]	; 0x24
 80086c2:	f000 fc59 	bl	8008f78 <__mcmp>
 80086c6:	463a      	mov	r2, r7
 80086c8:	4682      	mov	sl, r0
 80086ca:	4621      	mov	r1, r4
 80086cc:	4630      	mov	r0, r6
 80086ce:	f000 fc6f 	bl	8008fb0 <__mdiff>
 80086d2:	68c2      	ldr	r2, [r0, #12]
 80086d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d6:	4680      	mov	r8, r0
 80086d8:	bb0a      	cbnz	r2, 800871e <_dtoa_r+0x976>
 80086da:	4601      	mov	r1, r0
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 fc4b 	bl	8008f78 <__mcmp>
 80086e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e4:	4602      	mov	r2, r0
 80086e6:	4641      	mov	r1, r8
 80086e8:	4630      	mov	r0, r6
 80086ea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80086ee:	f000 fa07 	bl	8008b00 <_Bfree>
 80086f2:	9b06      	ldr	r3, [sp, #24]
 80086f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086f6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80086fa:	ea43 0102 	orr.w	r1, r3, r2
 80086fe:	9b07      	ldr	r3, [sp, #28]
 8008700:	4319      	orrs	r1, r3
 8008702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008704:	d10d      	bne.n	8008722 <_dtoa_r+0x97a>
 8008706:	2b39      	cmp	r3, #57	; 0x39
 8008708:	d029      	beq.n	800875e <_dtoa_r+0x9b6>
 800870a:	f1ba 0f00 	cmp.w	sl, #0
 800870e:	dd01      	ble.n	8008714 <_dtoa_r+0x96c>
 8008710:	9b05      	ldr	r3, [sp, #20]
 8008712:	3331      	adds	r3, #49	; 0x31
 8008714:	9a02      	ldr	r2, [sp, #8]
 8008716:	7013      	strb	r3, [r2, #0]
 8008718:	e775      	b.n	8008606 <_dtoa_r+0x85e>
 800871a:	4638      	mov	r0, r7
 800871c:	e7b8      	b.n	8008690 <_dtoa_r+0x8e8>
 800871e:	2201      	movs	r2, #1
 8008720:	e7e1      	b.n	80086e6 <_dtoa_r+0x93e>
 8008722:	f1ba 0f00 	cmp.w	sl, #0
 8008726:	db06      	blt.n	8008736 <_dtoa_r+0x98e>
 8008728:	9906      	ldr	r1, [sp, #24]
 800872a:	ea41 0a0a 	orr.w	sl, r1, sl
 800872e:	9907      	ldr	r1, [sp, #28]
 8008730:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008734:	d120      	bne.n	8008778 <_dtoa_r+0x9d0>
 8008736:	2a00      	cmp	r2, #0
 8008738:	ddec      	ble.n	8008714 <_dtoa_r+0x96c>
 800873a:	4629      	mov	r1, r5
 800873c:	2201      	movs	r2, #1
 800873e:	4630      	mov	r0, r6
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	f000 fbad 	bl	8008ea0 <__lshift>
 8008746:	4621      	mov	r1, r4
 8008748:	4605      	mov	r5, r0
 800874a:	f000 fc15 	bl	8008f78 <__mcmp>
 800874e:	2800      	cmp	r0, #0
 8008750:	9b04      	ldr	r3, [sp, #16]
 8008752:	dc02      	bgt.n	800875a <_dtoa_r+0x9b2>
 8008754:	d1de      	bne.n	8008714 <_dtoa_r+0x96c>
 8008756:	07da      	lsls	r2, r3, #31
 8008758:	d5dc      	bpl.n	8008714 <_dtoa_r+0x96c>
 800875a:	2b39      	cmp	r3, #57	; 0x39
 800875c:	d1d8      	bne.n	8008710 <_dtoa_r+0x968>
 800875e:	9a02      	ldr	r2, [sp, #8]
 8008760:	2339      	movs	r3, #57	; 0x39
 8008762:	7013      	strb	r3, [r2, #0]
 8008764:	4643      	mov	r3, r8
 8008766:	4698      	mov	r8, r3
 8008768:	3b01      	subs	r3, #1
 800876a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800876e:	2a39      	cmp	r2, #57	; 0x39
 8008770:	d051      	beq.n	8008816 <_dtoa_r+0xa6e>
 8008772:	3201      	adds	r2, #1
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e746      	b.n	8008606 <_dtoa_r+0x85e>
 8008778:	2a00      	cmp	r2, #0
 800877a:	dd03      	ble.n	8008784 <_dtoa_r+0x9dc>
 800877c:	2b39      	cmp	r3, #57	; 0x39
 800877e:	d0ee      	beq.n	800875e <_dtoa_r+0x9b6>
 8008780:	3301      	adds	r3, #1
 8008782:	e7c7      	b.n	8008714 <_dtoa_r+0x96c>
 8008784:	9a04      	ldr	r2, [sp, #16]
 8008786:	9908      	ldr	r1, [sp, #32]
 8008788:	f802 3c01 	strb.w	r3, [r2, #-1]
 800878c:	428a      	cmp	r2, r1
 800878e:	d02b      	beq.n	80087e8 <_dtoa_r+0xa40>
 8008790:	4629      	mov	r1, r5
 8008792:	2300      	movs	r3, #0
 8008794:	220a      	movs	r2, #10
 8008796:	4630      	mov	r0, r6
 8008798:	f000 f9d4 	bl	8008b44 <__multadd>
 800879c:	45b9      	cmp	r9, r7
 800879e:	4605      	mov	r5, r0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	f04f 020a 	mov.w	r2, #10
 80087a8:	4649      	mov	r1, r9
 80087aa:	4630      	mov	r0, r6
 80087ac:	d107      	bne.n	80087be <_dtoa_r+0xa16>
 80087ae:	f000 f9c9 	bl	8008b44 <__multadd>
 80087b2:	4681      	mov	r9, r0
 80087b4:	4607      	mov	r7, r0
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	3301      	adds	r3, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	e774      	b.n	80086a8 <_dtoa_r+0x900>
 80087be:	f000 f9c1 	bl	8008b44 <__multadd>
 80087c2:	4639      	mov	r1, r7
 80087c4:	4681      	mov	r9, r0
 80087c6:	2300      	movs	r3, #0
 80087c8:	220a      	movs	r2, #10
 80087ca:	4630      	mov	r0, r6
 80087cc:	f000 f9ba 	bl	8008b44 <__multadd>
 80087d0:	4607      	mov	r7, r0
 80087d2:	e7f0      	b.n	80087b6 <_dtoa_r+0xa0e>
 80087d4:	f1ba 0f00 	cmp.w	sl, #0
 80087d8:	9a01      	ldr	r2, [sp, #4]
 80087da:	bfcc      	ite	gt
 80087dc:	46d0      	movgt	r8, sl
 80087de:	f04f 0801 	movle.w	r8, #1
 80087e2:	4490      	add	r8, r2
 80087e4:	f04f 0900 	mov.w	r9, #0
 80087e8:	4629      	mov	r1, r5
 80087ea:	2201      	movs	r2, #1
 80087ec:	4630      	mov	r0, r6
 80087ee:	9302      	str	r3, [sp, #8]
 80087f0:	f000 fb56 	bl	8008ea0 <__lshift>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4605      	mov	r5, r0
 80087f8:	f000 fbbe 	bl	8008f78 <__mcmp>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	dcb1      	bgt.n	8008764 <_dtoa_r+0x9bc>
 8008800:	d102      	bne.n	8008808 <_dtoa_r+0xa60>
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	07db      	lsls	r3, r3, #31
 8008806:	d4ad      	bmi.n	8008764 <_dtoa_r+0x9bc>
 8008808:	4643      	mov	r3, r8
 800880a:	4698      	mov	r8, r3
 800880c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008810:	2a30      	cmp	r2, #48	; 0x30
 8008812:	d0fa      	beq.n	800880a <_dtoa_r+0xa62>
 8008814:	e6f7      	b.n	8008606 <_dtoa_r+0x85e>
 8008816:	9a01      	ldr	r2, [sp, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d1a4      	bne.n	8008766 <_dtoa_r+0x9be>
 800881c:	f10b 0b01 	add.w	fp, fp, #1
 8008820:	2331      	movs	r3, #49	; 0x31
 8008822:	e778      	b.n	8008716 <_dtoa_r+0x96e>
 8008824:	4b14      	ldr	r3, [pc, #80]	; (8008878 <_dtoa_r+0xad0>)
 8008826:	f7ff bb2a 	b.w	8007e7e <_dtoa_r+0xd6>
 800882a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800882c:	2b00      	cmp	r3, #0
 800882e:	f47f ab05 	bne.w	8007e3c <_dtoa_r+0x94>
 8008832:	4b12      	ldr	r3, [pc, #72]	; (800887c <_dtoa_r+0xad4>)
 8008834:	f7ff bb23 	b.w	8007e7e <_dtoa_r+0xd6>
 8008838:	f1ba 0f00 	cmp.w	sl, #0
 800883c:	dc03      	bgt.n	8008846 <_dtoa_r+0xa9e>
 800883e:	9b06      	ldr	r3, [sp, #24]
 8008840:	2b02      	cmp	r3, #2
 8008842:	f73f aec8 	bgt.w	80085d6 <_dtoa_r+0x82e>
 8008846:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800884a:	4621      	mov	r1, r4
 800884c:	4628      	mov	r0, r5
 800884e:	f7ff fa23 	bl	8007c98 <quorem>
 8008852:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008856:	f808 3b01 	strb.w	r3, [r8], #1
 800885a:	9a01      	ldr	r2, [sp, #4]
 800885c:	eba8 0202 	sub.w	r2, r8, r2
 8008860:	4592      	cmp	sl, r2
 8008862:	ddb7      	ble.n	80087d4 <_dtoa_r+0xa2c>
 8008864:	4629      	mov	r1, r5
 8008866:	2300      	movs	r3, #0
 8008868:	220a      	movs	r2, #10
 800886a:	4630      	mov	r0, r6
 800886c:	f000 f96a 	bl	8008b44 <__multadd>
 8008870:	4605      	mov	r5, r0
 8008872:	e7ea      	b.n	800884a <_dtoa_r+0xaa2>
 8008874:	0800fb58 	.word	0x0800fb58
 8008878:	0800fab8 	.word	0x0800fab8
 800887c:	0800fadc 	.word	0x0800fadc

08008880 <_free_r>:
 8008880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008882:	2900      	cmp	r1, #0
 8008884:	d044      	beq.n	8008910 <_free_r+0x90>
 8008886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800888a:	9001      	str	r0, [sp, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f1a1 0404 	sub.w	r4, r1, #4
 8008892:	bfb8      	it	lt
 8008894:	18e4      	addlt	r4, r4, r3
 8008896:	f000 f8e7 	bl	8008a68 <__malloc_lock>
 800889a:	4a1e      	ldr	r2, [pc, #120]	; (8008914 <_free_r+0x94>)
 800889c:	9801      	ldr	r0, [sp, #4]
 800889e:	6813      	ldr	r3, [r2, #0]
 80088a0:	b933      	cbnz	r3, 80088b0 <_free_r+0x30>
 80088a2:	6063      	str	r3, [r4, #4]
 80088a4:	6014      	str	r4, [r2, #0]
 80088a6:	b003      	add	sp, #12
 80088a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088ac:	f000 b8e2 	b.w	8008a74 <__malloc_unlock>
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	d908      	bls.n	80088c6 <_free_r+0x46>
 80088b4:	6825      	ldr	r5, [r4, #0]
 80088b6:	1961      	adds	r1, r4, r5
 80088b8:	428b      	cmp	r3, r1
 80088ba:	bf01      	itttt	eq
 80088bc:	6819      	ldreq	r1, [r3, #0]
 80088be:	685b      	ldreq	r3, [r3, #4]
 80088c0:	1949      	addeq	r1, r1, r5
 80088c2:	6021      	streq	r1, [r4, #0]
 80088c4:	e7ed      	b.n	80088a2 <_free_r+0x22>
 80088c6:	461a      	mov	r2, r3
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	b10b      	cbz	r3, 80088d0 <_free_r+0x50>
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d9fa      	bls.n	80088c6 <_free_r+0x46>
 80088d0:	6811      	ldr	r1, [r2, #0]
 80088d2:	1855      	adds	r5, r2, r1
 80088d4:	42a5      	cmp	r5, r4
 80088d6:	d10b      	bne.n	80088f0 <_free_r+0x70>
 80088d8:	6824      	ldr	r4, [r4, #0]
 80088da:	4421      	add	r1, r4
 80088dc:	1854      	adds	r4, r2, r1
 80088de:	42a3      	cmp	r3, r4
 80088e0:	6011      	str	r1, [r2, #0]
 80088e2:	d1e0      	bne.n	80088a6 <_free_r+0x26>
 80088e4:	681c      	ldr	r4, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	6053      	str	r3, [r2, #4]
 80088ea:	440c      	add	r4, r1
 80088ec:	6014      	str	r4, [r2, #0]
 80088ee:	e7da      	b.n	80088a6 <_free_r+0x26>
 80088f0:	d902      	bls.n	80088f8 <_free_r+0x78>
 80088f2:	230c      	movs	r3, #12
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	e7d6      	b.n	80088a6 <_free_r+0x26>
 80088f8:	6825      	ldr	r5, [r4, #0]
 80088fa:	1961      	adds	r1, r4, r5
 80088fc:	428b      	cmp	r3, r1
 80088fe:	bf04      	itt	eq
 8008900:	6819      	ldreq	r1, [r3, #0]
 8008902:	685b      	ldreq	r3, [r3, #4]
 8008904:	6063      	str	r3, [r4, #4]
 8008906:	bf04      	itt	eq
 8008908:	1949      	addeq	r1, r1, r5
 800890a:	6021      	streq	r1, [r4, #0]
 800890c:	6054      	str	r4, [r2, #4]
 800890e:	e7ca      	b.n	80088a6 <_free_r+0x26>
 8008910:	b003      	add	sp, #12
 8008912:	bd30      	pop	{r4, r5, pc}
 8008914:	20000530 	.word	0x20000530

08008918 <malloc>:
 8008918:	4b02      	ldr	r3, [pc, #8]	; (8008924 <malloc+0xc>)
 800891a:	4601      	mov	r1, r0
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f000 b823 	b.w	8008968 <_malloc_r>
 8008922:	bf00      	nop
 8008924:	20000068 	.word	0x20000068

08008928 <sbrk_aligned>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4e0e      	ldr	r6, [pc, #56]	; (8008964 <sbrk_aligned+0x3c>)
 800892c:	460c      	mov	r4, r1
 800892e:	6831      	ldr	r1, [r6, #0]
 8008930:	4605      	mov	r5, r0
 8008932:	b911      	cbnz	r1, 800893a <sbrk_aligned+0x12>
 8008934:	f000 fe40 	bl	80095b8 <_sbrk_r>
 8008938:	6030      	str	r0, [r6, #0]
 800893a:	4621      	mov	r1, r4
 800893c:	4628      	mov	r0, r5
 800893e:	f000 fe3b 	bl	80095b8 <_sbrk_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d00a      	beq.n	800895c <sbrk_aligned+0x34>
 8008946:	1cc4      	adds	r4, r0, #3
 8008948:	f024 0403 	bic.w	r4, r4, #3
 800894c:	42a0      	cmp	r0, r4
 800894e:	d007      	beq.n	8008960 <sbrk_aligned+0x38>
 8008950:	1a21      	subs	r1, r4, r0
 8008952:	4628      	mov	r0, r5
 8008954:	f000 fe30 	bl	80095b8 <_sbrk_r>
 8008958:	3001      	adds	r0, #1
 800895a:	d101      	bne.n	8008960 <sbrk_aligned+0x38>
 800895c:	f04f 34ff 	mov.w	r4, #4294967295
 8008960:	4620      	mov	r0, r4
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	20000534 	.word	0x20000534

08008968 <_malloc_r>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	1ccd      	adds	r5, r1, #3
 800896e:	f025 0503 	bic.w	r5, r5, #3
 8008972:	3508      	adds	r5, #8
 8008974:	2d0c      	cmp	r5, #12
 8008976:	bf38      	it	cc
 8008978:	250c      	movcc	r5, #12
 800897a:	2d00      	cmp	r5, #0
 800897c:	4607      	mov	r7, r0
 800897e:	db01      	blt.n	8008984 <_malloc_r+0x1c>
 8008980:	42a9      	cmp	r1, r5
 8008982:	d905      	bls.n	8008990 <_malloc_r+0x28>
 8008984:	230c      	movs	r3, #12
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	2600      	movs	r6, #0
 800898a:	4630      	mov	r0, r6
 800898c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008990:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a64 <_malloc_r+0xfc>
 8008994:	f000 f868 	bl	8008a68 <__malloc_lock>
 8008998:	f8d8 3000 	ldr.w	r3, [r8]
 800899c:	461c      	mov	r4, r3
 800899e:	bb5c      	cbnz	r4, 80089f8 <_malloc_r+0x90>
 80089a0:	4629      	mov	r1, r5
 80089a2:	4638      	mov	r0, r7
 80089a4:	f7ff ffc0 	bl	8008928 <sbrk_aligned>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	4604      	mov	r4, r0
 80089ac:	d155      	bne.n	8008a5a <_malloc_r+0xf2>
 80089ae:	f8d8 4000 	ldr.w	r4, [r8]
 80089b2:	4626      	mov	r6, r4
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	d145      	bne.n	8008a44 <_malloc_r+0xdc>
 80089b8:	2c00      	cmp	r4, #0
 80089ba:	d048      	beq.n	8008a4e <_malloc_r+0xe6>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	4631      	mov	r1, r6
 80089c0:	4638      	mov	r0, r7
 80089c2:	eb04 0903 	add.w	r9, r4, r3
 80089c6:	f000 fdf7 	bl	80095b8 <_sbrk_r>
 80089ca:	4581      	cmp	r9, r0
 80089cc:	d13f      	bne.n	8008a4e <_malloc_r+0xe6>
 80089ce:	6821      	ldr	r1, [r4, #0]
 80089d0:	1a6d      	subs	r5, r5, r1
 80089d2:	4629      	mov	r1, r5
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7ff ffa7 	bl	8008928 <sbrk_aligned>
 80089da:	3001      	adds	r0, #1
 80089dc:	d037      	beq.n	8008a4e <_malloc_r+0xe6>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	442b      	add	r3, r5
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	f8d8 3000 	ldr.w	r3, [r8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d038      	beq.n	8008a5e <_malloc_r+0xf6>
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	42a2      	cmp	r2, r4
 80089f0:	d12b      	bne.n	8008a4a <_malloc_r+0xe2>
 80089f2:	2200      	movs	r2, #0
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	e00f      	b.n	8008a18 <_malloc_r+0xb0>
 80089f8:	6822      	ldr	r2, [r4, #0]
 80089fa:	1b52      	subs	r2, r2, r5
 80089fc:	d41f      	bmi.n	8008a3e <_malloc_r+0xd6>
 80089fe:	2a0b      	cmp	r2, #11
 8008a00:	d917      	bls.n	8008a32 <_malloc_r+0xca>
 8008a02:	1961      	adds	r1, r4, r5
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	6025      	str	r5, [r4, #0]
 8008a08:	bf18      	it	ne
 8008a0a:	6059      	strne	r1, [r3, #4]
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	bf08      	it	eq
 8008a10:	f8c8 1000 	streq.w	r1, [r8]
 8008a14:	5162      	str	r2, [r4, r5]
 8008a16:	604b      	str	r3, [r1, #4]
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f104 060b 	add.w	r6, r4, #11
 8008a1e:	f000 f829 	bl	8008a74 <__malloc_unlock>
 8008a22:	f026 0607 	bic.w	r6, r6, #7
 8008a26:	1d23      	adds	r3, r4, #4
 8008a28:	1af2      	subs	r2, r6, r3
 8008a2a:	d0ae      	beq.n	800898a <_malloc_r+0x22>
 8008a2c:	1b9b      	subs	r3, r3, r6
 8008a2e:	50a3      	str	r3, [r4, r2]
 8008a30:	e7ab      	b.n	800898a <_malloc_r+0x22>
 8008a32:	42a3      	cmp	r3, r4
 8008a34:	6862      	ldr	r2, [r4, #4]
 8008a36:	d1dd      	bne.n	80089f4 <_malloc_r+0x8c>
 8008a38:	f8c8 2000 	str.w	r2, [r8]
 8008a3c:	e7ec      	b.n	8008a18 <_malloc_r+0xb0>
 8008a3e:	4623      	mov	r3, r4
 8008a40:	6864      	ldr	r4, [r4, #4]
 8008a42:	e7ac      	b.n	800899e <_malloc_r+0x36>
 8008a44:	4634      	mov	r4, r6
 8008a46:	6876      	ldr	r6, [r6, #4]
 8008a48:	e7b4      	b.n	80089b4 <_malloc_r+0x4c>
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	e7cc      	b.n	80089e8 <_malloc_r+0x80>
 8008a4e:	230c      	movs	r3, #12
 8008a50:	603b      	str	r3, [r7, #0]
 8008a52:	4638      	mov	r0, r7
 8008a54:	f000 f80e 	bl	8008a74 <__malloc_unlock>
 8008a58:	e797      	b.n	800898a <_malloc_r+0x22>
 8008a5a:	6025      	str	r5, [r4, #0]
 8008a5c:	e7dc      	b.n	8008a18 <_malloc_r+0xb0>
 8008a5e:	605b      	str	r3, [r3, #4]
 8008a60:	deff      	udf	#255	; 0xff
 8008a62:	bf00      	nop
 8008a64:	20000530 	.word	0x20000530

08008a68 <__malloc_lock>:
 8008a68:	4801      	ldr	r0, [pc, #4]	; (8008a70 <__malloc_lock+0x8>)
 8008a6a:	f7ff b913 	b.w	8007c94 <__retarget_lock_acquire_recursive>
 8008a6e:	bf00      	nop
 8008a70:	2000052c 	.word	0x2000052c

08008a74 <__malloc_unlock>:
 8008a74:	4801      	ldr	r0, [pc, #4]	; (8008a7c <__malloc_unlock+0x8>)
 8008a76:	f7ff b90e 	b.w	8007c96 <__retarget_lock_release_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	2000052c 	.word	0x2000052c

08008a80 <_Balloc>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	69c6      	ldr	r6, [r0, #28]
 8008a84:	4604      	mov	r4, r0
 8008a86:	460d      	mov	r5, r1
 8008a88:	b976      	cbnz	r6, 8008aa8 <_Balloc+0x28>
 8008a8a:	2010      	movs	r0, #16
 8008a8c:	f7ff ff44 	bl	8008918 <malloc>
 8008a90:	4602      	mov	r2, r0
 8008a92:	61e0      	str	r0, [r4, #28]
 8008a94:	b920      	cbnz	r0, 8008aa0 <_Balloc+0x20>
 8008a96:	4b18      	ldr	r3, [pc, #96]	; (8008af8 <_Balloc+0x78>)
 8008a98:	4818      	ldr	r0, [pc, #96]	; (8008afc <_Balloc+0x7c>)
 8008a9a:	216b      	movs	r1, #107	; 0x6b
 8008a9c:	f000 fdaa 	bl	80095f4 <__assert_func>
 8008aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aa4:	6006      	str	r6, [r0, #0]
 8008aa6:	60c6      	str	r6, [r0, #12]
 8008aa8:	69e6      	ldr	r6, [r4, #28]
 8008aaa:	68f3      	ldr	r3, [r6, #12]
 8008aac:	b183      	cbz	r3, 8008ad0 <_Balloc+0x50>
 8008aae:	69e3      	ldr	r3, [r4, #28]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ab6:	b9b8      	cbnz	r0, 8008ae8 <_Balloc+0x68>
 8008ab8:	2101      	movs	r1, #1
 8008aba:	fa01 f605 	lsl.w	r6, r1, r5
 8008abe:	1d72      	adds	r2, r6, #5
 8008ac0:	0092      	lsls	r2, r2, #2
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 fdb4 	bl	8009630 <_calloc_r>
 8008ac8:	b160      	cbz	r0, 8008ae4 <_Balloc+0x64>
 8008aca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ace:	e00e      	b.n	8008aee <_Balloc+0x6e>
 8008ad0:	2221      	movs	r2, #33	; 0x21
 8008ad2:	2104      	movs	r1, #4
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 fdab 	bl	8009630 <_calloc_r>
 8008ada:	69e3      	ldr	r3, [r4, #28]
 8008adc:	60f0      	str	r0, [r6, #12]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e4      	bne.n	8008aae <_Balloc+0x2e>
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	6802      	ldr	r2, [r0, #0]
 8008aea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aee:	2300      	movs	r3, #0
 8008af0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008af4:	e7f7      	b.n	8008ae6 <_Balloc+0x66>
 8008af6:	bf00      	nop
 8008af8:	0800fae9 	.word	0x0800fae9
 8008afc:	0800fb69 	.word	0x0800fb69

08008b00 <_Bfree>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	69c6      	ldr	r6, [r0, #28]
 8008b04:	4605      	mov	r5, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	b976      	cbnz	r6, 8008b28 <_Bfree+0x28>
 8008b0a:	2010      	movs	r0, #16
 8008b0c:	f7ff ff04 	bl	8008918 <malloc>
 8008b10:	4602      	mov	r2, r0
 8008b12:	61e8      	str	r0, [r5, #28]
 8008b14:	b920      	cbnz	r0, 8008b20 <_Bfree+0x20>
 8008b16:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <_Bfree+0x3c>)
 8008b18:	4809      	ldr	r0, [pc, #36]	; (8008b40 <_Bfree+0x40>)
 8008b1a:	218f      	movs	r1, #143	; 0x8f
 8008b1c:	f000 fd6a 	bl	80095f4 <__assert_func>
 8008b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b24:	6006      	str	r6, [r0, #0]
 8008b26:	60c6      	str	r6, [r0, #12]
 8008b28:	b13c      	cbz	r4, 8008b3a <_Bfree+0x3a>
 8008b2a:	69eb      	ldr	r3, [r5, #28]
 8008b2c:	6862      	ldr	r2, [r4, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b34:	6021      	str	r1, [r4, #0]
 8008b36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	0800fae9 	.word	0x0800fae9
 8008b40:	0800fb69 	.word	0x0800fb69

08008b44 <__multadd>:
 8008b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	690d      	ldr	r5, [r1, #16]
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	461e      	mov	r6, r3
 8008b50:	f101 0c14 	add.w	ip, r1, #20
 8008b54:	2000      	movs	r0, #0
 8008b56:	f8dc 3000 	ldr.w	r3, [ip]
 8008b5a:	b299      	uxth	r1, r3
 8008b5c:	fb02 6101 	mla	r1, r2, r1, r6
 8008b60:	0c1e      	lsrs	r6, r3, #16
 8008b62:	0c0b      	lsrs	r3, r1, #16
 8008b64:	fb02 3306 	mla	r3, r2, r6, r3
 8008b68:	b289      	uxth	r1, r1
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b70:	4285      	cmp	r5, r0
 8008b72:	f84c 1b04 	str.w	r1, [ip], #4
 8008b76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b7a:	dcec      	bgt.n	8008b56 <__multadd+0x12>
 8008b7c:	b30e      	cbz	r6, 8008bc2 <__multadd+0x7e>
 8008b7e:	68a3      	ldr	r3, [r4, #8]
 8008b80:	42ab      	cmp	r3, r5
 8008b82:	dc19      	bgt.n	8008bb8 <__multadd+0x74>
 8008b84:	6861      	ldr	r1, [r4, #4]
 8008b86:	4638      	mov	r0, r7
 8008b88:	3101      	adds	r1, #1
 8008b8a:	f7ff ff79 	bl	8008a80 <_Balloc>
 8008b8e:	4680      	mov	r8, r0
 8008b90:	b928      	cbnz	r0, 8008b9e <__multadd+0x5a>
 8008b92:	4602      	mov	r2, r0
 8008b94:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <__multadd+0x84>)
 8008b96:	480d      	ldr	r0, [pc, #52]	; (8008bcc <__multadd+0x88>)
 8008b98:	21ba      	movs	r1, #186	; 0xba
 8008b9a:	f000 fd2b 	bl	80095f4 <__assert_func>
 8008b9e:	6922      	ldr	r2, [r4, #16]
 8008ba0:	3202      	adds	r2, #2
 8008ba2:	f104 010c 	add.w	r1, r4, #12
 8008ba6:	0092      	lsls	r2, r2, #2
 8008ba8:	300c      	adds	r0, #12
 8008baa:	f000 fd15 	bl	80095d8 <memcpy>
 8008bae:	4621      	mov	r1, r4
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ffa5 	bl	8008b00 <_Bfree>
 8008bb6:	4644      	mov	r4, r8
 8008bb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	615e      	str	r6, [r3, #20]
 8008bc0:	6125      	str	r5, [r4, #16]
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	0800fb58 	.word	0x0800fb58
 8008bcc:	0800fb69 	.word	0x0800fb69

08008bd0 <__hi0bits>:
 8008bd0:	0c03      	lsrs	r3, r0, #16
 8008bd2:	041b      	lsls	r3, r3, #16
 8008bd4:	b9d3      	cbnz	r3, 8008c0c <__hi0bits+0x3c>
 8008bd6:	0400      	lsls	r0, r0, #16
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bde:	bf04      	itt	eq
 8008be0:	0200      	lsleq	r0, r0, #8
 8008be2:	3308      	addeq	r3, #8
 8008be4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008be8:	bf04      	itt	eq
 8008bea:	0100      	lsleq	r0, r0, #4
 8008bec:	3304      	addeq	r3, #4
 8008bee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bf2:	bf04      	itt	eq
 8008bf4:	0080      	lsleq	r0, r0, #2
 8008bf6:	3302      	addeq	r3, #2
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	db05      	blt.n	8008c08 <__hi0bits+0x38>
 8008bfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c00:	f103 0301 	add.w	r3, r3, #1
 8008c04:	bf08      	it	eq
 8008c06:	2320      	moveq	r3, #32
 8008c08:	4618      	mov	r0, r3
 8008c0a:	4770      	bx	lr
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e7e4      	b.n	8008bda <__hi0bits+0xa>

08008c10 <__lo0bits>:
 8008c10:	6803      	ldr	r3, [r0, #0]
 8008c12:	f013 0207 	ands.w	r2, r3, #7
 8008c16:	d00c      	beq.n	8008c32 <__lo0bits+0x22>
 8008c18:	07d9      	lsls	r1, r3, #31
 8008c1a:	d422      	bmi.n	8008c62 <__lo0bits+0x52>
 8008c1c:	079a      	lsls	r2, r3, #30
 8008c1e:	bf49      	itett	mi
 8008c20:	085b      	lsrmi	r3, r3, #1
 8008c22:	089b      	lsrpl	r3, r3, #2
 8008c24:	6003      	strmi	r3, [r0, #0]
 8008c26:	2201      	movmi	r2, #1
 8008c28:	bf5c      	itt	pl
 8008c2a:	6003      	strpl	r3, [r0, #0]
 8008c2c:	2202      	movpl	r2, #2
 8008c2e:	4610      	mov	r0, r2
 8008c30:	4770      	bx	lr
 8008c32:	b299      	uxth	r1, r3
 8008c34:	b909      	cbnz	r1, 8008c3a <__lo0bits+0x2a>
 8008c36:	0c1b      	lsrs	r3, r3, #16
 8008c38:	2210      	movs	r2, #16
 8008c3a:	b2d9      	uxtb	r1, r3
 8008c3c:	b909      	cbnz	r1, 8008c42 <__lo0bits+0x32>
 8008c3e:	3208      	adds	r2, #8
 8008c40:	0a1b      	lsrs	r3, r3, #8
 8008c42:	0719      	lsls	r1, r3, #28
 8008c44:	bf04      	itt	eq
 8008c46:	091b      	lsreq	r3, r3, #4
 8008c48:	3204      	addeq	r2, #4
 8008c4a:	0799      	lsls	r1, r3, #30
 8008c4c:	bf04      	itt	eq
 8008c4e:	089b      	lsreq	r3, r3, #2
 8008c50:	3202      	addeq	r2, #2
 8008c52:	07d9      	lsls	r1, r3, #31
 8008c54:	d403      	bmi.n	8008c5e <__lo0bits+0x4e>
 8008c56:	085b      	lsrs	r3, r3, #1
 8008c58:	f102 0201 	add.w	r2, r2, #1
 8008c5c:	d003      	beq.n	8008c66 <__lo0bits+0x56>
 8008c5e:	6003      	str	r3, [r0, #0]
 8008c60:	e7e5      	b.n	8008c2e <__lo0bits+0x1e>
 8008c62:	2200      	movs	r2, #0
 8008c64:	e7e3      	b.n	8008c2e <__lo0bits+0x1e>
 8008c66:	2220      	movs	r2, #32
 8008c68:	e7e1      	b.n	8008c2e <__lo0bits+0x1e>
	...

08008c6c <__i2b>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	460c      	mov	r4, r1
 8008c70:	2101      	movs	r1, #1
 8008c72:	f7ff ff05 	bl	8008a80 <_Balloc>
 8008c76:	4602      	mov	r2, r0
 8008c78:	b928      	cbnz	r0, 8008c86 <__i2b+0x1a>
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <__i2b+0x24>)
 8008c7c:	4805      	ldr	r0, [pc, #20]	; (8008c94 <__i2b+0x28>)
 8008c7e:	f240 1145 	movw	r1, #325	; 0x145
 8008c82:	f000 fcb7 	bl	80095f4 <__assert_func>
 8008c86:	2301      	movs	r3, #1
 8008c88:	6144      	str	r4, [r0, #20]
 8008c8a:	6103      	str	r3, [r0, #16]
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	bf00      	nop
 8008c90:	0800fb58 	.word	0x0800fb58
 8008c94:	0800fb69 	.word	0x0800fb69

08008c98 <__multiply>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	4691      	mov	r9, r2
 8008c9e:	690a      	ldr	r2, [r1, #16]
 8008ca0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	bfb8      	it	lt
 8008ca8:	460b      	movlt	r3, r1
 8008caa:	460c      	mov	r4, r1
 8008cac:	bfbc      	itt	lt
 8008cae:	464c      	movlt	r4, r9
 8008cb0:	4699      	movlt	r9, r3
 8008cb2:	6927      	ldr	r7, [r4, #16]
 8008cb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008cb8:	68a3      	ldr	r3, [r4, #8]
 8008cba:	6861      	ldr	r1, [r4, #4]
 8008cbc:	eb07 060a 	add.w	r6, r7, sl
 8008cc0:	42b3      	cmp	r3, r6
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	bfb8      	it	lt
 8008cc6:	3101      	addlt	r1, #1
 8008cc8:	f7ff feda 	bl	8008a80 <_Balloc>
 8008ccc:	b930      	cbnz	r0, 8008cdc <__multiply+0x44>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b44      	ldr	r3, [pc, #272]	; (8008de4 <__multiply+0x14c>)
 8008cd2:	4845      	ldr	r0, [pc, #276]	; (8008de8 <__multiply+0x150>)
 8008cd4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008cd8:	f000 fc8c 	bl	80095f4 <__assert_func>
 8008cdc:	f100 0514 	add.w	r5, r0, #20
 8008ce0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4543      	cmp	r3, r8
 8008cea:	d321      	bcc.n	8008d30 <__multiply+0x98>
 8008cec:	f104 0314 	add.w	r3, r4, #20
 8008cf0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cf4:	f109 0314 	add.w	r3, r9, #20
 8008cf8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cfc:	9202      	str	r2, [sp, #8]
 8008cfe:	1b3a      	subs	r2, r7, r4
 8008d00:	3a15      	subs	r2, #21
 8008d02:	f022 0203 	bic.w	r2, r2, #3
 8008d06:	3204      	adds	r2, #4
 8008d08:	f104 0115 	add.w	r1, r4, #21
 8008d0c:	428f      	cmp	r7, r1
 8008d0e:	bf38      	it	cc
 8008d10:	2204      	movcc	r2, #4
 8008d12:	9201      	str	r2, [sp, #4]
 8008d14:	9a02      	ldr	r2, [sp, #8]
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d80c      	bhi.n	8008d36 <__multiply+0x9e>
 8008d1c:	2e00      	cmp	r6, #0
 8008d1e:	dd03      	ble.n	8008d28 <__multiply+0x90>
 8008d20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d05b      	beq.n	8008de0 <__multiply+0x148>
 8008d28:	6106      	str	r6, [r0, #16]
 8008d2a:	b005      	add	sp, #20
 8008d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	f843 2b04 	str.w	r2, [r3], #4
 8008d34:	e7d8      	b.n	8008ce8 <__multiply+0x50>
 8008d36:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d3a:	f1ba 0f00 	cmp.w	sl, #0
 8008d3e:	d024      	beq.n	8008d8a <__multiply+0xf2>
 8008d40:	f104 0e14 	add.w	lr, r4, #20
 8008d44:	46a9      	mov	r9, r5
 8008d46:	f04f 0c00 	mov.w	ip, #0
 8008d4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d4e:	f8d9 1000 	ldr.w	r1, [r9]
 8008d52:	fa1f fb82 	uxth.w	fp, r2
 8008d56:	b289      	uxth	r1, r1
 8008d58:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d60:	f8d9 2000 	ldr.w	r2, [r9]
 8008d64:	4461      	add	r1, ip
 8008d66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d72:	b289      	uxth	r1, r1
 8008d74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d78:	4577      	cmp	r7, lr
 8008d7a:	f849 1b04 	str.w	r1, [r9], #4
 8008d7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d82:	d8e2      	bhi.n	8008d4a <__multiply+0xb2>
 8008d84:	9a01      	ldr	r2, [sp, #4]
 8008d86:	f845 c002 	str.w	ip, [r5, r2]
 8008d8a:	9a03      	ldr	r2, [sp, #12]
 8008d8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d90:	3304      	adds	r3, #4
 8008d92:	f1b9 0f00 	cmp.w	r9, #0
 8008d96:	d021      	beq.n	8008ddc <__multiply+0x144>
 8008d98:	6829      	ldr	r1, [r5, #0]
 8008d9a:	f104 0c14 	add.w	ip, r4, #20
 8008d9e:	46ae      	mov	lr, r5
 8008da0:	f04f 0a00 	mov.w	sl, #0
 8008da4:	f8bc b000 	ldrh.w	fp, [ip]
 8008da8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008dac:	fb09 220b 	mla	r2, r9, fp, r2
 8008db0:	4452      	add	r2, sl
 8008db2:	b289      	uxth	r1, r1
 8008db4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008db8:	f84e 1b04 	str.w	r1, [lr], #4
 8008dbc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008dc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dc4:	f8be 1000 	ldrh.w	r1, [lr]
 8008dc8:	fb09 110a 	mla	r1, r9, sl, r1
 8008dcc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008dd0:	4567      	cmp	r7, ip
 8008dd2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dd6:	d8e5      	bhi.n	8008da4 <__multiply+0x10c>
 8008dd8:	9a01      	ldr	r2, [sp, #4]
 8008dda:	50a9      	str	r1, [r5, r2]
 8008ddc:	3504      	adds	r5, #4
 8008dde:	e799      	b.n	8008d14 <__multiply+0x7c>
 8008de0:	3e01      	subs	r6, #1
 8008de2:	e79b      	b.n	8008d1c <__multiply+0x84>
 8008de4:	0800fb58 	.word	0x0800fb58
 8008de8:	0800fb69 	.word	0x0800fb69

08008dec <__pow5mult>:
 8008dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df0:	4615      	mov	r5, r2
 8008df2:	f012 0203 	ands.w	r2, r2, #3
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	d007      	beq.n	8008e0c <__pow5mult+0x20>
 8008dfc:	4c25      	ldr	r4, [pc, #148]	; (8008e94 <__pow5mult+0xa8>)
 8008dfe:	3a01      	subs	r2, #1
 8008e00:	2300      	movs	r3, #0
 8008e02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e06:	f7ff fe9d 	bl	8008b44 <__multadd>
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	10ad      	asrs	r5, r5, #2
 8008e0e:	d03d      	beq.n	8008e8c <__pow5mult+0xa0>
 8008e10:	69f4      	ldr	r4, [r6, #28]
 8008e12:	b97c      	cbnz	r4, 8008e34 <__pow5mult+0x48>
 8008e14:	2010      	movs	r0, #16
 8008e16:	f7ff fd7f 	bl	8008918 <malloc>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	61f0      	str	r0, [r6, #28]
 8008e1e:	b928      	cbnz	r0, 8008e2c <__pow5mult+0x40>
 8008e20:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <__pow5mult+0xac>)
 8008e22:	481e      	ldr	r0, [pc, #120]	; (8008e9c <__pow5mult+0xb0>)
 8008e24:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008e28:	f000 fbe4 	bl	80095f4 <__assert_func>
 8008e2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e30:	6004      	str	r4, [r0, #0]
 8008e32:	60c4      	str	r4, [r0, #12]
 8008e34:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e3c:	b94c      	cbnz	r4, 8008e52 <__pow5mult+0x66>
 8008e3e:	f240 2171 	movw	r1, #625	; 0x271
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7ff ff12 	bl	8008c6c <__i2b>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e4e:	4604      	mov	r4, r0
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	f04f 0900 	mov.w	r9, #0
 8008e56:	07eb      	lsls	r3, r5, #31
 8008e58:	d50a      	bpl.n	8008e70 <__pow5mult+0x84>
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	4622      	mov	r2, r4
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f7ff ff1a 	bl	8008c98 <__multiply>
 8008e64:	4639      	mov	r1, r7
 8008e66:	4680      	mov	r8, r0
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f7ff fe49 	bl	8008b00 <_Bfree>
 8008e6e:	4647      	mov	r7, r8
 8008e70:	106d      	asrs	r5, r5, #1
 8008e72:	d00b      	beq.n	8008e8c <__pow5mult+0xa0>
 8008e74:	6820      	ldr	r0, [r4, #0]
 8008e76:	b938      	cbnz	r0, 8008e88 <__pow5mult+0x9c>
 8008e78:	4622      	mov	r2, r4
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff ff0b 	bl	8008c98 <__multiply>
 8008e82:	6020      	str	r0, [r4, #0]
 8008e84:	f8c0 9000 	str.w	r9, [r0]
 8008e88:	4604      	mov	r4, r0
 8008e8a:	e7e4      	b.n	8008e56 <__pow5mult+0x6a>
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e92:	bf00      	nop
 8008e94:	0800fcb8 	.word	0x0800fcb8
 8008e98:	0800fae9 	.word	0x0800fae9
 8008e9c:	0800fb69 	.word	0x0800fb69

08008ea0 <__lshift>:
 8008ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	6849      	ldr	r1, [r1, #4]
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eae:	68a3      	ldr	r3, [r4, #8]
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	4691      	mov	r9, r2
 8008eb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eb8:	f108 0601 	add.w	r6, r8, #1
 8008ebc:	42b3      	cmp	r3, r6
 8008ebe:	db0b      	blt.n	8008ed8 <__lshift+0x38>
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff fddd 	bl	8008a80 <_Balloc>
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	b948      	cbnz	r0, 8008ede <__lshift+0x3e>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4b28      	ldr	r3, [pc, #160]	; (8008f70 <__lshift+0xd0>)
 8008ece:	4829      	ldr	r0, [pc, #164]	; (8008f74 <__lshift+0xd4>)
 8008ed0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008ed4:	f000 fb8e 	bl	80095f4 <__assert_func>
 8008ed8:	3101      	adds	r1, #1
 8008eda:	005b      	lsls	r3, r3, #1
 8008edc:	e7ee      	b.n	8008ebc <__lshift+0x1c>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f100 0114 	add.w	r1, r0, #20
 8008ee4:	f100 0210 	add.w	r2, r0, #16
 8008ee8:	4618      	mov	r0, r3
 8008eea:	4553      	cmp	r3, sl
 8008eec:	db33      	blt.n	8008f56 <__lshift+0xb6>
 8008eee:	6920      	ldr	r0, [r4, #16]
 8008ef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ef4:	f104 0314 	add.w	r3, r4, #20
 8008ef8:	f019 091f 	ands.w	r9, r9, #31
 8008efc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f04:	d02b      	beq.n	8008f5e <__lshift+0xbe>
 8008f06:	f1c9 0e20 	rsb	lr, r9, #32
 8008f0a:	468a      	mov	sl, r1
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	fa00 f009 	lsl.w	r0, r0, r9
 8008f14:	4310      	orrs	r0, r2
 8008f16:	f84a 0b04 	str.w	r0, [sl], #4
 8008f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1e:	459c      	cmp	ip, r3
 8008f20:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f24:	d8f3      	bhi.n	8008f0e <__lshift+0x6e>
 8008f26:	ebac 0304 	sub.w	r3, ip, r4
 8008f2a:	3b15      	subs	r3, #21
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	3304      	adds	r3, #4
 8008f32:	f104 0015 	add.w	r0, r4, #21
 8008f36:	4584      	cmp	ip, r0
 8008f38:	bf38      	it	cc
 8008f3a:	2304      	movcc	r3, #4
 8008f3c:	50ca      	str	r2, [r1, r3]
 8008f3e:	b10a      	cbz	r2, 8008f44 <__lshift+0xa4>
 8008f40:	f108 0602 	add.w	r6, r8, #2
 8008f44:	3e01      	subs	r6, #1
 8008f46:	4638      	mov	r0, r7
 8008f48:	612e      	str	r6, [r5, #16]
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	f7ff fdd8 	bl	8008b00 <_Bfree>
 8008f50:	4628      	mov	r0, r5
 8008f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f56:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	e7c5      	b.n	8008eea <__lshift+0x4a>
 8008f5e:	3904      	subs	r1, #4
 8008f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f64:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f68:	459c      	cmp	ip, r3
 8008f6a:	d8f9      	bhi.n	8008f60 <__lshift+0xc0>
 8008f6c:	e7ea      	b.n	8008f44 <__lshift+0xa4>
 8008f6e:	bf00      	nop
 8008f70:	0800fb58 	.word	0x0800fb58
 8008f74:	0800fb69 	.word	0x0800fb69

08008f78 <__mcmp>:
 8008f78:	b530      	push	{r4, r5, lr}
 8008f7a:	6902      	ldr	r2, [r0, #16]
 8008f7c:	690c      	ldr	r4, [r1, #16]
 8008f7e:	1b12      	subs	r2, r2, r4
 8008f80:	d10e      	bne.n	8008fa0 <__mcmp+0x28>
 8008f82:	f100 0314 	add.w	r3, r0, #20
 8008f86:	3114      	adds	r1, #20
 8008f88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f98:	42a5      	cmp	r5, r4
 8008f9a:	d003      	beq.n	8008fa4 <__mcmp+0x2c>
 8008f9c:	d305      	bcc.n	8008faa <__mcmp+0x32>
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	bd30      	pop	{r4, r5, pc}
 8008fa4:	4283      	cmp	r3, r0
 8008fa6:	d3f3      	bcc.n	8008f90 <__mcmp+0x18>
 8008fa8:	e7fa      	b.n	8008fa0 <__mcmp+0x28>
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295
 8008fae:	e7f7      	b.n	8008fa0 <__mcmp+0x28>

08008fb0 <__mdiff>:
 8008fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4690      	mov	r8, r2
 8008fbe:	f7ff ffdb 	bl	8008f78 <__mcmp>
 8008fc2:	1e05      	subs	r5, r0, #0
 8008fc4:	d110      	bne.n	8008fe8 <__mdiff+0x38>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff fd59 	bl	8008a80 <_Balloc>
 8008fce:	b930      	cbnz	r0, 8008fde <__mdiff+0x2e>
 8008fd0:	4b3a      	ldr	r3, [pc, #232]	; (80090bc <__mdiff+0x10c>)
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	f240 2137 	movw	r1, #567	; 0x237
 8008fd8:	4839      	ldr	r0, [pc, #228]	; (80090c0 <__mdiff+0x110>)
 8008fda:	f000 fb0b 	bl	80095f4 <__assert_func>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe8:	bfa4      	itt	ge
 8008fea:	4643      	movge	r3, r8
 8008fec:	46a0      	movge	r8, r4
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ff4:	bfa6      	itte	ge
 8008ff6:	461c      	movge	r4, r3
 8008ff8:	2500      	movge	r5, #0
 8008ffa:	2501      	movlt	r5, #1
 8008ffc:	f7ff fd40 	bl	8008a80 <_Balloc>
 8009000:	b920      	cbnz	r0, 800900c <__mdiff+0x5c>
 8009002:	4b2e      	ldr	r3, [pc, #184]	; (80090bc <__mdiff+0x10c>)
 8009004:	4602      	mov	r2, r0
 8009006:	f240 2145 	movw	r1, #581	; 0x245
 800900a:	e7e5      	b.n	8008fd8 <__mdiff+0x28>
 800900c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009010:	6926      	ldr	r6, [r4, #16]
 8009012:	60c5      	str	r5, [r0, #12]
 8009014:	f104 0914 	add.w	r9, r4, #20
 8009018:	f108 0514 	add.w	r5, r8, #20
 800901c:	f100 0e14 	add.w	lr, r0, #20
 8009020:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009024:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009028:	f108 0210 	add.w	r2, r8, #16
 800902c:	46f2      	mov	sl, lr
 800902e:	2100      	movs	r1, #0
 8009030:	f859 3b04 	ldr.w	r3, [r9], #4
 8009034:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009038:	fa11 f88b 	uxtah	r8, r1, fp
 800903c:	b299      	uxth	r1, r3
 800903e:	0c1b      	lsrs	r3, r3, #16
 8009040:	eba8 0801 	sub.w	r8, r8, r1
 8009044:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009048:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800904c:	fa1f f888 	uxth.w	r8, r8
 8009050:	1419      	asrs	r1, r3, #16
 8009052:	454e      	cmp	r6, r9
 8009054:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009058:	f84a 3b04 	str.w	r3, [sl], #4
 800905c:	d8e8      	bhi.n	8009030 <__mdiff+0x80>
 800905e:	1b33      	subs	r3, r6, r4
 8009060:	3b15      	subs	r3, #21
 8009062:	f023 0303 	bic.w	r3, r3, #3
 8009066:	3304      	adds	r3, #4
 8009068:	3415      	adds	r4, #21
 800906a:	42a6      	cmp	r6, r4
 800906c:	bf38      	it	cc
 800906e:	2304      	movcc	r3, #4
 8009070:	441d      	add	r5, r3
 8009072:	4473      	add	r3, lr
 8009074:	469e      	mov	lr, r3
 8009076:	462e      	mov	r6, r5
 8009078:	4566      	cmp	r6, ip
 800907a:	d30e      	bcc.n	800909a <__mdiff+0xea>
 800907c:	f10c 0203 	add.w	r2, ip, #3
 8009080:	1b52      	subs	r2, r2, r5
 8009082:	f022 0203 	bic.w	r2, r2, #3
 8009086:	3d03      	subs	r5, #3
 8009088:	45ac      	cmp	ip, r5
 800908a:	bf38      	it	cc
 800908c:	2200      	movcc	r2, #0
 800908e:	4413      	add	r3, r2
 8009090:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009094:	b17a      	cbz	r2, 80090b6 <__mdiff+0x106>
 8009096:	6107      	str	r7, [r0, #16]
 8009098:	e7a4      	b.n	8008fe4 <__mdiff+0x34>
 800909a:	f856 8b04 	ldr.w	r8, [r6], #4
 800909e:	fa11 f288 	uxtah	r2, r1, r8
 80090a2:	1414      	asrs	r4, r2, #16
 80090a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090a8:	b292      	uxth	r2, r2
 80090aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80090ae:	f84e 2b04 	str.w	r2, [lr], #4
 80090b2:	1421      	asrs	r1, r4, #16
 80090b4:	e7e0      	b.n	8009078 <__mdiff+0xc8>
 80090b6:	3f01      	subs	r7, #1
 80090b8:	e7ea      	b.n	8009090 <__mdiff+0xe0>
 80090ba:	bf00      	nop
 80090bc:	0800fb58 	.word	0x0800fb58
 80090c0:	0800fb69 	.word	0x0800fb69

080090c4 <__d2b>:
 80090c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090c8:	460f      	mov	r7, r1
 80090ca:	2101      	movs	r1, #1
 80090cc:	ec59 8b10 	vmov	r8, r9, d0
 80090d0:	4616      	mov	r6, r2
 80090d2:	f7ff fcd5 	bl	8008a80 <_Balloc>
 80090d6:	4604      	mov	r4, r0
 80090d8:	b930      	cbnz	r0, 80090e8 <__d2b+0x24>
 80090da:	4602      	mov	r2, r0
 80090dc:	4b24      	ldr	r3, [pc, #144]	; (8009170 <__d2b+0xac>)
 80090de:	4825      	ldr	r0, [pc, #148]	; (8009174 <__d2b+0xb0>)
 80090e0:	f240 310f 	movw	r1, #783	; 0x30f
 80090e4:	f000 fa86 	bl	80095f4 <__assert_func>
 80090e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090f0:	bb2d      	cbnz	r5, 800913e <__d2b+0x7a>
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	f1b8 0300 	subs.w	r3, r8, #0
 80090f8:	d026      	beq.n	8009148 <__d2b+0x84>
 80090fa:	4668      	mov	r0, sp
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	f7ff fd87 	bl	8008c10 <__lo0bits>
 8009102:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009106:	b1e8      	cbz	r0, 8009144 <__d2b+0x80>
 8009108:	f1c0 0320 	rsb	r3, r0, #32
 800910c:	fa02 f303 	lsl.w	r3, r2, r3
 8009110:	430b      	orrs	r3, r1
 8009112:	40c2      	lsrs	r2, r0
 8009114:	6163      	str	r3, [r4, #20]
 8009116:	9201      	str	r2, [sp, #4]
 8009118:	9b01      	ldr	r3, [sp, #4]
 800911a:	61a3      	str	r3, [r4, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf14      	ite	ne
 8009120:	2202      	movne	r2, #2
 8009122:	2201      	moveq	r2, #1
 8009124:	6122      	str	r2, [r4, #16]
 8009126:	b1bd      	cbz	r5, 8009158 <__d2b+0x94>
 8009128:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800912c:	4405      	add	r5, r0
 800912e:	603d      	str	r5, [r7, #0]
 8009130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009134:	6030      	str	r0, [r6, #0]
 8009136:	4620      	mov	r0, r4
 8009138:	b003      	add	sp, #12
 800913a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800913e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009142:	e7d6      	b.n	80090f2 <__d2b+0x2e>
 8009144:	6161      	str	r1, [r4, #20]
 8009146:	e7e7      	b.n	8009118 <__d2b+0x54>
 8009148:	a801      	add	r0, sp, #4
 800914a:	f7ff fd61 	bl	8008c10 <__lo0bits>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	6163      	str	r3, [r4, #20]
 8009152:	3020      	adds	r0, #32
 8009154:	2201      	movs	r2, #1
 8009156:	e7e5      	b.n	8009124 <__d2b+0x60>
 8009158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800915c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009160:	6038      	str	r0, [r7, #0]
 8009162:	6918      	ldr	r0, [r3, #16]
 8009164:	f7ff fd34 	bl	8008bd0 <__hi0bits>
 8009168:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800916c:	e7e2      	b.n	8009134 <__d2b+0x70>
 800916e:	bf00      	nop
 8009170:	0800fb58 	.word	0x0800fb58
 8009174:	0800fb69 	.word	0x0800fb69

08009178 <__ssputs_r>:
 8009178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	688e      	ldr	r6, [r1, #8]
 800917e:	461f      	mov	r7, r3
 8009180:	42be      	cmp	r6, r7
 8009182:	680b      	ldr	r3, [r1, #0]
 8009184:	4682      	mov	sl, r0
 8009186:	460c      	mov	r4, r1
 8009188:	4690      	mov	r8, r2
 800918a:	d82c      	bhi.n	80091e6 <__ssputs_r+0x6e>
 800918c:	898a      	ldrh	r2, [r1, #12]
 800918e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009192:	d026      	beq.n	80091e2 <__ssputs_r+0x6a>
 8009194:	6965      	ldr	r5, [r4, #20]
 8009196:	6909      	ldr	r1, [r1, #16]
 8009198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800919c:	eba3 0901 	sub.w	r9, r3, r1
 80091a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091a4:	1c7b      	adds	r3, r7, #1
 80091a6:	444b      	add	r3, r9
 80091a8:	106d      	asrs	r5, r5, #1
 80091aa:	429d      	cmp	r5, r3
 80091ac:	bf38      	it	cc
 80091ae:	461d      	movcc	r5, r3
 80091b0:	0553      	lsls	r3, r2, #21
 80091b2:	d527      	bpl.n	8009204 <__ssputs_r+0x8c>
 80091b4:	4629      	mov	r1, r5
 80091b6:	f7ff fbd7 	bl	8008968 <_malloc_r>
 80091ba:	4606      	mov	r6, r0
 80091bc:	b360      	cbz	r0, 8009218 <__ssputs_r+0xa0>
 80091be:	6921      	ldr	r1, [r4, #16]
 80091c0:	464a      	mov	r2, r9
 80091c2:	f000 fa09 	bl	80095d8 <memcpy>
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	6126      	str	r6, [r4, #16]
 80091d4:	6165      	str	r5, [r4, #20]
 80091d6:	444e      	add	r6, r9
 80091d8:	eba5 0509 	sub.w	r5, r5, r9
 80091dc:	6026      	str	r6, [r4, #0]
 80091de:	60a5      	str	r5, [r4, #8]
 80091e0:	463e      	mov	r6, r7
 80091e2:	42be      	cmp	r6, r7
 80091e4:	d900      	bls.n	80091e8 <__ssputs_r+0x70>
 80091e6:	463e      	mov	r6, r7
 80091e8:	6820      	ldr	r0, [r4, #0]
 80091ea:	4632      	mov	r2, r6
 80091ec:	4641      	mov	r1, r8
 80091ee:	f000 f9c9 	bl	8009584 <memmove>
 80091f2:	68a3      	ldr	r3, [r4, #8]
 80091f4:	1b9b      	subs	r3, r3, r6
 80091f6:	60a3      	str	r3, [r4, #8]
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	4433      	add	r3, r6
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	2000      	movs	r0, #0
 8009200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009204:	462a      	mov	r2, r5
 8009206:	f000 fa3b 	bl	8009680 <_realloc_r>
 800920a:	4606      	mov	r6, r0
 800920c:	2800      	cmp	r0, #0
 800920e:	d1e0      	bne.n	80091d2 <__ssputs_r+0x5a>
 8009210:	6921      	ldr	r1, [r4, #16]
 8009212:	4650      	mov	r0, sl
 8009214:	f7ff fb34 	bl	8008880 <_free_r>
 8009218:	230c      	movs	r3, #12
 800921a:	f8ca 3000 	str.w	r3, [sl]
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
 800922a:	e7e9      	b.n	8009200 <__ssputs_r+0x88>

0800922c <_svfiprintf_r>:
 800922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	4698      	mov	r8, r3
 8009232:	898b      	ldrh	r3, [r1, #12]
 8009234:	061b      	lsls	r3, r3, #24
 8009236:	b09d      	sub	sp, #116	; 0x74
 8009238:	4607      	mov	r7, r0
 800923a:	460d      	mov	r5, r1
 800923c:	4614      	mov	r4, r2
 800923e:	d50e      	bpl.n	800925e <_svfiprintf_r+0x32>
 8009240:	690b      	ldr	r3, [r1, #16]
 8009242:	b963      	cbnz	r3, 800925e <_svfiprintf_r+0x32>
 8009244:	2140      	movs	r1, #64	; 0x40
 8009246:	f7ff fb8f 	bl	8008968 <_malloc_r>
 800924a:	6028      	str	r0, [r5, #0]
 800924c:	6128      	str	r0, [r5, #16]
 800924e:	b920      	cbnz	r0, 800925a <_svfiprintf_r+0x2e>
 8009250:	230c      	movs	r3, #12
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	e0d0      	b.n	80093fc <_svfiprintf_r+0x1d0>
 800925a:	2340      	movs	r3, #64	; 0x40
 800925c:	616b      	str	r3, [r5, #20]
 800925e:	2300      	movs	r3, #0
 8009260:	9309      	str	r3, [sp, #36]	; 0x24
 8009262:	2320      	movs	r3, #32
 8009264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009268:	f8cd 800c 	str.w	r8, [sp, #12]
 800926c:	2330      	movs	r3, #48	; 0x30
 800926e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009414 <_svfiprintf_r+0x1e8>
 8009272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009276:	f04f 0901 	mov.w	r9, #1
 800927a:	4623      	mov	r3, r4
 800927c:	469a      	mov	sl, r3
 800927e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009282:	b10a      	cbz	r2, 8009288 <_svfiprintf_r+0x5c>
 8009284:	2a25      	cmp	r2, #37	; 0x25
 8009286:	d1f9      	bne.n	800927c <_svfiprintf_r+0x50>
 8009288:	ebba 0b04 	subs.w	fp, sl, r4
 800928c:	d00b      	beq.n	80092a6 <_svfiprintf_r+0x7a>
 800928e:	465b      	mov	r3, fp
 8009290:	4622      	mov	r2, r4
 8009292:	4629      	mov	r1, r5
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff ff6f 	bl	8009178 <__ssputs_r>
 800929a:	3001      	adds	r0, #1
 800929c:	f000 80a9 	beq.w	80093f2 <_svfiprintf_r+0x1c6>
 80092a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a2:	445a      	add	r2, fp
 80092a4:	9209      	str	r2, [sp, #36]	; 0x24
 80092a6:	f89a 3000 	ldrb.w	r3, [sl]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 80a1 	beq.w	80093f2 <_svfiprintf_r+0x1c6>
 80092b0:	2300      	movs	r3, #0
 80092b2:	f04f 32ff 	mov.w	r2, #4294967295
 80092b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ba:	f10a 0a01 	add.w	sl, sl, #1
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	9307      	str	r3, [sp, #28]
 80092c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c6:	931a      	str	r3, [sp, #104]	; 0x68
 80092c8:	4654      	mov	r4, sl
 80092ca:	2205      	movs	r2, #5
 80092cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d0:	4850      	ldr	r0, [pc, #320]	; (8009414 <_svfiprintf_r+0x1e8>)
 80092d2:	f7f6 ffb5 	bl	8000240 <memchr>
 80092d6:	9a04      	ldr	r2, [sp, #16]
 80092d8:	b9d8      	cbnz	r0, 8009312 <_svfiprintf_r+0xe6>
 80092da:	06d0      	lsls	r0, r2, #27
 80092dc:	bf44      	itt	mi
 80092de:	2320      	movmi	r3, #32
 80092e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e4:	0711      	lsls	r1, r2, #28
 80092e6:	bf44      	itt	mi
 80092e8:	232b      	movmi	r3, #43	; 0x2b
 80092ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ee:	f89a 3000 	ldrb.w	r3, [sl]
 80092f2:	2b2a      	cmp	r3, #42	; 0x2a
 80092f4:	d015      	beq.n	8009322 <_svfiprintf_r+0xf6>
 80092f6:	9a07      	ldr	r2, [sp, #28]
 80092f8:	4654      	mov	r4, sl
 80092fa:	2000      	movs	r0, #0
 80092fc:	f04f 0c0a 	mov.w	ip, #10
 8009300:	4621      	mov	r1, r4
 8009302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009306:	3b30      	subs	r3, #48	; 0x30
 8009308:	2b09      	cmp	r3, #9
 800930a:	d94d      	bls.n	80093a8 <_svfiprintf_r+0x17c>
 800930c:	b1b0      	cbz	r0, 800933c <_svfiprintf_r+0x110>
 800930e:	9207      	str	r2, [sp, #28]
 8009310:	e014      	b.n	800933c <_svfiprintf_r+0x110>
 8009312:	eba0 0308 	sub.w	r3, r0, r8
 8009316:	fa09 f303 	lsl.w	r3, r9, r3
 800931a:	4313      	orrs	r3, r2
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	46a2      	mov	sl, r4
 8009320:	e7d2      	b.n	80092c8 <_svfiprintf_r+0x9c>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	1d19      	adds	r1, r3, #4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	9103      	str	r1, [sp, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	bfbb      	ittet	lt
 800932e:	425b      	neglt	r3, r3
 8009330:	f042 0202 	orrlt.w	r2, r2, #2
 8009334:	9307      	strge	r3, [sp, #28]
 8009336:	9307      	strlt	r3, [sp, #28]
 8009338:	bfb8      	it	lt
 800933a:	9204      	strlt	r2, [sp, #16]
 800933c:	7823      	ldrb	r3, [r4, #0]
 800933e:	2b2e      	cmp	r3, #46	; 0x2e
 8009340:	d10c      	bne.n	800935c <_svfiprintf_r+0x130>
 8009342:	7863      	ldrb	r3, [r4, #1]
 8009344:	2b2a      	cmp	r3, #42	; 0x2a
 8009346:	d134      	bne.n	80093b2 <_svfiprintf_r+0x186>
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	1d1a      	adds	r2, r3, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	9203      	str	r2, [sp, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	bfb8      	it	lt
 8009354:	f04f 33ff 	movlt.w	r3, #4294967295
 8009358:	3402      	adds	r4, #2
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009424 <_svfiprintf_r+0x1f8>
 8009360:	7821      	ldrb	r1, [r4, #0]
 8009362:	2203      	movs	r2, #3
 8009364:	4650      	mov	r0, sl
 8009366:	f7f6 ff6b 	bl	8000240 <memchr>
 800936a:	b138      	cbz	r0, 800937c <_svfiprintf_r+0x150>
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	eba0 000a 	sub.w	r0, r0, sl
 8009372:	2240      	movs	r2, #64	; 0x40
 8009374:	4082      	lsls	r2, r0
 8009376:	4313      	orrs	r3, r2
 8009378:	3401      	adds	r4, #1
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009380:	4825      	ldr	r0, [pc, #148]	; (8009418 <_svfiprintf_r+0x1ec>)
 8009382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009386:	2206      	movs	r2, #6
 8009388:	f7f6 ff5a 	bl	8000240 <memchr>
 800938c:	2800      	cmp	r0, #0
 800938e:	d038      	beq.n	8009402 <_svfiprintf_r+0x1d6>
 8009390:	4b22      	ldr	r3, [pc, #136]	; (800941c <_svfiprintf_r+0x1f0>)
 8009392:	bb1b      	cbnz	r3, 80093dc <_svfiprintf_r+0x1b0>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	3307      	adds	r3, #7
 8009398:	f023 0307 	bic.w	r3, r3, #7
 800939c:	3308      	adds	r3, #8
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a2:	4433      	add	r3, r6
 80093a4:	9309      	str	r3, [sp, #36]	; 0x24
 80093a6:	e768      	b.n	800927a <_svfiprintf_r+0x4e>
 80093a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ac:	460c      	mov	r4, r1
 80093ae:	2001      	movs	r0, #1
 80093b0:	e7a6      	b.n	8009300 <_svfiprintf_r+0xd4>
 80093b2:	2300      	movs	r3, #0
 80093b4:	3401      	adds	r4, #1
 80093b6:	9305      	str	r3, [sp, #20]
 80093b8:	4619      	mov	r1, r3
 80093ba:	f04f 0c0a 	mov.w	ip, #10
 80093be:	4620      	mov	r0, r4
 80093c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c4:	3a30      	subs	r2, #48	; 0x30
 80093c6:	2a09      	cmp	r2, #9
 80093c8:	d903      	bls.n	80093d2 <_svfiprintf_r+0x1a6>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0c6      	beq.n	800935c <_svfiprintf_r+0x130>
 80093ce:	9105      	str	r1, [sp, #20]
 80093d0:	e7c4      	b.n	800935c <_svfiprintf_r+0x130>
 80093d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093d6:	4604      	mov	r4, r0
 80093d8:	2301      	movs	r3, #1
 80093da:	e7f0      	b.n	80093be <_svfiprintf_r+0x192>
 80093dc:	ab03      	add	r3, sp, #12
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	462a      	mov	r2, r5
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <_svfiprintf_r+0x1f4>)
 80093e4:	a904      	add	r1, sp, #16
 80093e6:	4638      	mov	r0, r7
 80093e8:	f7fd ff1a 	bl	8007220 <_printf_float>
 80093ec:	1c42      	adds	r2, r0, #1
 80093ee:	4606      	mov	r6, r0
 80093f0:	d1d6      	bne.n	80093a0 <_svfiprintf_r+0x174>
 80093f2:	89ab      	ldrh	r3, [r5, #12]
 80093f4:	065b      	lsls	r3, r3, #25
 80093f6:	f53f af2d 	bmi.w	8009254 <_svfiprintf_r+0x28>
 80093fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093fc:	b01d      	add	sp, #116	; 0x74
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	ab03      	add	r3, sp, #12
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4b05      	ldr	r3, [pc, #20]	; (8009420 <_svfiprintf_r+0x1f4>)
 800940a:	a904      	add	r1, sp, #16
 800940c:	4638      	mov	r0, r7
 800940e:	f7fe f98f 	bl	8007730 <_printf_i>
 8009412:	e7eb      	b.n	80093ec <_svfiprintf_r+0x1c0>
 8009414:	0800fcc4 	.word	0x0800fcc4
 8009418:	0800fcce 	.word	0x0800fcce
 800941c:	08007221 	.word	0x08007221
 8009420:	08009179 	.word	0x08009179
 8009424:	0800fcca 	.word	0x0800fcca

08009428 <__sflush_r>:
 8009428:	898a      	ldrh	r2, [r1, #12]
 800942a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942e:	4605      	mov	r5, r0
 8009430:	0710      	lsls	r0, r2, #28
 8009432:	460c      	mov	r4, r1
 8009434:	d458      	bmi.n	80094e8 <__sflush_r+0xc0>
 8009436:	684b      	ldr	r3, [r1, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	dc05      	bgt.n	8009448 <__sflush_r+0x20>
 800943c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	dc02      	bgt.n	8009448 <__sflush_r+0x20>
 8009442:	2000      	movs	r0, #0
 8009444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800944a:	2e00      	cmp	r6, #0
 800944c:	d0f9      	beq.n	8009442 <__sflush_r+0x1a>
 800944e:	2300      	movs	r3, #0
 8009450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009454:	682f      	ldr	r7, [r5, #0]
 8009456:	6a21      	ldr	r1, [r4, #32]
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	d032      	beq.n	80094c2 <__sflush_r+0x9a>
 800945c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	075a      	lsls	r2, r3, #29
 8009462:	d505      	bpl.n	8009470 <__sflush_r+0x48>
 8009464:	6863      	ldr	r3, [r4, #4]
 8009466:	1ac0      	subs	r0, r0, r3
 8009468:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800946a:	b10b      	cbz	r3, 8009470 <__sflush_r+0x48>
 800946c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800946e:	1ac0      	subs	r0, r0, r3
 8009470:	2300      	movs	r3, #0
 8009472:	4602      	mov	r2, r0
 8009474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009476:	6a21      	ldr	r1, [r4, #32]
 8009478:	4628      	mov	r0, r5
 800947a:	47b0      	blx	r6
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	d106      	bne.n	8009490 <__sflush_r+0x68>
 8009482:	6829      	ldr	r1, [r5, #0]
 8009484:	291d      	cmp	r1, #29
 8009486:	d82b      	bhi.n	80094e0 <__sflush_r+0xb8>
 8009488:	4a29      	ldr	r2, [pc, #164]	; (8009530 <__sflush_r+0x108>)
 800948a:	410a      	asrs	r2, r1
 800948c:	07d6      	lsls	r6, r2, #31
 800948e:	d427      	bmi.n	80094e0 <__sflush_r+0xb8>
 8009490:	2200      	movs	r2, #0
 8009492:	6062      	str	r2, [r4, #4]
 8009494:	04d9      	lsls	r1, r3, #19
 8009496:	6922      	ldr	r2, [r4, #16]
 8009498:	6022      	str	r2, [r4, #0]
 800949a:	d504      	bpl.n	80094a6 <__sflush_r+0x7e>
 800949c:	1c42      	adds	r2, r0, #1
 800949e:	d101      	bne.n	80094a4 <__sflush_r+0x7c>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b903      	cbnz	r3, 80094a6 <__sflush_r+0x7e>
 80094a4:	6560      	str	r0, [r4, #84]	; 0x54
 80094a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094a8:	602f      	str	r7, [r5, #0]
 80094aa:	2900      	cmp	r1, #0
 80094ac:	d0c9      	beq.n	8009442 <__sflush_r+0x1a>
 80094ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094b2:	4299      	cmp	r1, r3
 80094b4:	d002      	beq.n	80094bc <__sflush_r+0x94>
 80094b6:	4628      	mov	r0, r5
 80094b8:	f7ff f9e2 	bl	8008880 <_free_r>
 80094bc:	2000      	movs	r0, #0
 80094be:	6360      	str	r0, [r4, #52]	; 0x34
 80094c0:	e7c0      	b.n	8009444 <__sflush_r+0x1c>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b0      	blx	r6
 80094c8:	1c41      	adds	r1, r0, #1
 80094ca:	d1c8      	bne.n	800945e <__sflush_r+0x36>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0c5      	beq.n	800945e <__sflush_r+0x36>
 80094d2:	2b1d      	cmp	r3, #29
 80094d4:	d001      	beq.n	80094da <__sflush_r+0xb2>
 80094d6:	2b16      	cmp	r3, #22
 80094d8:	d101      	bne.n	80094de <__sflush_r+0xb6>
 80094da:	602f      	str	r7, [r5, #0]
 80094dc:	e7b1      	b.n	8009442 <__sflush_r+0x1a>
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e4:	81a3      	strh	r3, [r4, #12]
 80094e6:	e7ad      	b.n	8009444 <__sflush_r+0x1c>
 80094e8:	690f      	ldr	r7, [r1, #16]
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	d0a9      	beq.n	8009442 <__sflush_r+0x1a>
 80094ee:	0793      	lsls	r3, r2, #30
 80094f0:	680e      	ldr	r6, [r1, #0]
 80094f2:	bf08      	it	eq
 80094f4:	694b      	ldreq	r3, [r1, #20]
 80094f6:	600f      	str	r7, [r1, #0]
 80094f8:	bf18      	it	ne
 80094fa:	2300      	movne	r3, #0
 80094fc:	eba6 0807 	sub.w	r8, r6, r7
 8009500:	608b      	str	r3, [r1, #8]
 8009502:	f1b8 0f00 	cmp.w	r8, #0
 8009506:	dd9c      	ble.n	8009442 <__sflush_r+0x1a>
 8009508:	6a21      	ldr	r1, [r4, #32]
 800950a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800950c:	4643      	mov	r3, r8
 800950e:	463a      	mov	r2, r7
 8009510:	4628      	mov	r0, r5
 8009512:	47b0      	blx	r6
 8009514:	2800      	cmp	r0, #0
 8009516:	dc06      	bgt.n	8009526 <__sflush_r+0xfe>
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	e78e      	b.n	8009444 <__sflush_r+0x1c>
 8009526:	4407      	add	r7, r0
 8009528:	eba8 0800 	sub.w	r8, r8, r0
 800952c:	e7e9      	b.n	8009502 <__sflush_r+0xda>
 800952e:	bf00      	nop
 8009530:	dfbffffe 	.word	0xdfbffffe

08009534 <_fflush_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	690b      	ldr	r3, [r1, #16]
 8009538:	4605      	mov	r5, r0
 800953a:	460c      	mov	r4, r1
 800953c:	b913      	cbnz	r3, 8009544 <_fflush_r+0x10>
 800953e:	2500      	movs	r5, #0
 8009540:	4628      	mov	r0, r5
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	b118      	cbz	r0, 800954e <_fflush_r+0x1a>
 8009546:	6a03      	ldr	r3, [r0, #32]
 8009548:	b90b      	cbnz	r3, 800954e <_fflush_r+0x1a>
 800954a:	f7fe fa8d 	bl	8007a68 <__sinit>
 800954e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f3      	beq.n	800953e <_fflush_r+0xa>
 8009556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009558:	07d0      	lsls	r0, r2, #31
 800955a:	d404      	bmi.n	8009566 <_fflush_r+0x32>
 800955c:	0599      	lsls	r1, r3, #22
 800955e:	d402      	bmi.n	8009566 <_fflush_r+0x32>
 8009560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009562:	f7fe fb97 	bl	8007c94 <__retarget_lock_acquire_recursive>
 8009566:	4628      	mov	r0, r5
 8009568:	4621      	mov	r1, r4
 800956a:	f7ff ff5d 	bl	8009428 <__sflush_r>
 800956e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009570:	07da      	lsls	r2, r3, #31
 8009572:	4605      	mov	r5, r0
 8009574:	d4e4      	bmi.n	8009540 <_fflush_r+0xc>
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	059b      	lsls	r3, r3, #22
 800957a:	d4e1      	bmi.n	8009540 <_fflush_r+0xc>
 800957c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800957e:	f7fe fb8a 	bl	8007c96 <__retarget_lock_release_recursive>
 8009582:	e7dd      	b.n	8009540 <_fflush_r+0xc>

08009584 <memmove>:
 8009584:	4288      	cmp	r0, r1
 8009586:	b510      	push	{r4, lr}
 8009588:	eb01 0402 	add.w	r4, r1, r2
 800958c:	d902      	bls.n	8009594 <memmove+0x10>
 800958e:	4284      	cmp	r4, r0
 8009590:	4623      	mov	r3, r4
 8009592:	d807      	bhi.n	80095a4 <memmove+0x20>
 8009594:	1e43      	subs	r3, r0, #1
 8009596:	42a1      	cmp	r1, r4
 8009598:	d008      	beq.n	80095ac <memmove+0x28>
 800959a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800959e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095a2:	e7f8      	b.n	8009596 <memmove+0x12>
 80095a4:	4402      	add	r2, r0
 80095a6:	4601      	mov	r1, r0
 80095a8:	428a      	cmp	r2, r1
 80095aa:	d100      	bne.n	80095ae <memmove+0x2a>
 80095ac:	bd10      	pop	{r4, pc}
 80095ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095b6:	e7f7      	b.n	80095a8 <memmove+0x24>

080095b8 <_sbrk_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d06      	ldr	r5, [pc, #24]	; (80095d4 <_sbrk_r+0x1c>)
 80095bc:	2300      	movs	r3, #0
 80095be:	4604      	mov	r4, r0
 80095c0:	4608      	mov	r0, r1
 80095c2:	602b      	str	r3, [r5, #0]
 80095c4:	f7f8 f980 	bl	80018c8 <_sbrk>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_sbrk_r+0x1a>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_sbrk_r+0x1a>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20000528 	.word	0x20000528

080095d8 <memcpy>:
 80095d8:	440a      	add	r2, r1
 80095da:	4291      	cmp	r1, r2
 80095dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e0:	d100      	bne.n	80095e4 <memcpy+0xc>
 80095e2:	4770      	bx	lr
 80095e4:	b510      	push	{r4, lr}
 80095e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ee:	4291      	cmp	r1, r2
 80095f0:	d1f9      	bne.n	80095e6 <memcpy+0xe>
 80095f2:	bd10      	pop	{r4, pc}

080095f4 <__assert_func>:
 80095f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095f6:	4614      	mov	r4, r2
 80095f8:	461a      	mov	r2, r3
 80095fa:	4b09      	ldr	r3, [pc, #36]	; (8009620 <__assert_func+0x2c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4605      	mov	r5, r0
 8009600:	68d8      	ldr	r0, [r3, #12]
 8009602:	b14c      	cbz	r4, 8009618 <__assert_func+0x24>
 8009604:	4b07      	ldr	r3, [pc, #28]	; (8009624 <__assert_func+0x30>)
 8009606:	9100      	str	r1, [sp, #0]
 8009608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800960c:	4906      	ldr	r1, [pc, #24]	; (8009628 <__assert_func+0x34>)
 800960e:	462b      	mov	r3, r5
 8009610:	f000 f872 	bl	80096f8 <fiprintf>
 8009614:	f000 f882 	bl	800971c <abort>
 8009618:	4b04      	ldr	r3, [pc, #16]	; (800962c <__assert_func+0x38>)
 800961a:	461c      	mov	r4, r3
 800961c:	e7f3      	b.n	8009606 <__assert_func+0x12>
 800961e:	bf00      	nop
 8009620:	20000068 	.word	0x20000068
 8009624:	0800fcdf 	.word	0x0800fcdf
 8009628:	0800fcec 	.word	0x0800fcec
 800962c:	0800fd1a 	.word	0x0800fd1a

08009630 <_calloc_r>:
 8009630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009632:	fba1 2402 	umull	r2, r4, r1, r2
 8009636:	b94c      	cbnz	r4, 800964c <_calloc_r+0x1c>
 8009638:	4611      	mov	r1, r2
 800963a:	9201      	str	r2, [sp, #4]
 800963c:	f7ff f994 	bl	8008968 <_malloc_r>
 8009640:	9a01      	ldr	r2, [sp, #4]
 8009642:	4605      	mov	r5, r0
 8009644:	b930      	cbnz	r0, 8009654 <_calloc_r+0x24>
 8009646:	4628      	mov	r0, r5
 8009648:	b003      	add	sp, #12
 800964a:	bd30      	pop	{r4, r5, pc}
 800964c:	220c      	movs	r2, #12
 800964e:	6002      	str	r2, [r0, #0]
 8009650:	2500      	movs	r5, #0
 8009652:	e7f8      	b.n	8009646 <_calloc_r+0x16>
 8009654:	4621      	mov	r1, r4
 8009656:	f7fe faa0 	bl	8007b9a <memset>
 800965a:	e7f4      	b.n	8009646 <_calloc_r+0x16>

0800965c <__ascii_mbtowc>:
 800965c:	b082      	sub	sp, #8
 800965e:	b901      	cbnz	r1, 8009662 <__ascii_mbtowc+0x6>
 8009660:	a901      	add	r1, sp, #4
 8009662:	b142      	cbz	r2, 8009676 <__ascii_mbtowc+0x1a>
 8009664:	b14b      	cbz	r3, 800967a <__ascii_mbtowc+0x1e>
 8009666:	7813      	ldrb	r3, [r2, #0]
 8009668:	600b      	str	r3, [r1, #0]
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	1e10      	subs	r0, r2, #0
 800966e:	bf18      	it	ne
 8009670:	2001      	movne	r0, #1
 8009672:	b002      	add	sp, #8
 8009674:	4770      	bx	lr
 8009676:	4610      	mov	r0, r2
 8009678:	e7fb      	b.n	8009672 <__ascii_mbtowc+0x16>
 800967a:	f06f 0001 	mvn.w	r0, #1
 800967e:	e7f8      	b.n	8009672 <__ascii_mbtowc+0x16>

08009680 <_realloc_r>:
 8009680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	4680      	mov	r8, r0
 8009686:	4614      	mov	r4, r2
 8009688:	460e      	mov	r6, r1
 800968a:	b921      	cbnz	r1, 8009696 <_realloc_r+0x16>
 800968c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	4611      	mov	r1, r2
 8009692:	f7ff b969 	b.w	8008968 <_malloc_r>
 8009696:	b92a      	cbnz	r2, 80096a4 <_realloc_r+0x24>
 8009698:	f7ff f8f2 	bl	8008880 <_free_r>
 800969c:	4625      	mov	r5, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a4:	f000 f841 	bl	800972a <_malloc_usable_size_r>
 80096a8:	4284      	cmp	r4, r0
 80096aa:	4607      	mov	r7, r0
 80096ac:	d802      	bhi.n	80096b4 <_realloc_r+0x34>
 80096ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096b2:	d812      	bhi.n	80096da <_realloc_r+0x5a>
 80096b4:	4621      	mov	r1, r4
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7ff f956 	bl	8008968 <_malloc_r>
 80096bc:	4605      	mov	r5, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	d0ed      	beq.n	800969e <_realloc_r+0x1e>
 80096c2:	42bc      	cmp	r4, r7
 80096c4:	4622      	mov	r2, r4
 80096c6:	4631      	mov	r1, r6
 80096c8:	bf28      	it	cs
 80096ca:	463a      	movcs	r2, r7
 80096cc:	f7ff ff84 	bl	80095d8 <memcpy>
 80096d0:	4631      	mov	r1, r6
 80096d2:	4640      	mov	r0, r8
 80096d4:	f7ff f8d4 	bl	8008880 <_free_r>
 80096d8:	e7e1      	b.n	800969e <_realloc_r+0x1e>
 80096da:	4635      	mov	r5, r6
 80096dc:	e7df      	b.n	800969e <_realloc_r+0x1e>

080096de <__ascii_wctomb>:
 80096de:	b149      	cbz	r1, 80096f4 <__ascii_wctomb+0x16>
 80096e0:	2aff      	cmp	r2, #255	; 0xff
 80096e2:	bf85      	ittet	hi
 80096e4:	238a      	movhi	r3, #138	; 0x8a
 80096e6:	6003      	strhi	r3, [r0, #0]
 80096e8:	700a      	strbls	r2, [r1, #0]
 80096ea:	f04f 30ff 	movhi.w	r0, #4294967295
 80096ee:	bf98      	it	ls
 80096f0:	2001      	movls	r0, #1
 80096f2:	4770      	bx	lr
 80096f4:	4608      	mov	r0, r1
 80096f6:	4770      	bx	lr

080096f8 <fiprintf>:
 80096f8:	b40e      	push	{r1, r2, r3}
 80096fa:	b503      	push	{r0, r1, lr}
 80096fc:	4601      	mov	r1, r0
 80096fe:	ab03      	add	r3, sp, #12
 8009700:	4805      	ldr	r0, [pc, #20]	; (8009718 <fiprintf+0x20>)
 8009702:	f853 2b04 	ldr.w	r2, [r3], #4
 8009706:	6800      	ldr	r0, [r0, #0]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	f000 f83f 	bl	800978c <_vfiprintf_r>
 800970e:	b002      	add	sp, #8
 8009710:	f85d eb04 	ldr.w	lr, [sp], #4
 8009714:	b003      	add	sp, #12
 8009716:	4770      	bx	lr
 8009718:	20000068 	.word	0x20000068

0800971c <abort>:
 800971c:	b508      	push	{r3, lr}
 800971e:	2006      	movs	r0, #6
 8009720:	f000 fa0c 	bl	8009b3c <raise>
 8009724:	2001      	movs	r0, #1
 8009726:	f7f8 f857 	bl	80017d8 <_exit>

0800972a <_malloc_usable_size_r>:
 800972a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800972e:	1f18      	subs	r0, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	bfbc      	itt	lt
 8009734:	580b      	ldrlt	r3, [r1, r0]
 8009736:	18c0      	addlt	r0, r0, r3
 8009738:	4770      	bx	lr

0800973a <__sfputc_r>:
 800973a:	6893      	ldr	r3, [r2, #8]
 800973c:	3b01      	subs	r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	b410      	push	{r4}
 8009742:	6093      	str	r3, [r2, #8]
 8009744:	da08      	bge.n	8009758 <__sfputc_r+0x1e>
 8009746:	6994      	ldr	r4, [r2, #24]
 8009748:	42a3      	cmp	r3, r4
 800974a:	db01      	blt.n	8009750 <__sfputc_r+0x16>
 800974c:	290a      	cmp	r1, #10
 800974e:	d103      	bne.n	8009758 <__sfputc_r+0x1e>
 8009750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009754:	f000 b934 	b.w	80099c0 <__swbuf_r>
 8009758:	6813      	ldr	r3, [r2, #0]
 800975a:	1c58      	adds	r0, r3, #1
 800975c:	6010      	str	r0, [r2, #0]
 800975e:	7019      	strb	r1, [r3, #0]
 8009760:	4608      	mov	r0, r1
 8009762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009766:	4770      	bx	lr

08009768 <__sfputs_r>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	4606      	mov	r6, r0
 800976c:	460f      	mov	r7, r1
 800976e:	4614      	mov	r4, r2
 8009770:	18d5      	adds	r5, r2, r3
 8009772:	42ac      	cmp	r4, r5
 8009774:	d101      	bne.n	800977a <__sfputs_r+0x12>
 8009776:	2000      	movs	r0, #0
 8009778:	e007      	b.n	800978a <__sfputs_r+0x22>
 800977a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977e:	463a      	mov	r2, r7
 8009780:	4630      	mov	r0, r6
 8009782:	f7ff ffda 	bl	800973a <__sfputc_r>
 8009786:	1c43      	adds	r3, r0, #1
 8009788:	d1f3      	bne.n	8009772 <__sfputs_r+0xa>
 800978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800978c <_vfiprintf_r>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	460d      	mov	r5, r1
 8009792:	b09d      	sub	sp, #116	; 0x74
 8009794:	4614      	mov	r4, r2
 8009796:	4698      	mov	r8, r3
 8009798:	4606      	mov	r6, r0
 800979a:	b118      	cbz	r0, 80097a4 <_vfiprintf_r+0x18>
 800979c:	6a03      	ldr	r3, [r0, #32]
 800979e:	b90b      	cbnz	r3, 80097a4 <_vfiprintf_r+0x18>
 80097a0:	f7fe f962 	bl	8007a68 <__sinit>
 80097a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a6:	07d9      	lsls	r1, r3, #31
 80097a8:	d405      	bmi.n	80097b6 <_vfiprintf_r+0x2a>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	059a      	lsls	r2, r3, #22
 80097ae:	d402      	bmi.n	80097b6 <_vfiprintf_r+0x2a>
 80097b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097b2:	f7fe fa6f 	bl	8007c94 <__retarget_lock_acquire_recursive>
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	071b      	lsls	r3, r3, #28
 80097ba:	d501      	bpl.n	80097c0 <_vfiprintf_r+0x34>
 80097bc:	692b      	ldr	r3, [r5, #16]
 80097be:	b99b      	cbnz	r3, 80097e8 <_vfiprintf_r+0x5c>
 80097c0:	4629      	mov	r1, r5
 80097c2:	4630      	mov	r0, r6
 80097c4:	f000 f93a 	bl	8009a3c <__swsetup_r>
 80097c8:	b170      	cbz	r0, 80097e8 <_vfiprintf_r+0x5c>
 80097ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097cc:	07dc      	lsls	r4, r3, #31
 80097ce:	d504      	bpl.n	80097da <_vfiprintf_r+0x4e>
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	b01d      	add	sp, #116	; 0x74
 80097d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	0598      	lsls	r0, r3, #22
 80097de:	d4f7      	bmi.n	80097d0 <_vfiprintf_r+0x44>
 80097e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e2:	f7fe fa58 	bl	8007c96 <__retarget_lock_release_recursive>
 80097e6:	e7f3      	b.n	80097d0 <_vfiprintf_r+0x44>
 80097e8:	2300      	movs	r3, #0
 80097ea:	9309      	str	r3, [sp, #36]	; 0x24
 80097ec:	2320      	movs	r3, #32
 80097ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097f6:	2330      	movs	r3, #48	; 0x30
 80097f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099ac <_vfiprintf_r+0x220>
 80097fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009800:	f04f 0901 	mov.w	r9, #1
 8009804:	4623      	mov	r3, r4
 8009806:	469a      	mov	sl, r3
 8009808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800980c:	b10a      	cbz	r2, 8009812 <_vfiprintf_r+0x86>
 800980e:	2a25      	cmp	r2, #37	; 0x25
 8009810:	d1f9      	bne.n	8009806 <_vfiprintf_r+0x7a>
 8009812:	ebba 0b04 	subs.w	fp, sl, r4
 8009816:	d00b      	beq.n	8009830 <_vfiprintf_r+0xa4>
 8009818:	465b      	mov	r3, fp
 800981a:	4622      	mov	r2, r4
 800981c:	4629      	mov	r1, r5
 800981e:	4630      	mov	r0, r6
 8009820:	f7ff ffa2 	bl	8009768 <__sfputs_r>
 8009824:	3001      	adds	r0, #1
 8009826:	f000 80a9 	beq.w	800997c <_vfiprintf_r+0x1f0>
 800982a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800982c:	445a      	add	r2, fp
 800982e:	9209      	str	r2, [sp, #36]	; 0x24
 8009830:	f89a 3000 	ldrb.w	r3, [sl]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 80a1 	beq.w	800997c <_vfiprintf_r+0x1f0>
 800983a:	2300      	movs	r3, #0
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009844:	f10a 0a01 	add.w	sl, sl, #1
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	9307      	str	r3, [sp, #28]
 800984c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009850:	931a      	str	r3, [sp, #104]	; 0x68
 8009852:	4654      	mov	r4, sl
 8009854:	2205      	movs	r2, #5
 8009856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800985a:	4854      	ldr	r0, [pc, #336]	; (80099ac <_vfiprintf_r+0x220>)
 800985c:	f7f6 fcf0 	bl	8000240 <memchr>
 8009860:	9a04      	ldr	r2, [sp, #16]
 8009862:	b9d8      	cbnz	r0, 800989c <_vfiprintf_r+0x110>
 8009864:	06d1      	lsls	r1, r2, #27
 8009866:	bf44      	itt	mi
 8009868:	2320      	movmi	r3, #32
 800986a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800986e:	0713      	lsls	r3, r2, #28
 8009870:	bf44      	itt	mi
 8009872:	232b      	movmi	r3, #43	; 0x2b
 8009874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009878:	f89a 3000 	ldrb.w	r3, [sl]
 800987c:	2b2a      	cmp	r3, #42	; 0x2a
 800987e:	d015      	beq.n	80098ac <_vfiprintf_r+0x120>
 8009880:	9a07      	ldr	r2, [sp, #28]
 8009882:	4654      	mov	r4, sl
 8009884:	2000      	movs	r0, #0
 8009886:	f04f 0c0a 	mov.w	ip, #10
 800988a:	4621      	mov	r1, r4
 800988c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009890:	3b30      	subs	r3, #48	; 0x30
 8009892:	2b09      	cmp	r3, #9
 8009894:	d94d      	bls.n	8009932 <_vfiprintf_r+0x1a6>
 8009896:	b1b0      	cbz	r0, 80098c6 <_vfiprintf_r+0x13a>
 8009898:	9207      	str	r2, [sp, #28]
 800989a:	e014      	b.n	80098c6 <_vfiprintf_r+0x13a>
 800989c:	eba0 0308 	sub.w	r3, r0, r8
 80098a0:	fa09 f303 	lsl.w	r3, r9, r3
 80098a4:	4313      	orrs	r3, r2
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	46a2      	mov	sl, r4
 80098aa:	e7d2      	b.n	8009852 <_vfiprintf_r+0xc6>
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	1d19      	adds	r1, r3, #4
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	9103      	str	r1, [sp, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bfbb      	ittet	lt
 80098b8:	425b      	neglt	r3, r3
 80098ba:	f042 0202 	orrlt.w	r2, r2, #2
 80098be:	9307      	strge	r3, [sp, #28]
 80098c0:	9307      	strlt	r3, [sp, #28]
 80098c2:	bfb8      	it	lt
 80098c4:	9204      	strlt	r2, [sp, #16]
 80098c6:	7823      	ldrb	r3, [r4, #0]
 80098c8:	2b2e      	cmp	r3, #46	; 0x2e
 80098ca:	d10c      	bne.n	80098e6 <_vfiprintf_r+0x15a>
 80098cc:	7863      	ldrb	r3, [r4, #1]
 80098ce:	2b2a      	cmp	r3, #42	; 0x2a
 80098d0:	d134      	bne.n	800993c <_vfiprintf_r+0x1b0>
 80098d2:	9b03      	ldr	r3, [sp, #12]
 80098d4:	1d1a      	adds	r2, r3, #4
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	9203      	str	r2, [sp, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bfb8      	it	lt
 80098de:	f04f 33ff 	movlt.w	r3, #4294967295
 80098e2:	3402      	adds	r4, #2
 80098e4:	9305      	str	r3, [sp, #20]
 80098e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80099bc <_vfiprintf_r+0x230>
 80098ea:	7821      	ldrb	r1, [r4, #0]
 80098ec:	2203      	movs	r2, #3
 80098ee:	4650      	mov	r0, sl
 80098f0:	f7f6 fca6 	bl	8000240 <memchr>
 80098f4:	b138      	cbz	r0, 8009906 <_vfiprintf_r+0x17a>
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	eba0 000a 	sub.w	r0, r0, sl
 80098fc:	2240      	movs	r2, #64	; 0x40
 80098fe:	4082      	lsls	r2, r0
 8009900:	4313      	orrs	r3, r2
 8009902:	3401      	adds	r4, #1
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990a:	4829      	ldr	r0, [pc, #164]	; (80099b0 <_vfiprintf_r+0x224>)
 800990c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009910:	2206      	movs	r2, #6
 8009912:	f7f6 fc95 	bl	8000240 <memchr>
 8009916:	2800      	cmp	r0, #0
 8009918:	d03f      	beq.n	800999a <_vfiprintf_r+0x20e>
 800991a:	4b26      	ldr	r3, [pc, #152]	; (80099b4 <_vfiprintf_r+0x228>)
 800991c:	bb1b      	cbnz	r3, 8009966 <_vfiprintf_r+0x1da>
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	3307      	adds	r3, #7
 8009922:	f023 0307 	bic.w	r3, r3, #7
 8009926:	3308      	adds	r3, #8
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800992c:	443b      	add	r3, r7
 800992e:	9309      	str	r3, [sp, #36]	; 0x24
 8009930:	e768      	b.n	8009804 <_vfiprintf_r+0x78>
 8009932:	fb0c 3202 	mla	r2, ip, r2, r3
 8009936:	460c      	mov	r4, r1
 8009938:	2001      	movs	r0, #1
 800993a:	e7a6      	b.n	800988a <_vfiprintf_r+0xfe>
 800993c:	2300      	movs	r3, #0
 800993e:	3401      	adds	r4, #1
 8009940:	9305      	str	r3, [sp, #20]
 8009942:	4619      	mov	r1, r3
 8009944:	f04f 0c0a 	mov.w	ip, #10
 8009948:	4620      	mov	r0, r4
 800994a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800994e:	3a30      	subs	r2, #48	; 0x30
 8009950:	2a09      	cmp	r2, #9
 8009952:	d903      	bls.n	800995c <_vfiprintf_r+0x1d0>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0c6      	beq.n	80098e6 <_vfiprintf_r+0x15a>
 8009958:	9105      	str	r1, [sp, #20]
 800995a:	e7c4      	b.n	80098e6 <_vfiprintf_r+0x15a>
 800995c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009960:	4604      	mov	r4, r0
 8009962:	2301      	movs	r3, #1
 8009964:	e7f0      	b.n	8009948 <_vfiprintf_r+0x1bc>
 8009966:	ab03      	add	r3, sp, #12
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	462a      	mov	r2, r5
 800996c:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <_vfiprintf_r+0x22c>)
 800996e:	a904      	add	r1, sp, #16
 8009970:	4630      	mov	r0, r6
 8009972:	f7fd fc55 	bl	8007220 <_printf_float>
 8009976:	4607      	mov	r7, r0
 8009978:	1c78      	adds	r0, r7, #1
 800997a:	d1d6      	bne.n	800992a <_vfiprintf_r+0x19e>
 800997c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800997e:	07d9      	lsls	r1, r3, #31
 8009980:	d405      	bmi.n	800998e <_vfiprintf_r+0x202>
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	059a      	lsls	r2, r3, #22
 8009986:	d402      	bmi.n	800998e <_vfiprintf_r+0x202>
 8009988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800998a:	f7fe f984 	bl	8007c96 <__retarget_lock_release_recursive>
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	065b      	lsls	r3, r3, #25
 8009992:	f53f af1d 	bmi.w	80097d0 <_vfiprintf_r+0x44>
 8009996:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009998:	e71c      	b.n	80097d4 <_vfiprintf_r+0x48>
 800999a:	ab03      	add	r3, sp, #12
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	462a      	mov	r2, r5
 80099a0:	4b05      	ldr	r3, [pc, #20]	; (80099b8 <_vfiprintf_r+0x22c>)
 80099a2:	a904      	add	r1, sp, #16
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7fd fec3 	bl	8007730 <_printf_i>
 80099aa:	e7e4      	b.n	8009976 <_vfiprintf_r+0x1ea>
 80099ac:	0800fcc4 	.word	0x0800fcc4
 80099b0:	0800fcce 	.word	0x0800fcce
 80099b4:	08007221 	.word	0x08007221
 80099b8:	08009769 	.word	0x08009769
 80099bc:	0800fcca 	.word	0x0800fcca

080099c0 <__swbuf_r>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	460e      	mov	r6, r1
 80099c4:	4614      	mov	r4, r2
 80099c6:	4605      	mov	r5, r0
 80099c8:	b118      	cbz	r0, 80099d2 <__swbuf_r+0x12>
 80099ca:	6a03      	ldr	r3, [r0, #32]
 80099cc:	b90b      	cbnz	r3, 80099d2 <__swbuf_r+0x12>
 80099ce:	f7fe f84b 	bl	8007a68 <__sinit>
 80099d2:	69a3      	ldr	r3, [r4, #24]
 80099d4:	60a3      	str	r3, [r4, #8]
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	071a      	lsls	r2, r3, #28
 80099da:	d525      	bpl.n	8009a28 <__swbuf_r+0x68>
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	b31b      	cbz	r3, 8009a28 <__swbuf_r+0x68>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	6922      	ldr	r2, [r4, #16]
 80099e4:	1a98      	subs	r0, r3, r2
 80099e6:	6963      	ldr	r3, [r4, #20]
 80099e8:	b2f6      	uxtb	r6, r6
 80099ea:	4283      	cmp	r3, r0
 80099ec:	4637      	mov	r7, r6
 80099ee:	dc04      	bgt.n	80099fa <__swbuf_r+0x3a>
 80099f0:	4621      	mov	r1, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f7ff fd9e 	bl	8009534 <_fflush_r>
 80099f8:	b9e0      	cbnz	r0, 8009a34 <__swbuf_r+0x74>
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	60a3      	str	r3, [r4, #8]
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	6022      	str	r2, [r4, #0]
 8009a06:	701e      	strb	r6, [r3, #0]
 8009a08:	6962      	ldr	r2, [r4, #20]
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d004      	beq.n	8009a1a <__swbuf_r+0x5a>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	07db      	lsls	r3, r3, #31
 8009a14:	d506      	bpl.n	8009a24 <__swbuf_r+0x64>
 8009a16:	2e0a      	cmp	r6, #10
 8009a18:	d104      	bne.n	8009a24 <__swbuf_r+0x64>
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	f7ff fd89 	bl	8009534 <_fflush_r>
 8009a22:	b938      	cbnz	r0, 8009a34 <__swbuf_r+0x74>
 8009a24:	4638      	mov	r0, r7
 8009a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 f806 	bl	8009a3c <__swsetup_r>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d0d5      	beq.n	80099e0 <__swbuf_r+0x20>
 8009a34:	f04f 37ff 	mov.w	r7, #4294967295
 8009a38:	e7f4      	b.n	8009a24 <__swbuf_r+0x64>
	...

08009a3c <__swsetup_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ae8 <__swsetup_r+0xac>)
 8009a40:	4605      	mov	r5, r0
 8009a42:	6818      	ldr	r0, [r3, #0]
 8009a44:	460c      	mov	r4, r1
 8009a46:	b118      	cbz	r0, 8009a50 <__swsetup_r+0x14>
 8009a48:	6a03      	ldr	r3, [r0, #32]
 8009a4a:	b90b      	cbnz	r3, 8009a50 <__swsetup_r+0x14>
 8009a4c:	f7fe f80c 	bl	8007a68 <__sinit>
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a56:	0718      	lsls	r0, r3, #28
 8009a58:	d422      	bmi.n	8009aa0 <__swsetup_r+0x64>
 8009a5a:	06d9      	lsls	r1, r3, #27
 8009a5c:	d407      	bmi.n	8009a6e <__swsetup_r+0x32>
 8009a5e:	2309      	movs	r3, #9
 8009a60:	602b      	str	r3, [r5, #0]
 8009a62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6c:	e034      	b.n	8009ad8 <__swsetup_r+0x9c>
 8009a6e:	0758      	lsls	r0, r3, #29
 8009a70:	d512      	bpl.n	8009a98 <__swsetup_r+0x5c>
 8009a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a74:	b141      	cbz	r1, 8009a88 <__swsetup_r+0x4c>
 8009a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	d002      	beq.n	8009a84 <__swsetup_r+0x48>
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f7fe fefe 	bl	8008880 <_free_r>
 8009a84:	2300      	movs	r3, #0
 8009a86:	6363      	str	r3, [r4, #52]	; 0x34
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a8e:	81a3      	strh	r3, [r4, #12]
 8009a90:	2300      	movs	r3, #0
 8009a92:	6063      	str	r3, [r4, #4]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	f043 0308 	orr.w	r3, r3, #8
 8009a9e:	81a3      	strh	r3, [r4, #12]
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	b94b      	cbnz	r3, 8009ab8 <__swsetup_r+0x7c>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aae:	d003      	beq.n	8009ab8 <__swsetup_r+0x7c>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f000 f884 	bl	8009bc0 <__smakebuf_r>
 8009ab8:	89a0      	ldrh	r0, [r4, #12]
 8009aba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009abe:	f010 0301 	ands.w	r3, r0, #1
 8009ac2:	d00a      	beq.n	8009ada <__swsetup_r+0x9e>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60a3      	str	r3, [r4, #8]
 8009ac8:	6963      	ldr	r3, [r4, #20]
 8009aca:	425b      	negs	r3, r3
 8009acc:	61a3      	str	r3, [r4, #24]
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	b943      	cbnz	r3, 8009ae4 <__swsetup_r+0xa8>
 8009ad2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ad6:	d1c4      	bne.n	8009a62 <__swsetup_r+0x26>
 8009ad8:	bd38      	pop	{r3, r4, r5, pc}
 8009ada:	0781      	lsls	r1, r0, #30
 8009adc:	bf58      	it	pl
 8009ade:	6963      	ldrpl	r3, [r4, #20]
 8009ae0:	60a3      	str	r3, [r4, #8]
 8009ae2:	e7f4      	b.n	8009ace <__swsetup_r+0x92>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	e7f7      	b.n	8009ad8 <__swsetup_r+0x9c>
 8009ae8:	20000068 	.word	0x20000068

08009aec <_raise_r>:
 8009aec:	291f      	cmp	r1, #31
 8009aee:	b538      	push	{r3, r4, r5, lr}
 8009af0:	4604      	mov	r4, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	d904      	bls.n	8009b00 <_raise_r+0x14>
 8009af6:	2316      	movs	r3, #22
 8009af8:	6003      	str	r3, [r0, #0]
 8009afa:	f04f 30ff 	mov.w	r0, #4294967295
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b02:	b112      	cbz	r2, 8009b0a <_raise_r+0x1e>
 8009b04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b08:	b94b      	cbnz	r3, 8009b1e <_raise_r+0x32>
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f000 f830 	bl	8009b70 <_getpid_r>
 8009b10:	462a      	mov	r2, r5
 8009b12:	4601      	mov	r1, r0
 8009b14:	4620      	mov	r0, r4
 8009b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b1a:	f000 b817 	b.w	8009b4c <_kill_r>
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d00a      	beq.n	8009b38 <_raise_r+0x4c>
 8009b22:	1c59      	adds	r1, r3, #1
 8009b24:	d103      	bne.n	8009b2e <_raise_r+0x42>
 8009b26:	2316      	movs	r3, #22
 8009b28:	6003      	str	r3, [r0, #0]
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	e7e7      	b.n	8009afe <_raise_r+0x12>
 8009b2e:	2400      	movs	r4, #0
 8009b30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b34:	4628      	mov	r0, r5
 8009b36:	4798      	blx	r3
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e7e0      	b.n	8009afe <_raise_r+0x12>

08009b3c <raise>:
 8009b3c:	4b02      	ldr	r3, [pc, #8]	; (8009b48 <raise+0xc>)
 8009b3e:	4601      	mov	r1, r0
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	f7ff bfd3 	b.w	8009aec <_raise_r>
 8009b46:	bf00      	nop
 8009b48:	20000068 	.word	0x20000068

08009b4c <_kill_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d07      	ldr	r5, [pc, #28]	; (8009b6c <_kill_r+0x20>)
 8009b50:	2300      	movs	r3, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	4611      	mov	r1, r2
 8009b58:	602b      	str	r3, [r5, #0]
 8009b5a:	f7f7 fe2d 	bl	80017b8 <_kill>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d102      	bne.n	8009b68 <_kill_r+0x1c>
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	b103      	cbz	r3, 8009b68 <_kill_r+0x1c>
 8009b66:	6023      	str	r3, [r4, #0]
 8009b68:	bd38      	pop	{r3, r4, r5, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000528 	.word	0x20000528

08009b70 <_getpid_r>:
 8009b70:	f7f7 be1a 	b.w	80017a8 <_getpid>

08009b74 <__swhatbuf_r>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	460c      	mov	r4, r1
 8009b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	b096      	sub	sp, #88	; 0x58
 8009b80:	4615      	mov	r5, r2
 8009b82:	461e      	mov	r6, r3
 8009b84:	da0d      	bge.n	8009ba2 <__swhatbuf_r+0x2e>
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b8c:	f04f 0100 	mov.w	r1, #0
 8009b90:	bf0c      	ite	eq
 8009b92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b96:	2340      	movne	r3, #64	; 0x40
 8009b98:	2000      	movs	r0, #0
 8009b9a:	6031      	str	r1, [r6, #0]
 8009b9c:	602b      	str	r3, [r5, #0]
 8009b9e:	b016      	add	sp, #88	; 0x58
 8009ba0:	bd70      	pop	{r4, r5, r6, pc}
 8009ba2:	466a      	mov	r2, sp
 8009ba4:	f000 f848 	bl	8009c38 <_fstat_r>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	dbec      	blt.n	8009b86 <__swhatbuf_r+0x12>
 8009bac:	9901      	ldr	r1, [sp, #4]
 8009bae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009bb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009bb6:	4259      	negs	r1, r3
 8009bb8:	4159      	adcs	r1, r3
 8009bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bbe:	e7eb      	b.n	8009b98 <__swhatbuf_r+0x24>

08009bc0 <__smakebuf_r>:
 8009bc0:	898b      	ldrh	r3, [r1, #12]
 8009bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bc4:	079d      	lsls	r5, r3, #30
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460c      	mov	r4, r1
 8009bca:	d507      	bpl.n	8009bdc <__smakebuf_r+0x1c>
 8009bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	6163      	str	r3, [r4, #20]
 8009bd8:	b002      	add	sp, #8
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	ab01      	add	r3, sp, #4
 8009bde:	466a      	mov	r2, sp
 8009be0:	f7ff ffc8 	bl	8009b74 <__swhatbuf_r>
 8009be4:	9900      	ldr	r1, [sp, #0]
 8009be6:	4605      	mov	r5, r0
 8009be8:	4630      	mov	r0, r6
 8009bea:	f7fe febd 	bl	8008968 <_malloc_r>
 8009bee:	b948      	cbnz	r0, 8009c04 <__smakebuf_r+0x44>
 8009bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf4:	059a      	lsls	r2, r3, #22
 8009bf6:	d4ef      	bmi.n	8009bd8 <__smakebuf_r+0x18>
 8009bf8:	f023 0303 	bic.w	r3, r3, #3
 8009bfc:	f043 0302 	orr.w	r3, r3, #2
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	e7e3      	b.n	8009bcc <__smakebuf_r+0xc>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	6020      	str	r0, [r4, #0]
 8009c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	9b00      	ldr	r3, [sp, #0]
 8009c10:	6163      	str	r3, [r4, #20]
 8009c12:	9b01      	ldr	r3, [sp, #4]
 8009c14:	6120      	str	r0, [r4, #16]
 8009c16:	b15b      	cbz	r3, 8009c30 <__smakebuf_r+0x70>
 8009c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f000 f81d 	bl	8009c5c <_isatty_r>
 8009c22:	b128      	cbz	r0, 8009c30 <__smakebuf_r+0x70>
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	f023 0303 	bic.w	r3, r3, #3
 8009c2a:	f043 0301 	orr.w	r3, r3, #1
 8009c2e:	81a3      	strh	r3, [r4, #12]
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	431d      	orrs	r5, r3
 8009c34:	81a5      	strh	r5, [r4, #12]
 8009c36:	e7cf      	b.n	8009bd8 <__smakebuf_r+0x18>

08009c38 <_fstat_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d07      	ldr	r5, [pc, #28]	; (8009c58 <_fstat_r+0x20>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	4611      	mov	r1, r2
 8009c44:	602b      	str	r3, [r5, #0]
 8009c46:	f7f7 fe16 	bl	8001876 <_fstat>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	d102      	bne.n	8009c54 <_fstat_r+0x1c>
 8009c4e:	682b      	ldr	r3, [r5, #0]
 8009c50:	b103      	cbz	r3, 8009c54 <_fstat_r+0x1c>
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
 8009c56:	bf00      	nop
 8009c58:	20000528 	.word	0x20000528

08009c5c <_isatty_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d06      	ldr	r5, [pc, #24]	; (8009c78 <_isatty_r+0x1c>)
 8009c60:	2300      	movs	r3, #0
 8009c62:	4604      	mov	r4, r0
 8009c64:	4608      	mov	r0, r1
 8009c66:	602b      	str	r3, [r5, #0]
 8009c68:	f7f7 fe15 	bl	8001896 <_isatty>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d102      	bne.n	8009c76 <_isatty_r+0x1a>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	b103      	cbz	r3, 8009c76 <_isatty_r+0x1a>
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
 8009c78:	20000528 	.word	0x20000528

08009c7c <_init>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	bf00      	nop
 8009c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c82:	bc08      	pop	{r3}
 8009c84:	469e      	mov	lr, r3
 8009c86:	4770      	bx	lr

08009c88 <_fini>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	bf00      	nop
 8009c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8e:	bc08      	pop	{r3}
 8009c90:	469e      	mov	lr, r3
 8009c92:	4770      	bx	lr
