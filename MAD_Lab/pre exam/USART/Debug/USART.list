
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b74  08003b74  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000006c  08003be8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003be8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad5f  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c07  00000000  00000000  0002ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000615  00000000  00000000  0002d248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c82  00000000  00000000  0002d85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb9f  00000000  00000000  000544df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f062a  00000000  00000000  0006007e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ecc  00000000  00000000  001506a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00152574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000006c 	.word	0x2000006c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003b38 	.word	0x08003b38

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000070 	.word	0x20000070
 8000234:	08003b38 	.word	0x08003b38

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_GPIO_Init+0x2c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <MX_GPIO_Init+0x2c>)
 8000550:	f043 0308 	orr.w	r3, r3, #8
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_GPIO_Init+0x2c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fa6b 	bl	8000a52 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800057c:	f000 f90c 	bl	8000798 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f81c 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f7ff ffde 	bl	8000544 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000588:	f000 f9a2 	bl	80008d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	4908      	ldr	r1, [pc, #32]	; (80005b0 <main+0x3c>)
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x40>)
 8000592:	f002 f864 	bl	800265e <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, (uint8_t*)&s, strlen(s), 1000);
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0x44>)
 8000598:	f7ff fe4e 	bl	8000238 <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <main+0x44>)
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <main+0x40>)
 80005a8:	f001 ffd6 	bl	8002558 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x38>
 80005ae:	bf00      	nop
 80005b0:	20000088 	.word	0x20000088
 80005b4:	200000f4 	.word	0x200000f4
 80005b8:	20000008 	.word	0x20000008

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fa88 	bl	8003ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <SystemClock_Config+0xd4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <SystemClock_Config+0xd4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xd4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <SystemClock_Config+0xd8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a25      	ldr	r2, [pc, #148]	; (8000694 <SystemClock_Config+0xd8>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <SystemClock_Config+0xd8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000624:	2308      	movs	r3, #8
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000628:	23d8      	movs	r3, #216	; 0xd8
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fe81 	bl	8001344 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000648:	f000 f8d2 	bl	80007f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800064c:	f000 fe2a 	bl	80012a4 <HAL_PWREx_EnableOverDrive>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000656:	f000 f8cb 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2107      	movs	r1, #7
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f911 	bl	80018a0 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000684:	f000 f8b4 	bl	80007f0 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	; 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	if(huart==&huart3){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a37      	ldr	r2, [pc, #220]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d167      	bne.n	8000778 <HAL_UART_RxCpltCallback+0xe0>
		HAL_UART_Receive_IT(&huart3,(uint8_t*)&ch,1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	4936      	ldr	r1, [pc, #216]	; (8000784 <HAL_UART_RxCpltCallback+0xec>)
 80006ac:	4834      	ldr	r0, [pc, #208]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 80006ae:	f001 ffd6 	bl	800265e <HAL_UART_Receive_IT>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006b2:	bf00      	nop
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	2b40      	cmp	r3, #64	; 0x40
 80006c0:	d1f8      	bne.n	80006b4 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	2201      	movs	r2, #1
 80006c8:	492e      	ldr	r1, [pc, #184]	; (8000784 <HAL_UART_RxCpltCallback+0xec>)
 80006ca:	482d      	ldr	r0, [pc, #180]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 80006cc:	f001 ff44 	bl	8002558 <HAL_UART_Transmit>
		if(ch==13){
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <HAL_UART_RxCpltCallback+0xec>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b0d      	cmp	r3, #13
 80006d6:	d146      	bne.n	8000766 <HAL_UART_RxCpltCallback+0xce>
			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006d8:	bf00      	nop
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e4:	2b40      	cmp	r3, #64	; 0x40
 80006e6:	d1f8      	bne.n	80006da <HAL_UART_RxCpltCallback+0x42>
			HAL_UART_Transmit(&huart3, (uint8_t*)&"\n\r", strlen('\n\r'), 1000);
 80006e8:	f640 200d 	movw	r0, #2573	; 0xa0d
 80006ec:	f7ff fda4 	bl	8000238 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	4923      	ldr	r1, [pc, #140]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 80006fa:	4821      	ldr	r0, [pc, #132]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 80006fc:	f001 ff2c 	bl	8002558 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*)&msg, strlen(msg), 1000);
 8000700:	4822      	ldr	r0, [pc, #136]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 8000702:	f7ff fd99 	bl	8000238 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	491f      	ldr	r1, [pc, #124]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 8000710:	481b      	ldr	r0, [pc, #108]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 8000712:	f001 ff21 	bl	8002558 <HAL_UART_Transmit>
			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000716:	bf00      	nop
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000722:	2b40      	cmp	r3, #64	; 0x40
 8000724:	d1f8      	bne.n	8000718 <HAL_UART_RxCpltCallback+0x80>
			HAL_UART_Transmit(&huart3, (uint8_t*)&name, strlen(name), 1000);
 8000726:	481a      	ldr	r0, [pc, #104]	; (8000790 <HAL_UART_RxCpltCallback+0xf8>)
 8000728:	f7ff fd86 	bl	8000238 <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	4916      	ldr	r1, [pc, #88]	; (8000790 <HAL_UART_RxCpltCallback+0xf8>)
 8000736:	4812      	ldr	r0, [pc, #72]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 8000738:	f001 ff0e 	bl	8002558 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*)&"\n\r", strlen('\n\r'), 1000);
 800073c:	f640 200d 	movw	r0, #2573	; 0xa0d
 8000740:	f7ff fd7a 	bl	8000238 <strlen>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	490e      	ldr	r1, [pc, #56]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 800074e:	480c      	ldr	r0, [pc, #48]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 8000750:	f001 ff02 	bl	8002558 <HAL_UART_Transmit>
			memset(name, 0, sizeof(name));
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	2100      	movs	r1, #0
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <HAL_UART_RxCpltCallback+0xf8>)
 800075a:	f003 f9c1 	bl	8003ae0 <memset>
			idxName = 0;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <HAL_UART_RxCpltCallback+0xfc>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
//		}
//		else{
//			HAL_UART_Transmit(&huart3, (uint8_t*)&u, strlen(u), 1000);
//		}
	}
}
 8000764:	e008      	b.n	8000778 <HAL_UART_RxCpltCallback+0xe0>
			name[idxName++]=ch;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_UART_RxCpltCallback+0xfc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	4909      	ldr	r1, [pc, #36]	; (8000794 <HAL_UART_RxCpltCallback+0xfc>)
 800076e:	600a      	str	r2, [r1, #0]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_UART_RxCpltCallback+0xec>)
 8000772:	7811      	ldrb	r1, [r2, #0]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_UART_RxCpltCallback+0xf8>)
 8000776:	54d1      	strb	r1, [r2, r3]
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000f4 	.word	0x200000f4
 8000784:	20000088 	.word	0x20000088
 8000788:	08003b50 	.word	0x08003b50
 800078c:	20000000 	.word	0x20000000
 8000790:	2000008c 	.word	0x2000008c
 8000794:	200000f0 	.word	0x200000f0

08000798 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007aa:	f000 fac1 	bl	8000d30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007ba:	231f      	movs	r3, #31
 80007bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007be:	2387      	movs	r3, #135	; 0x87
 80007c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007c6:	2300      	movs	r3, #0
 80007c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ca:	2301      	movs	r3, #1
 80007cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007da:	463b      	mov	r3, r7
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fadf 	bl	8000da0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007e2:	2004      	movs	r0, #4
 80007e4:	f000 fabc 	bl	8000d60 <HAL_MPU_Enable>

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_MspInit+0x44>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_MspInit+0x44>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x44>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x44>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x44>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f91c 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USART3_IRQHandler+0x10>)
 800089e:	f001 ff23 	bl	80026e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000f4 	.word	0x200000f4

080008ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART3_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000914:	f001 fdd2 	bl	80024bc <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f7ff ff67 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000f4 	.word	0x200000f4
 800092c:	40004800 	.word	0x40004800

08000930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ae      	sub	sp, #184	; 0xb8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2290      	movs	r2, #144	; 0x90
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f003 f8c5 	bl	8003ae0 <memset>
  if(uartHandle->Instance==USART3)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a26      	ldr	r2, [pc, #152]	; (80009f4 <HAL_UART_MspInit+0xc4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d144      	bne.n	80009ea <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000964:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000966:	2300      	movs	r3, #0
 8000968:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f97c 	bl	8001c6c <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800097a:	f7ff ff39 	bl	80007f0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <HAL_UART_MspInit+0xc8>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_UART_MspInit+0xc8>)
 8000984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <HAL_UART_MspInit+0xc8>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_UART_MspInit+0xc8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0xc8>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_UART_MspInit+0xc8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c8:	2307      	movs	r3, #7
 80009ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <HAL_UART_MspInit+0xcc>)
 80009d6:	f000 fab9 	bl	8000f4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2027      	movs	r0, #39	; 0x27
 80009e0:	f000 f96f 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009e4:	2027      	movs	r0, #39	; 0x27
 80009e6:	f000 f988 	bl	8000cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009ea:	bf00      	nop
 80009ec:	37b8      	adds	r7, #184	; 0xb8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40004800 	.word	0x40004800
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a1c:	4c0b      	ldr	r4, [pc, #44]	; (8000a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2a:	f7ff ff3f 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f003 f85f 	bl	8003af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fd9f 	bl	8000574 <main>
  bx  lr    
 8000a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a44:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 8000a48:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a4c:	20000180 	.word	0x20000180

08000a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC_IRQHandler>

08000a52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a56:	2003      	movs	r0, #3
 8000a58:	f000 f928 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5c:	200f      	movs	r0, #15
 8000a5e:	f000 f805 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a62:	f7ff fecb 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f943 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 f90b 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000060 	.word	0x20000060
 8000ac4:	20000068 	.word	0x20000068
 8000ac8:	20000064 	.word	0x20000064

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000068 	.word	0x20000068
 8000af0:	2000017c 	.word	0x2000017c

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	2000017c 	.word	0x2000017c

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <__NVIC_SetPriorityGrouping+0x40>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	4313      	orrs	r3, r2
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x40>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00
 8000b50:	05fa0000 	.word	0x05fa0000

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff29 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff3e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff31 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffa2 	bl	8000c68 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d34:	f3bf 8f5f 	dmb	sy
}
 8000d38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <HAL_MPU_Disable+0x28>)
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_MPU_Disable+0x28>)
 8000d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d44:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_MPU_Disable+0x2c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	e000ed90 	.word	0xe000ed90

08000d60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_MPU_Enable+0x38>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_MPU_Enable+0x3c>)
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <HAL_MPU_Enable+0x3c>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7e:	f3bf 8f4f 	dsb	sy
}
 8000d82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d84:	f3bf 8f6f 	isb	sy
}
 8000d88:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed90 	.word	0xe000ed90
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	785a      	ldrb	r2, [r3, #1]
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_MPU_ConfigRegion+0x84>)
 8000dae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d029      	beq.n	8000e0c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <HAL_MPU_ConfigRegion+0x84>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7b1b      	ldrb	r3, [r3, #12]
 8000dc4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7adb      	ldrb	r3, [r3, #11]
 8000dca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000dcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7a9b      	ldrb	r3, [r3, #10]
 8000dd2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000dd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7b5b      	ldrb	r3, [r3, #13]
 8000dda:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ddc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7b9b      	ldrb	r3, [r3, #14]
 8000de2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000de4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7bdb      	ldrb	r3, [r3, #15]
 8000dea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000dec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7a5b      	ldrb	r3, [r3, #9]
 8000df2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000df4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000dfc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e06:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000e0a:	e005      	b.n	8000e18 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_MPU_ConfigRegion+0x84>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_MPU_ConfigRegion+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed90 	.word	0xe000ed90

08000e28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e36:	f7ff fe5d 	bl	8000af4 <HAL_GetTick>
 8000e3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d008      	beq.n	8000e5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e052      	b.n	8000f00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0216 	bic.w	r2, r2, #22
 8000e68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <HAL_DMA_Abort+0x62>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0208 	bic.w	r2, r2, #8
 8000e98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0201 	bic.w	r2, r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eaa:	e013      	b.n	8000ed4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eac:	f7ff fe22 	bl	8000af4 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b05      	cmp	r3, #5
 8000eb8:	d90c      	bls.n	8000ed4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e015      	b.n	8000f00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1e4      	bne.n	8000eac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee6:	223f      	movs	r2, #63	; 0x3f
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d004      	beq.n	8000f26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00c      	b.n	8000f40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2205      	movs	r2, #5
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0201 	bic.w	r2, r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e175      	b.n	8001258 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 8164 	bne.w	8001252 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d005      	beq.n	8000fa2 <HAL_GPIO_Init+0x56>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d017      	beq.n	8001040 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80be 	beq.w	8001252 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b66      	ldr	r3, [pc, #408]	; (8001270 <HAL_GPIO_Init+0x324>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a65      	ldr	r2, [pc, #404]	; (8001270 <HAL_GPIO_Init+0x324>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b63      	ldr	r3, [pc, #396]	; (8001270 <HAL_GPIO_Init+0x324>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010ee:	4a61      	ldr	r2, [pc, #388]	; (8001274 <HAL_GPIO_Init+0x328>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a58      	ldr	r2, [pc, #352]	; (8001278 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d037      	beq.n	800118a <HAL_GPIO_Init+0x23e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a57      	ldr	r2, [pc, #348]	; (800127c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d031      	beq.n	8001186 <HAL_GPIO_Init+0x23a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a56      	ldr	r2, [pc, #344]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d02b      	beq.n	8001182 <HAL_GPIO_Init+0x236>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a55      	ldr	r2, [pc, #340]	; (8001284 <HAL_GPIO_Init+0x338>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x232>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a54      	ldr	r2, [pc, #336]	; (8001288 <HAL_GPIO_Init+0x33c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x22e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a53      	ldr	r2, [pc, #332]	; (800128c <HAL_GPIO_Init+0x340>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x22a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a52      	ldr	r2, [pc, #328]	; (8001290 <HAL_GPIO_Init+0x344>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x226>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a51      	ldr	r2, [pc, #324]	; (8001294 <HAL_GPIO_Init+0x348>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x222>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a50      	ldr	r2, [pc, #320]	; (8001298 <HAL_GPIO_Init+0x34c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x21e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4f      	ldr	r2, [pc, #316]	; (800129c <HAL_GPIO_Init+0x350>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x21a>
 8001162:	2309      	movs	r3, #9
 8001164:	e012      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001166:	230a      	movs	r3, #10
 8001168:	e010      	b.n	800118c <HAL_GPIO_Init+0x240>
 800116a:	2308      	movs	r3, #8
 800116c:	e00e      	b.n	800118c <HAL_GPIO_Init+0x240>
 800116e:	2307      	movs	r3, #7
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001172:	2306      	movs	r3, #6
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x240>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x240>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x240>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	; (8001274 <HAL_GPIO_Init+0x328>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_GPIO_Init+0x354>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <HAL_GPIO_Init+0x354>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_GPIO_Init+0x354>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a29      	ldr	r2, [pc, #164]	; (80012a0 <HAL_GPIO_Init+0x354>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_GPIO_Init+0x354>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <HAL_GPIO_Init+0x354>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_GPIO_Init+0x354>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <HAL_GPIO_Init+0x354>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f ae86 	bls.w	8000f6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40021400 	.word	0x40021400
 8001290:	40021800 	.word	0x40021800
 8001294:	40021c00 	.word	0x40021c00
 8001298:	40022000 	.word	0x40022000
 800129c:	40022400 	.word	0x40022400
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <HAL_PWREx_EnableOverDrive+0x98>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a22      	ldr	r2, [pc, #136]	; (800133c <HAL_PWREx_EnableOverDrive+0x98>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_PWREx_EnableOverDrive+0x98>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d2:	f7ff fc0f 	bl	8000af4 <HAL_GetTick>
 80012d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012d8:	e009      	b.n	80012ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012da:	f7ff fc0b 	bl	8000af4 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e8:	d901      	bls.n	80012ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e022      	b.n	8001334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fa:	d1ee      	bne.n	80012da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001308:	f7ff fbf4 	bl	8000af4 <HAL_GetTick>
 800130c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800130e:	e009      	b.n	8001324 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001310:	f7ff fbf0 	bl	8000af4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800131e:	d901      	bls.n	8001324 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e007      	b.n	8001334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001330:	d1ee      	bne.n	8001310 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e29b      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8087 	beq.w	8001476 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001368:	4b96      	ldr	r3, [pc, #600]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b04      	cmp	r3, #4
 8001372:	d00c      	beq.n	800138e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001374:	4b93      	ldr	r3, [pc, #588]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d112      	bne.n	80013a6 <HAL_RCC_OscConfig+0x62>
 8001380:	4b90      	ldr	r3, [pc, #576]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800138c:	d10b      	bne.n	80013a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	4b8d      	ldr	r3, [pc, #564]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d06c      	beq.n	8001474 <HAL_RCC_OscConfig+0x130>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d168      	bne.n	8001474 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e275      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x7a>
 80013b0:	4b84      	ldr	r3, [pc, #528]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a83      	ldr	r2, [pc, #524]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e02e      	b.n	800141c <HAL_RCC_OscConfig+0xd8>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x9c>
 80013c6:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7e      	ldr	r2, [pc, #504]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b7c      	ldr	r3, [pc, #496]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7b      	ldr	r2, [pc, #492]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e01d      	b.n	800141c <HAL_RCC_OscConfig+0xd8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0xc0>
 80013ea:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a75      	ldr	r2, [pc, #468]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b73      	ldr	r3, [pc, #460]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a72      	ldr	r2, [pc, #456]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0xd8>
 8001404:	4b6f      	ldr	r3, [pc, #444]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6e      	ldr	r2, [pc, #440]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b6c      	ldr	r3, [pc, #432]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6b      	ldr	r2, [pc, #428]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fb66 	bl	8000af4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fb62 	bl	8000af4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e229      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0xe8>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fb52 	bl	8000af4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fb4e 	bl	8000af4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e215      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x110>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d069      	beq.n	8001556 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001482:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148e:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d11c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x190>
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x17a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e1e9      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	493d      	ldr	r1, [pc, #244]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	e040      	b.n	8001556 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d023      	beq.n	8001524 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb04 	bl	8000af4 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb00 	bl	8000af4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1c7      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4929      	ldr	r1, [pc, #164]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
 8001522:	e018      	b.n	8001556 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fae0 	bl	8000af4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fadc 	bl	8000af4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1a3      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d038      	beq.n	80015d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d019      	beq.n	800159e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 800156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fabd 	bl	8000af4 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fab9 	bl	8000af4 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e180      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 8001592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x23a>
 800159c:	e01a      	b.n	80015d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80015a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_RCC_OscConfig+0x280>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff faa3 	bl	8000af4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff fa9f 	bl	8000af4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d903      	bls.n	80015c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e166      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
 80015c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b92      	ldr	r3, [pc, #584]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80015ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ee      	bne.n	80015b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a4 	beq.w	800172a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e2:	4b8c      	ldr	r3, [pc, #560]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b89      	ldr	r3, [pc, #548]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a88      	ldr	r2, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b86      	ldr	r3, [pc, #536]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160a:	4b83      	ldr	r3, [pc, #524]	; (8001818 <HAL_RCC_OscConfig+0x4d4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001616:	4b80      	ldr	r3, [pc, #512]	; (8001818 <HAL_RCC_OscConfig+0x4d4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7f      	ldr	r2, [pc, #508]	; (8001818 <HAL_RCC_OscConfig+0x4d4>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fa67 	bl	8000af4 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff fa63 	bl	8000af4 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b64      	cmp	r3, #100	; 0x64
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e12a      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	4b76      	ldr	r3, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x4d4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x31a>
 8001650:	4b70      	ldr	r3, [pc, #448]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a6f      	ldr	r2, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
 800165c:	e02d      	b.n	80016ba <HAL_RCC_OscConfig+0x376>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x33c>
 8001666:	4b6b      	ldr	r3, [pc, #428]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a6a      	ldr	r2, [pc, #424]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
 8001672:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a67      	ldr	r2, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	e01c      	b.n	80016ba <HAL_RCC_OscConfig+0x376>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d10c      	bne.n	80016a2 <HAL_RCC_OscConfig+0x35e>
 8001688:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168c:	4a61      	ldr	r2, [pc, #388]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6713      	str	r3, [r2, #112]	; 0x70
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a5e      	ldr	r2, [pc, #376]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
 80016a0:	e00b      	b.n	80016ba <HAL_RCC_OscConfig+0x376>
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	4a5b      	ldr	r2, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6713      	str	r3, [r2, #112]	; 0x70
 80016ae:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a58      	ldr	r2, [pc, #352]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d015      	beq.n	80016ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c2:	f7ff fa17 	bl	8000af4 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff fa13 	bl	8000af4 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0d8      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0ee      	beq.n	80016ca <HAL_RCC_OscConfig+0x386>
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fa01 	bl	8000af4 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff f9fd 	bl	8000af4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0c2      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	4b41      	ldr	r3, [pc, #260]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ee      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d105      	bne.n	800172a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a3c      	ldr	r2, [pc, #240]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80ae 	beq.w	8001890 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d06d      	beq.n	800181c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d14b      	bne.n	80017e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 800174e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff f9ce 	bl	8000af4 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f9ca 	bl	8000af4 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e091      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	071b      	lsls	r3, r3, #28
 80017a6:	491b      	ldr	r1, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80017b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff f99c 	bl	8000af4 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff f998 	bl	8000af4 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e05f      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x47c>
 80017de:	e057      	b.n	8001890 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff f982 	bl	8000af4 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f97e 	bl	8000af4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e045      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_RCC_OscConfig+0x4d0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4b0>
 8001812:	e03d      	b.n	8001890 <HAL_RCC_OscConfig+0x54c>
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_RCC_OscConfig+0x558>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d030      	beq.n	800188c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d129      	bne.n	800188c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d122      	bne.n	800188c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001852:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001854:	4293      	cmp	r3, r2
 8001856:	d119      	bne.n	800188c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	085b      	lsrs	r3, r3, #1
 8001864:	3b01      	subs	r3, #1
 8001866:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d10f      	bne.n	800188c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0d0      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d910      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 020f 	bic.w	r2, r3, #15
 80018ce:	4965      	ldr	r1, [pc, #404]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0b8      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800190a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 800191e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001922:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	494d      	ldr	r1, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d040      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d115      	bne.n	8001982 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e07f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e073      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06b      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4936      	ldr	r1, [pc, #216]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001994:	f7ff f8ae 	bl	8000af4 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff f8aa 	bl	8000af4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e053      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d210      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 020f 	bic.w	r2, r3, #15
 80019da:	4922      	ldr	r1, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a32:	f000 f821 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	490a      	ldr	r1, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1cc>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1d0>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1d4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f80a 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	08003b54 	.word	0x08003b54
 8001a70:	20000060 	.word	0x20000060
 8001a74:	20000064 	.word	0x20000064

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a7c:	b090      	sub	sp, #64	; 0x40
 8001a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
 8001a84:	2300      	movs	r3, #0
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	f200 80a1 	bhi.w	8001be4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x34>
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aaa:	e09b      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ab0:	e09b      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab2:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ab6:	e098      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab8:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ac2:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d028      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae4:	fb03 f201 	mul.w	r2, r3, r1
 8001ae8:	2300      	movs	r3, #0
 8001aea:	fb00 f303 	mul.w	r3, r0, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	4a43      	ldr	r2, [pc, #268]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8001af2:	fba0 1202 	umull	r1, r2, r0, r2
 8001af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af8:	460a      	mov	r2, r1
 8001afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8001afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001afe:	4413      	add	r3, r2
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b04:	2200      	movs	r2, #0
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	61fa      	str	r2, [r7, #28]
 8001b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b12:	f7fe fb99 	bl	8000248 <__aeabi_uldivmod>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b1e:	e053      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	2200      	movs	r2, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	617a      	str	r2, [r7, #20]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b32:	f04f 0b00 	mov.w	fp, #0
 8001b36:	4652      	mov	r2, sl
 8001b38:	465b      	mov	r3, fp
 8001b3a:	f04f 0000 	mov.w	r0, #0
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	0159      	lsls	r1, r3, #5
 8001b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b48:	0150      	lsls	r0, r2, #5
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b52:	eb63 090b 	sbc.w	r9, r3, fp
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b6a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b6e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	00eb      	lsls	r3, r5, #3
 8001b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b80:	00e2      	lsls	r2, r4, #3
 8001b82:	4614      	mov	r4, r2
 8001b84:	461d      	mov	r5, r3
 8001b86:	eb14 030a 	adds.w	r3, r4, sl
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	eb45 030b 	adc.w	r3, r5, fp
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	60fa      	str	r2, [r7, #12]
 8001bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bbc:	f7fe fb44 	bl	8000248 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001be2:	e002      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3740      	adds	r7, #64	; 0x40
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	017d7840 	.word	0x017d7840

08001c04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000060 	.word	0x20000060

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a9b      	lsrs	r3, r3, #10
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08003b64 	.word	0x08003b64

08001c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c48:	f7ff ffdc 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0b5b      	lsrs	r3, r3, #13
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08003b64 	.word	0x08003b64

08001c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c94:	4b69      	ldr	r3, [pc, #420]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a68      	ldr	r2, [pc, #416]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c9e:	6093      	str	r3, [r2, #8]
 8001ca0:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca8:	4964      	ldr	r1, [pc, #400]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d017      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd4:	4959      	ldr	r1, [pc, #356]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ce4:	d101      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d017      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	494a      	ldr	r1, [pc, #296]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d20:	d101      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 808b 	beq.w	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a39      	ldr	r2, [pc, #228]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d74:	f7fe febe 	bl	8000af4 <HAL_GetTick>
 8001d78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7c:	f7fe feba 	bl	8000af4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e38f      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d035      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d02e      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	4a1a      	ldr	r2, [pc, #104]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001de0:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d114      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7fe fe82 	bl	8000af4 <HAL_GetTick>
 8001df0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7fe fe7e 	bl	8000af4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e351      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e22:	d111      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e32:	400b      	ands	r3, r1
 8001e34:	4901      	ldr	r1, [pc, #4]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000
 8001e44:	0ffffcff 	.word	0x0ffffcff
 8001e48:	4bac      	ldr	r3, [pc, #688]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4aab      	ldr	r2, [pc, #684]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e52:	6093      	str	r3, [r2, #8]
 8001e54:	4ba9      	ldr	r3, [pc, #676]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	49a6      	ldr	r1, [pc, #664]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e72:	4ba2      	ldr	r3, [pc, #648]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e78:	4aa0      	ldr	r2, [pc, #640]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e82:	4b9e      	ldr	r3, [pc, #632]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	499b      	ldr	r1, [pc, #620]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00a      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ea0:	4b96      	ldr	r3, [pc, #600]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eae:	4993      	ldr	r1, [pc, #588]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ec2:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ed0:	498a      	ldr	r1, [pc, #552]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ee4:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef2:	4982      	ldr	r1, [pc, #520]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f06:	4b7d      	ldr	r3, [pc, #500]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4979      	ldr	r1, [pc, #484]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f28:	4b74      	ldr	r3, [pc, #464]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4971      	ldr	r1, [pc, #452]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f4a:	4b6c      	ldr	r3, [pc, #432]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f50:	f023 020c 	bic.w	r2, r3, #12
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f58:	4968      	ldr	r1, [pc, #416]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f6c:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4960      	ldr	r1, [pc, #384]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9c:	4957      	ldr	r1, [pc, #348]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fb0:	4b52      	ldr	r3, [pc, #328]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	494f      	ldr	r1, [pc, #316]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	4946      	ldr	r1, [pc, #280]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	493e      	ldr	r1, [pc, #248]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002024:	4935      	ldr	r1, [pc, #212]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002046:	492d      	ldr	r1, [pc, #180]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d011      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002068:	4924      	ldr	r1, [pc, #144]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002078:	d101      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800207a:	2301      	movs	r3, #1
 800207c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a8:	4914      	ldr	r1, [pc, #80]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00b      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020cc:	490b      	ldr	r1, [pc, #44]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00f      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f0:	4902      	ldr	r1, [pc, #8]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020f8:	e002      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800210c:	4b8a      	ldr	r3, [pc, #552]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002112:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211c:	4986      	ldr	r1, [pc, #536]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002130:	4b81      	ldr	r3, [pc, #516]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002136:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002140:	497d      	ldr	r1, [pc, #500]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d006      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80d6 	beq.w	8002308 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800215c:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a75      	ldr	r2, [pc, #468]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002162:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002168:	f7fe fcc4 	bl	8000af4 <HAL_GetTick>
 800216c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002170:	f7fe fcc0 	bl	8000af4 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e195      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002182:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d021      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x572>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11d      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021a2:	4b65      	ldr	r3, [pc, #404]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021b0:	4b61      	ldr	r3, [pc, #388]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b6:	0e1b      	lsrs	r3, r3, #24
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	019a      	lsls	r2, r3, #6
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	071b      	lsls	r3, r3, #28
 80021d6:	4958      	ldr	r1, [pc, #352]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02e      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002208:	d129      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800220c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800221a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221e:	0f1b      	lsrs	r3, r3, #28
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	019a      	lsls	r2, r3, #6
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	061b      	lsls	r3, r3, #24
 8002238:	431a      	orrs	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	071b      	lsls	r3, r3, #28
 800223e:	493e      	ldr	r1, [pc, #248]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002246:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224c:	f023 021f 	bic.w	r2, r3, #31
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	3b01      	subs	r3, #1
 8002256:	4938      	ldr	r1, [pc, #224]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01d      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002270:	0e1b      	lsrs	r3, r3, #24
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227e:	0f1b      	lsrs	r3, r3, #28
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	019a      	lsls	r2, r3, #6
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	061b      	lsls	r3, r3, #24
 8002298:	431a      	orrs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	071b      	lsls	r3, r3, #28
 800229e:	4926      	ldr	r1, [pc, #152]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d011      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	019a      	lsls	r2, r3, #6
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	061b      	lsls	r3, r3, #24
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	071b      	lsls	r3, r3, #28
 80022ce:	491a      	ldr	r1, [pc, #104]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e2:	f7fe fc07 	bl	8000af4 <HAL_GetTick>
 80022e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022ea:	f7fe fc03 	bl	8000af4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	; 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0d8      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 80ce 	bne.w	80024ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800231c:	f7fe fbea 	bl	8000af4 <HAL_GetTick>
 8002320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002322:	e00b      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002324:	f7fe fbe6 	bl	8000af4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d904      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e0bb      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800233c:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002348:	d0ec      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002366:	2b00      	cmp	r3, #0
 8002368:	d02e      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12a      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002372:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002380:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	0f1b      	lsrs	r3, r3, #28
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	019a      	lsls	r2, r3, #6
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	071b      	lsls	r3, r3, #28
 80023a6:	4944      	ldr	r1, [pc, #272]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023ae:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	3b01      	subs	r3, #1
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	493d      	ldr	r1, [pc, #244]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d022      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023dc:	d11d      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	0e1b      	lsrs	r3, r3, #24
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023ec:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	0f1b      	lsrs	r3, r3, #28
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	019a      	lsls	r2, r3, #6
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	061b      	lsls	r3, r3, #24
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	071b      	lsls	r3, r3, #28
 8002412:	4929      	ldr	r1, [pc, #164]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d028      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	0e1b      	lsrs	r3, r3, #24
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	0c1b      	lsrs	r3, r3, #16
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	019a      	lsls	r2, r3, #6
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	431a      	orrs	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	071b      	lsls	r3, r3, #28
 800245a:	4917      	ldr	r1, [pc, #92]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	4911      	ldr	r1, [pc, #68]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002484:	f7fe fb36 	bl	8000af4 <HAL_GetTick>
 8002488:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800248c:	f7fe fb32 	bl	8000af4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e007      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024aa:	d1ef      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e040      	b.n	8002550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fa26 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fc06 	bl	8002d0c <UART_SetConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e022      	b.n	8002550 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fe5e 	bl	80031d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fee5 	bl	8003318 <UART_CheckIdleState>
 800254e:	4603      	mov	r3, r0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800256c:	2b20      	cmp	r3, #32
 800256e:	d171      	bne.n	8002654 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_UART_Transmit+0x24>
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e06a      	b.n	8002656 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2221      	movs	r2, #33	; 0x21
 800258c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800258e:	f7fe fab1 	bl	8000af4 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	88fa      	ldrh	r2, [r7, #6]
 8002598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ac:	d108      	bne.n	80025c0 <HAL_UART_Transmit+0x68>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e003      	b.n	80025c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025c8:	e02c      	b.n	8002624 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2180      	movs	r1, #128	; 0x80
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 feec 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e038      	b.n	8002656 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10b      	bne.n	8002602 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	3302      	adds	r3, #2
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e007      	b.n	8002612 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	3301      	adds	r3, #1
 8002610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1cc      	bne.n	80025ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2200      	movs	r2, #0
 8002638:	2140      	movs	r1, #64	; 0x40
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 feb9 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e005      	b.n	8002656 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b08a      	sub	sp, #40	; 0x28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002672:	2b20      	cmp	r3, #32
 8002674:	d132      	bne.n	80026dc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_UART_Receive_IT+0x24>
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02b      	b.n	80026de <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d018      	beq.n	80026cc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	e853 3f00 	ldrex	r3, [r3]
 80026a6:	613b      	str	r3, [r7, #16]
   return(result);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026bc:	69f9      	ldr	r1, [r7, #28]
 80026be:	6a3a      	ldr	r2, [r7, #32]
 80026c0:	e841 2300 	strex	r3, r2, [r1]
 80026c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e6      	bne.n	800269a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 ff34 	bl	8003540 <UART_Start_Receive_IT>
 80026d8:	4603      	mov	r3, r0
 80026da:	e000      	b.n	80026de <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80026dc:	2302      	movs	r3, #2
  }
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3728      	adds	r7, #40	; 0x28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0ba      	sub	sp, #232	; 0xe8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800270e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002712:	f640 030f 	movw	r3, #2063	; 0x80f
 8002716:	4013      	ands	r3, r2
 8002718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800271c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d115      	bne.n	8002750 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00f      	beq.n	8002750 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 82ac 	beq.w	8002c9e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
      }
      return;
 800274e:	e2a6      	b.n	8002c9e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8117 	beq.w	8002988 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800275a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <HAL_UART_IRQHandler+0x298>)
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 810a 	beq.w	8002988 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d011      	beq.n	80027a4 <HAL_UART_IRQHandler+0xbc>
 8002780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d011      	beq.n	80027d4 <HAL_UART_IRQHandler+0xec>
 80027b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2202      	movs	r2, #2
 80027c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d011      	beq.n	8002804 <HAL_UART_IRQHandler+0x11c>
 80027e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2204      	movs	r2, #4
 80027f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fa:	f043 0202 	orr.w	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d017      	beq.n	8002840 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800281c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002820:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2208      	movs	r2, #8
 800282e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002836:	f043 0208 	orr.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <HAL_UART_IRQHandler+0x18a>
 800284c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00c      	beq.n	8002872 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8212 	beq.w	8002ca2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800287e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800288a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d005      	beq.n	80028ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d04f      	beq.n	800296a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fefe 	bl	80036cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d141      	bne.n	8002962 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3308      	adds	r3, #8
 80028e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3308      	adds	r3, #8
 8002906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800290a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800290e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1d9      	bne.n	80028de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	2b00      	cmp	r3, #0
 8002930:	d013      	beq.n	800295a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_UART_IRQHandler+0x29c>)
 8002938:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fae2 	bl	8000f08 <HAL_DMA_Abort_IT>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d017      	beq.n	800297a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002954:	4610      	mov	r0, r2
 8002956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002958:	e00f      	b.n	800297a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f9b6 	bl	8002ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002960:	e00b      	b.n	800297a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f9b2 	bl	8002ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002968:	e007      	b.n	800297a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f9ae 	bl	8002ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002978:	e193      	b.n	8002ca2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297a:	bf00      	nop
    return;
 800297c:	e191      	b.n	8002ca2 <HAL_UART_IRQHandler+0x5ba>
 800297e:	bf00      	nop
 8002980:	04000120 	.word	0x04000120
 8002984:	08003795 	.word	0x08003795

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298c:	2b01      	cmp	r3, #1
 800298e:	f040 814c 	bne.w	8002c2a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8145 	beq.w	8002c2a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 813e 	beq.w	8002c2a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2210      	movs	r2, #16
 80029b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	f040 80b6 	bne.w	8002b32 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8165 	beq.w	8002ca6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029e6:	429a      	cmp	r2, r3
 80029e8:	f080 815d 	bcs.w	8002ca6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a00:	f000 8086 	beq.w	8002b10 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1da      	bne.n	8002a04 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3308      	adds	r3, #8
 8002a54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a58:	e853 3f00 	ldrex	r3, [r3]
 8002a5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e1      	bne.n	8002a4e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3308      	adds	r3, #8
 8002a90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ab6:	e841 2300 	strex	r3, r2, [r1]
 8002aba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e3      	bne.n	8002a8a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae0:	f023 0310 	bic.w	r3, r3, #16
 8002ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002af2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002af4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e4      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f98c 	bl	8000e28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8d8 	bl	8002ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b30:	e0b9      	b.n	8002ca6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80ab 	beq.w	8002caa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a6 	beq.w	8002caa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44
 8002b82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b88:	e841 2300 	strex	r3, r2, [r1]
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e4      	bne.n	8002b5e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3308      	adds	r3, #8
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	e853 3f00 	ldrex	r3, [r3]
 8002ba2:	623b      	str	r3, [r7, #32]
   return(result);
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bb8:	633a      	str	r2, [r7, #48]	; 0x30
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc0:	e841 2300 	strex	r3, r2, [r1]
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e3      	bne.n	8002b94 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f023 0310 	bic.w	r3, r3, #16
 8002bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	69b9      	ldr	r1, [r7, #24]
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e4      	bne.n	8002be0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f85c 	bl	8002ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c28:	e03f      	b.n	8002caa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00e      	beq.n	8002c54 <HAL_UART_IRQHandler+0x56c>
 8002c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f853 	bl	8002cf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c52:	e02d      	b.n	8002cb0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01c      	beq.n	8002cae <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
    }
    return;
 8002c7c:	e017      	b.n	8002cae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d012      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x5c8>
 8002c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fd92 	bl	80037c0 <UART_EndTransmit_IT>
    return;
 8002c9c:	e008      	b.n	8002cb0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002c9e:	bf00      	nop
 8002ca0:	e006      	b.n	8002cb0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002ca2:	bf00      	nop
 8002ca4:	e004      	b.n	8002cb0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ca6:	bf00      	nop
 8002ca8:	e002      	b.n	8002cb0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002caa:	bf00      	nop
 8002cac:	e000      	b.n	8002cb0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002cae:	bf00      	nop
  }

}
 8002cb0:	37e8      	adds	r7, #232	; 0xe8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop

08002cb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4ba6      	ldr	r3, [pc, #664]	; (8002fd0 <UART_SetConfig+0x2c4>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	6979      	ldr	r1, [r7, #20]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a94      	ldr	r2, [pc, #592]	; (8002fd4 <UART_SetConfig+0x2c8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d120      	bne.n	8002dca <UART_SetConfig+0xbe>
 8002d88:	4b93      	ldr	r3, [pc, #588]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d816      	bhi.n	8002dc4 <UART_SetConfig+0xb8>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <UART_SetConfig+0x90>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db9 	.word	0x08002db9
 8002da4:	08002db3 	.word	0x08002db3
 8002da8:	08002dbf 	.word	0x08002dbf
 8002dac:	2301      	movs	r3, #1
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e150      	b.n	8003054 <UART_SetConfig+0x348>
 8002db2:	2302      	movs	r3, #2
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e14d      	b.n	8003054 <UART_SetConfig+0x348>
 8002db8:	2304      	movs	r3, #4
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e14a      	b.n	8003054 <UART_SetConfig+0x348>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e147      	b.n	8003054 <UART_SetConfig+0x348>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e144      	b.n	8003054 <UART_SetConfig+0x348>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a83      	ldr	r2, [pc, #524]	; (8002fdc <UART_SetConfig+0x2d0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d132      	bne.n	8002e3a <UART_SetConfig+0x12e>
 8002dd4:	4b80      	ldr	r3, [pc, #512]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d828      	bhi.n	8002e34 <UART_SetConfig+0x128>
 8002de2:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <UART_SetConfig+0xdc>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002e35 	.word	0x08002e35
 8002df0:	08002e35 	.word	0x08002e35
 8002df4:	08002e35 	.word	0x08002e35
 8002df8:	08002e29 	.word	0x08002e29
 8002dfc:	08002e35 	.word	0x08002e35
 8002e00:	08002e35 	.word	0x08002e35
 8002e04:	08002e35 	.word	0x08002e35
 8002e08:	08002e23 	.word	0x08002e23
 8002e0c:	08002e35 	.word	0x08002e35
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e35 	.word	0x08002e35
 8002e18:	08002e2f 	.word	0x08002e2f
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e118      	b.n	8003054 <UART_SetConfig+0x348>
 8002e22:	2302      	movs	r3, #2
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e115      	b.n	8003054 <UART_SetConfig+0x348>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e112      	b.n	8003054 <UART_SetConfig+0x348>
 8002e2e:	2308      	movs	r3, #8
 8002e30:	77fb      	strb	r3, [r7, #31]
 8002e32:	e10f      	b.n	8003054 <UART_SetConfig+0x348>
 8002e34:	2310      	movs	r3, #16
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	e10c      	b.n	8003054 <UART_SetConfig+0x348>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a68      	ldr	r2, [pc, #416]	; (8002fe0 <UART_SetConfig+0x2d4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d120      	bne.n	8002e86 <UART_SetConfig+0x17a>
 8002e44:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e4e:	2b30      	cmp	r3, #48	; 0x30
 8002e50:	d013      	beq.n	8002e7a <UART_SetConfig+0x16e>
 8002e52:	2b30      	cmp	r3, #48	; 0x30
 8002e54:	d814      	bhi.n	8002e80 <UART_SetConfig+0x174>
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d009      	beq.n	8002e6e <UART_SetConfig+0x162>
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d810      	bhi.n	8002e80 <UART_SetConfig+0x174>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <UART_SetConfig+0x15c>
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d006      	beq.n	8002e74 <UART_SetConfig+0x168>
 8002e66:	e00b      	b.n	8002e80 <UART_SetConfig+0x174>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	77fb      	strb	r3, [r7, #31]
 8002e6c:	e0f2      	b.n	8003054 <UART_SetConfig+0x348>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	77fb      	strb	r3, [r7, #31]
 8002e72:	e0ef      	b.n	8003054 <UART_SetConfig+0x348>
 8002e74:	2304      	movs	r3, #4
 8002e76:	77fb      	strb	r3, [r7, #31]
 8002e78:	e0ec      	b.n	8003054 <UART_SetConfig+0x348>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	77fb      	strb	r3, [r7, #31]
 8002e7e:	e0e9      	b.n	8003054 <UART_SetConfig+0x348>
 8002e80:	2310      	movs	r3, #16
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e0e6      	b.n	8003054 <UART_SetConfig+0x348>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <UART_SetConfig+0x2d8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d120      	bne.n	8002ed2 <UART_SetConfig+0x1c6>
 8002e90:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e9c:	d013      	beq.n	8002ec6 <UART_SetConfig+0x1ba>
 8002e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002ea0:	d814      	bhi.n	8002ecc <UART_SetConfig+0x1c0>
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d009      	beq.n	8002eba <UART_SetConfig+0x1ae>
 8002ea6:	2b80      	cmp	r3, #128	; 0x80
 8002ea8:	d810      	bhi.n	8002ecc <UART_SetConfig+0x1c0>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <UART_SetConfig+0x1a8>
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d006      	beq.n	8002ec0 <UART_SetConfig+0x1b4>
 8002eb2:	e00b      	b.n	8002ecc <UART_SetConfig+0x1c0>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e0cc      	b.n	8003054 <UART_SetConfig+0x348>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	77fb      	strb	r3, [r7, #31]
 8002ebe:	e0c9      	b.n	8003054 <UART_SetConfig+0x348>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e0c6      	b.n	8003054 <UART_SetConfig+0x348>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e0c3      	b.n	8003054 <UART_SetConfig+0x348>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e0c0      	b.n	8003054 <UART_SetConfig+0x348>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a44      	ldr	r2, [pc, #272]	; (8002fe8 <UART_SetConfig+0x2dc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d125      	bne.n	8002f28 <UART_SetConfig+0x21c>
 8002edc:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eea:	d017      	beq.n	8002f1c <UART_SetConfig+0x210>
 8002eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef0:	d817      	bhi.n	8002f22 <UART_SetConfig+0x216>
 8002ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef6:	d00b      	beq.n	8002f10 <UART_SetConfig+0x204>
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efc:	d811      	bhi.n	8002f22 <UART_SetConfig+0x216>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <UART_SetConfig+0x1fe>
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	d006      	beq.n	8002f16 <UART_SetConfig+0x20a>
 8002f08:	e00b      	b.n	8002f22 <UART_SetConfig+0x216>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	77fb      	strb	r3, [r7, #31]
 8002f0e:	e0a1      	b.n	8003054 <UART_SetConfig+0x348>
 8002f10:	2302      	movs	r3, #2
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	e09e      	b.n	8003054 <UART_SetConfig+0x348>
 8002f16:	2304      	movs	r3, #4
 8002f18:	77fb      	strb	r3, [r7, #31]
 8002f1a:	e09b      	b.n	8003054 <UART_SetConfig+0x348>
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e098      	b.n	8003054 <UART_SetConfig+0x348>
 8002f22:	2310      	movs	r3, #16
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e095      	b.n	8003054 <UART_SetConfig+0x348>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <UART_SetConfig+0x2e0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d125      	bne.n	8002f7e <UART_SetConfig+0x272>
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f40:	d017      	beq.n	8002f72 <UART_SetConfig+0x266>
 8002f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f46:	d817      	bhi.n	8002f78 <UART_SetConfig+0x26c>
 8002f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4c:	d00b      	beq.n	8002f66 <UART_SetConfig+0x25a>
 8002f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f52:	d811      	bhi.n	8002f78 <UART_SetConfig+0x26c>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <UART_SetConfig+0x254>
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x260>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x26c>
 8002f60:	2301      	movs	r3, #1
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e076      	b.n	8003054 <UART_SetConfig+0x348>
 8002f66:	2302      	movs	r3, #2
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e073      	b.n	8003054 <UART_SetConfig+0x348>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e070      	b.n	8003054 <UART_SetConfig+0x348>
 8002f72:	2308      	movs	r3, #8
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e06d      	b.n	8003054 <UART_SetConfig+0x348>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e06a      	b.n	8003054 <UART_SetConfig+0x348>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <UART_SetConfig+0x2e4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d138      	bne.n	8002ffa <UART_SetConfig+0x2ee>
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x2bc>
 8002f98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f9c:	d82a      	bhi.n	8002ff4 <UART_SetConfig+0x2e8>
 8002f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x2b0>
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d824      	bhi.n	8002ff4 <UART_SetConfig+0x2e8>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x2aa>
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x2b6>
 8002fb4:	e01e      	b.n	8002ff4 <UART_SetConfig+0x2e8>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e04b      	b.n	8003054 <UART_SetConfig+0x348>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e048      	b.n	8003054 <UART_SetConfig+0x348>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e045      	b.n	8003054 <UART_SetConfig+0x348>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e042      	b.n	8003054 <UART_SetConfig+0x348>
 8002fce:	bf00      	nop
 8002fd0:	efff69f3 	.word	0xefff69f3
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40004400 	.word	0x40004400
 8002fe0:	40004800 	.word	0x40004800
 8002fe4:	40004c00 	.word	0x40004c00
 8002fe8:	40005000 	.word	0x40005000
 8002fec:	40011400 	.word	0x40011400
 8002ff0:	40007800 	.word	0x40007800
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e02c      	b.n	8003054 <UART_SetConfig+0x348>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a72      	ldr	r2, [pc, #456]	; (80031c8 <UART_SetConfig+0x4bc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d125      	bne.n	8003050 <UART_SetConfig+0x344>
 8003004:	4b71      	ldr	r3, [pc, #452]	; (80031cc <UART_SetConfig+0x4c0>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800300e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003012:	d017      	beq.n	8003044 <UART_SetConfig+0x338>
 8003014:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003018:	d817      	bhi.n	800304a <UART_SetConfig+0x33e>
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301e:	d00b      	beq.n	8003038 <UART_SetConfig+0x32c>
 8003020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003024:	d811      	bhi.n	800304a <UART_SetConfig+0x33e>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <UART_SetConfig+0x326>
 800302a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302e:	d006      	beq.n	800303e <UART_SetConfig+0x332>
 8003030:	e00b      	b.n	800304a <UART_SetConfig+0x33e>
 8003032:	2300      	movs	r3, #0
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e00d      	b.n	8003054 <UART_SetConfig+0x348>
 8003038:	2302      	movs	r3, #2
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e00a      	b.n	8003054 <UART_SetConfig+0x348>
 800303e:	2304      	movs	r3, #4
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e007      	b.n	8003054 <UART_SetConfig+0x348>
 8003044:	2308      	movs	r3, #8
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e004      	b.n	8003054 <UART_SetConfig+0x348>
 800304a:	2310      	movs	r3, #16
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e001      	b.n	8003054 <UART_SetConfig+0x348>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305c:	d15b      	bne.n	8003116 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800305e:	7ffb      	ldrb	r3, [r7, #31]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d828      	bhi.n	80030b6 <UART_SetConfig+0x3aa>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <UART_SetConfig+0x360>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	08003091 	.word	0x08003091
 8003070:	08003099 	.word	0x08003099
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030b7 	.word	0x080030b7
 800307c:	080030a7 	.word	0x080030a7
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030b7 	.word	0x080030b7
 8003088:	080030b7 	.word	0x080030b7
 800308c:	080030af 	.word	0x080030af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003090:	f7fe fdc4 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8003094:	61b8      	str	r0, [r7, #24]
        break;
 8003096:	e013      	b.n	80030c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7fe fdd4 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 800309c:	61b8      	str	r0, [r7, #24]
        break;
 800309e:	e00f      	b.n	80030c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a0:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <UART_SetConfig+0x4c4>)
 80030a2:	61bb      	str	r3, [r7, #24]
        break;
 80030a4:	e00c      	b.n	80030c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a6:	f7fe fce7 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 80030aa:	61b8      	str	r0, [r7, #24]
        break;
 80030ac:	e008      	b.n	80030c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b2:	61bb      	str	r3, [r7, #24]
        break;
 80030b4:	e004      	b.n	80030c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	77bb      	strb	r3, [r7, #30]
        break;
 80030be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d074      	beq.n	80031b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	005a      	lsls	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	441a      	add	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	d916      	bls.n	8003110 <UART_SetConfig+0x404>
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e8:	d212      	bcs.n	8003110 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f023 030f 	bic.w	r3, r3, #15
 80030f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	b29a      	uxth	r2, r3
 8003100:	89fb      	ldrh	r3, [r7, #14]
 8003102:	4313      	orrs	r3, r2
 8003104:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	89fa      	ldrh	r2, [r7, #14]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	e04f      	b.n	80031b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	77bb      	strb	r3, [r7, #30]
 8003114:	e04c      	b.n	80031b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003116:	7ffb      	ldrb	r3, [r7, #31]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d828      	bhi.n	800316e <UART_SetConfig+0x462>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <UART_SetConfig+0x418>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003149 	.word	0x08003149
 8003128:	08003151 	.word	0x08003151
 800312c:	08003159 	.word	0x08003159
 8003130:	0800316f 	.word	0x0800316f
 8003134:	0800315f 	.word	0x0800315f
 8003138:	0800316f 	.word	0x0800316f
 800313c:	0800316f 	.word	0x0800316f
 8003140:	0800316f 	.word	0x0800316f
 8003144:	08003167 	.word	0x08003167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003148:	f7fe fd68 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 800314c:	61b8      	str	r0, [r7, #24]
        break;
 800314e:	e013      	b.n	8003178 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003150:	f7fe fd78 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8003154:	61b8      	str	r0, [r7, #24]
        break;
 8003156:	e00f      	b.n	8003178 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <UART_SetConfig+0x4c4>)
 800315a:	61bb      	str	r3, [r7, #24]
        break;
 800315c:	e00c      	b.n	8003178 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315e:	f7fe fc8b 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8003162:	61b8      	str	r0, [r7, #24]
        break;
 8003164:	e008      	b.n	8003178 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800316a:	61bb      	str	r3, [r7, #24]
        break;
 800316c:	e004      	b.n	8003178 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	77bb      	strb	r3, [r7, #30]
        break;
 8003176:	bf00      	nop
    }

    if (pclk != 0U)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d018      	beq.n	80031b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	085a      	lsrs	r2, r3, #1
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	441a      	add	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d909      	bls.n	80031ac <UART_SetConfig+0x4a0>
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319e:	d205      	bcs.n	80031ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	e001      	b.n	80031b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40007c00 	.word	0x40007c00
 80031cc:	40023800 	.word	0x40023800
 80031d0:	00f42400 	.word	0x00f42400

080031d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01a      	beq.n	80032ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d2:	d10a      	bne.n	80032ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003328:	f7fd fbe4 	bl	8000af4 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d10e      	bne.n	800335a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f831 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e027      	b.n	80033aa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d10e      	bne.n	8003386 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f81b 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e011      	b.n	80033aa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b09c      	sub	sp, #112	; 0x70
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	4613      	mov	r3, r2
 80033c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c2:	e0a7      	b.n	8003514 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	f000 80a3 	beq.w	8003514 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fd fb91 	bl	8000af4 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80033de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d13f      	bne.n	8003464 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033f8:	667b      	str	r3, [r7, #100]	; 0x64
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003404:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e6      	bne.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	663b      	str	r3, [r7, #96]	; 0x60
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3308      	adds	r3, #8
 8003434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003436:	64ba      	str	r2, [r7, #72]	; 0x48
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800343c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e5      	bne.n	8003416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e068      	b.n	8003536 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d050      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003480:	d148      	bne.n	8003514 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800348a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e6      	bne.n	800348c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3308      	adds	r3, #8
 80034c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	613b      	str	r3, [r7, #16]
   return(result);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034de:	623a      	str	r2, [r7, #32]
 80034e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	69f9      	ldr	r1, [r7, #28]
 80034e4:	6a3a      	ldr	r2, [r7, #32]
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e5      	bne.n	80034be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e010      	b.n	8003536 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	429a      	cmp	r2, r3
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	429a      	cmp	r2, r3
 8003530:	f43f af48 	beq.w	80033c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3770      	adds	r7, #112	; 0x70
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003540:	b480      	push	{r7}
 8003542:	b097      	sub	sp, #92	; 0x5c
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d10e      	bne.n	8003592 <UART_Start_Receive_IT+0x52>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <UART_Start_Receive_IT+0x48>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003582:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003586:	e02d      	b.n	80035e4 <UART_Start_Receive_IT+0xa4>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003590:	e028      	b.n	80035e4 <UART_Start_Receive_IT+0xa4>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <UART_Start_Receive_IT+0x76>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <UART_Start_Receive_IT+0x6c>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035aa:	e01b      	b.n	80035e4 <UART_Start_Receive_IT+0xa4>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	227f      	movs	r2, #127	; 0x7f
 80035b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035b4:	e016      	b.n	80035e4 <UART_Start_Receive_IT+0xa4>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035be:	d10d      	bne.n	80035dc <UART_Start_Receive_IT+0x9c>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <UART_Start_Receive_IT+0x92>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	227f      	movs	r2, #127	; 0x7f
 80035cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035d0:	e008      	b.n	80035e4 <UART_Start_Receive_IT+0xa4>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	223f      	movs	r2, #63	; 0x3f
 80035d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035da:	e003      	b.n	80035e4 <UART_Start_Receive_IT+0xa4>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2222      	movs	r2, #34	; 0x22
 80035f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3308      	adds	r3, #8
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	657b      	str	r3, [r7, #84]	; 0x54
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003614:	64ba      	str	r2, [r7, #72]	; 0x48
 8003616:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800361a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e5      	bne.n	80035f4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003630:	d107      	bne.n	8003642 <UART_Start_Receive_IT+0x102>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <UART_Start_Receive_IT+0x184>)
 800363e:	669a      	str	r2, [r3, #104]	; 0x68
 8003640:	e002      	b.n	8003648 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <UART_Start_Receive_IT+0x188>)
 8003646:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d019      	beq.n	8003684 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
 8003670:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e6      	bne.n	8003650 <UART_Start_Receive_IT+0x110>
 8003682:	e018      	b.n	80036b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	613b      	str	r3, [r7, #16]
   return(result);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f043 0320 	orr.w	r3, r3, #32
 8003698:	653b      	str	r3, [r7, #80]	; 0x50
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	69f9      	ldr	r1, [r7, #28]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e6      	bne.n	8003684 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	375c      	adds	r7, #92	; 0x5c
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	0800397b 	.word	0x0800397b
 80036c8:	08003815 	.word	0x08003815

080036cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b095      	sub	sp, #84	; 0x54
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f2:	643b      	str	r3, [r7, #64]	; 0x40
 80036f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e6      	bne.n	80036d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3308      	adds	r3, #8
 800370c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	61fb      	str	r3, [r7, #28]
   return(result);
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	64bb      	str	r3, [r7, #72]	; 0x48
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3308      	adds	r3, #8
 8003724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	2b01      	cmp	r3, #1
 8003740:	d118      	bne.n	8003774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f023 0310 	bic.w	r3, r3, #16
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	613b      	str	r3, [r7, #16]
   return(result);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e6      	bne.n	8003742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003788:	bf00      	nop
 800378a:	3754      	adds	r7, #84	; 0x54
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff fa8a 	bl	8002ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6979      	ldr	r1, [r7, #20]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	613b      	str	r3, [r7, #16]
   return(result);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e6      	bne.n	80037c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fa56 	bl	8002cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380c:	bf00      	nop
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b096      	sub	sp, #88	; 0x58
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003822:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800382c:	2b22      	cmp	r3, #34	; 0x22
 800382e:	f040 8098 	bne.w	8003962 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800383c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003840:	b2d9      	uxtb	r1, r3
 8003842:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	400a      	ands	r2, r1
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d17b      	bne.n	8003972 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800388e:	653b      	str	r3, [r7, #80]	; 0x50
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
 800389a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800389e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e6      	bne.n	800387a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3308      	adds	r3, #8
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	623b      	str	r3, [r7, #32]
   return(result);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038cc:	633a      	str	r2, [r7, #48]	; 0x30
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d12e      	bne.n	800395a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0310 	bic.w	r3, r3, #16
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	69b9      	ldr	r1, [r7, #24]
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	617b      	str	r3, [r7, #20]
   return(result);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e6      	bne.n	8003902 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b10      	cmp	r3, #16
 8003940:	d103      	bne.n	800394a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2210      	movs	r2, #16
 8003948:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff f9c4 	bl	8002ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003958:	e00b      	b.n	8003972 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fc fe9c 	bl	8000698 <HAL_UART_RxCpltCallback>
}
 8003960:	e007      	b.n	8003972 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0208 	orr.w	r2, r2, #8
 8003970:	619a      	str	r2, [r3, #24]
}
 8003972:	bf00      	nop
 8003974:	3758      	adds	r7, #88	; 0x58
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b096      	sub	sp, #88	; 0x58
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003988:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003992:	2b22      	cmp	r3, #34	; 0x22
 8003994:	f040 8098 	bne.w	8003ac8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80039a8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80039ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d17b      	bne.n	8003ad8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003a00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e6      	bne.n	80039e0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e5      	bne.n	8003a12 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d12e      	bne.n	8003ac0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f023 0310 	bic.w	r3, r3, #16
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6979      	ldr	r1, [r7, #20]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	613b      	str	r3, [r7, #16]
   return(result);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e6      	bne.n	8003a68 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d103      	bne.n	8003ab0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff f911 	bl	8002ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003abe:	e00b      	b.n	8003ad8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fc fde9 	bl	8000698 <HAL_UART_RxCpltCallback>
}
 8003ac6:	e007      	b.n	8003ad8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0208 	orr.w	r2, r2, #8
 8003ad6:	619a      	str	r2, [r3, #24]
}
 8003ad8:	bf00      	nop
 8003ada:	3758      	adds	r7, #88	; 0x58
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <memset>:
 8003ae0:	4402      	add	r2, r0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d100      	bne.n	8003aea <memset+0xa>
 8003ae8:	4770      	bx	lr
 8003aea:	f803 1b01 	strb.w	r1, [r3], #1
 8003aee:	e7f9      	b.n	8003ae4 <memset+0x4>

08003af0 <__libc_init_array>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	4d0d      	ldr	r5, [pc, #52]	; (8003b28 <__libc_init_array+0x38>)
 8003af4:	4c0d      	ldr	r4, [pc, #52]	; (8003b2c <__libc_init_array+0x3c>)
 8003af6:	1b64      	subs	r4, r4, r5
 8003af8:	10a4      	asrs	r4, r4, #2
 8003afa:	2600      	movs	r6, #0
 8003afc:	42a6      	cmp	r6, r4
 8003afe:	d109      	bne.n	8003b14 <__libc_init_array+0x24>
 8003b00:	4d0b      	ldr	r5, [pc, #44]	; (8003b30 <__libc_init_array+0x40>)
 8003b02:	4c0c      	ldr	r4, [pc, #48]	; (8003b34 <__libc_init_array+0x44>)
 8003b04:	f000 f818 	bl	8003b38 <_init>
 8003b08:	1b64      	subs	r4, r4, r5
 8003b0a:	10a4      	asrs	r4, r4, #2
 8003b0c:	2600      	movs	r6, #0
 8003b0e:	42a6      	cmp	r6, r4
 8003b10:	d105      	bne.n	8003b1e <__libc_init_array+0x2e>
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b18:	4798      	blx	r3
 8003b1a:	3601      	adds	r6, #1
 8003b1c:	e7ee      	b.n	8003afc <__libc_init_array+0xc>
 8003b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b22:	4798      	blx	r3
 8003b24:	3601      	adds	r6, #1
 8003b26:	e7f2      	b.n	8003b0e <__libc_init_array+0x1e>
 8003b28:	08003b74 	.word	0x08003b74
 8003b2c:	08003b74 	.word	0x08003b74
 8003b30:	08003b74 	.word	0x08003b74
 8003b34:	08003b78 	.word	0x08003b78

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
