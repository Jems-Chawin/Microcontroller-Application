
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c6c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e7c  08004e7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e84  08004e84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08004e98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004e98  00020114  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100d0  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a7  00000000  00000000  0003014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  000324f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9e  00000000  00000000  00033290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275e8  00000000  00000000  00033d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f4a  00000000  00000000  0005b316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f793a  00000000  00000000  0006d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000383c  00000000  00000000  00164b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001683d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004e4c 	.word	0x08004e4c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004e4c 	.word	0x08004e4c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_GPIO_Init+0x8c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <MX_GPIO_Init+0x8c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_GPIO_Init+0x8c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_GPIO_Init+0x8c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <MX_GPIO_Init+0x8c>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_GPIO_Init+0x8c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_GPIO_Init+0x8c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <MX_GPIO_Init+0x8c>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_GPIO_Init+0x8c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	480b      	ldr	r0, [pc, #44]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000598:	f001 f818 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800059c:	2301      	movs	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	4619      	mov	r1, r3
 80005b2:	4804      	ldr	r0, [pc, #16]	; (80005c4 <MX_GPIO_Init+0x90>)
 80005b4:	f000 fe5e 	bl	8001274 <HAL_GPIO_Init>

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40020400 	.word	0x40020400

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fbd5 	bl	8000d7a <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d0:	f000 f978 	bl	80008c4 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f872 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f7ff ffac 	bl	8000534 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005dc:	f000 fa0e 	bl	80009fc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 fb0a 	bl	8000bf8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005e4:	2100      	movs	r1, #0
 80005e6:	482a      	ldr	r0, [pc, #168]	; (8000690 <main+0xc8>)
 80005e8:	f002 f9ce 	bl	8002988 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005ec:	2108      	movs	r1, #8
 80005ee:	4828      	ldr	r0, [pc, #160]	; (8000690 <main+0xc8>)
 80005f0:	f002 f9ca 	bl	8002988 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80005f4:	210c      	movs	r1, #12
 80005f6:	4826      	ldr	r0, [pc, #152]	; (8000690 <main+0xc8>)
 80005f8:	f002 f9c6 	bl	8002988 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3,(uint8_t*)&ch,1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	4925      	ldr	r1, [pc, #148]	; (8000694 <main+0xcc>)
 8000600:	4825      	ldr	r0, [pc, #148]	; (8000698 <main+0xd0>)
 8000602:	f003 f9b6 	bl	8003972 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  htim2.Instance -> CCR1 = (10-1) * dutyCycleR;
 8000606:	4b25      	ldr	r3, [pc, #148]	; (800069c <main+0xd4>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <main+0xc8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800061c:	ee17 2a90 	vmov	r2, s15
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
	  htim2.Instance -> CCR3 = (10-1) * dutyCycleG;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <main+0xd8>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800062c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <main+0xc8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000638:	ee17 2a90 	vmov	r2, s15
 800063c:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim2.Instance -> CCR4 = (10-1) * dutyCycleB;
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <main+0xdc>)
 8000640:	edd3 7a00 	vldr	s15, [r3]
 8000644:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <main+0xc8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000654:	ee17 2a90 	vmov	r2, s15
 8000658:	641a      	str	r2, [r3, #64]	; 0x40

//	  HAL_Delay(100);
//	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	  pwmR = (GPIOA->IDR & GPIO_PIN_3) >> 3;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <main+0xe0>)
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0xe4>)
 800066a:	701a      	strb	r2, [r3, #0]
	  pwmG = (GPIOB->IDR & GPIO_PIN_10) >> 10;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <main+0xe8>)
 800066e:	691b      	ldr	r3, [r3, #16]
 8000670:	0a9b      	lsrs	r3, r3, #10
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <main+0xec>)
 800067c:	701a      	strb	r2, [r3, #0]
	  pwmB = (GPIOA->IDR & GPIO_PIN_0) >> 0;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <main+0xe0>)
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <main+0xf0>)
 800068c:	701a      	strb	r2, [r3, #0]
	  htim2.Instance -> CCR1 = (10-1) * dutyCycleR;
 800068e:	e7ba      	b.n	8000606 <main+0x3e>
 8000690:	2000003c 	.word	0x2000003c
 8000694:	20000038 	.word	0x20000038
 8000698:	20000088 	.word	0x20000088
 800069c:	2000002c 	.word	0x2000002c
 80006a0:	20000030 	.word	0x20000030
 80006a4:	20000034 	.word	0x20000034
 80006a8:	40020000 	.word	0x40020000
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40020400 	.word	0x40020400
 80006b4:	20000029 	.word	0x20000029
 80006b8:	2000002a 	.word	0x2000002a

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fb92 	bl	8004df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemClock_Config+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <SystemClock_Config+0xd8>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000728:	23d8      	movs	r3, #216	; 0xd8
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f000 ffaf 	bl	80016a0 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000748:	f000 f8e8 	bl	800091c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f000 ff58 	bl	8001600 <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000756:	f000 f8e1 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2107      	movs	r1, #7
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fa3f 	bl	8001bfc <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000784:	f000 f8ca 	bl	800091c <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if(huart==&huart3){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a43      	ldr	r2, [pc, #268]	; (80008b0 <HAL_UART_RxCpltCallback+0x118>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d178      	bne.n	800089a <HAL_UART_RxCpltCallback+0x102>
		HAL_UART_Receive_IT(&huart3,(uint8_t*)&ch,1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	4942      	ldr	r1, [pc, #264]	; (80008b4 <HAL_UART_RxCpltCallback+0x11c>)
 80007ac:	4840      	ldr	r0, [pc, #256]	; (80008b0 <HAL_UART_RxCpltCallback+0x118>)
 80007ae:	f003 f8e0 	bl	8003972 <HAL_UART_Receive_IT>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007b2:	bf00      	nop
 80007b4:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <HAL_UART_RxCpltCallback+0x118>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007be:	2b40      	cmp	r3, #64	; 0x40
 80007c0:	d1f8      	bne.n	80007b4 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	2201      	movs	r2, #1
 80007c8:	493a      	ldr	r1, [pc, #232]	; (80008b4 <HAL_UART_RxCpltCallback+0x11c>)
 80007ca:	4839      	ldr	r0, [pc, #228]	; (80008b0 <HAL_UART_RxCpltCallback+0x118>)
 80007cc:	f003 f84e 	bl	800386c <HAL_UART_Transmit>
		if(ch=='r'){
 80007d0:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <HAL_UART_RxCpltCallback+0x11c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b72      	cmp	r3, #114	; 0x72
 80007d6:	d11d      	bne.n	8000814 <HAL_UART_RxCpltCallback+0x7c>
			dutyCycleR += 0.2;
 80007d8:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <HAL_UART_RxCpltCallback+0x120>)
 80007da:	edd3 7a00 	vldr	s15, [r3]
 80007de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007e2:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80008a8 <HAL_UART_RxCpltCallback+0x110>
 80007e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <HAL_UART_RxCpltCallback+0x120>)
 80007f0:	edc3 7a00 	vstr	s15, [r3]
			if(dutyCycleR > 1){
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <HAL_UART_RxCpltCallback+0x120>)
 80007f6:	edd3 7a00 	vldr	s15, [r3]
 80007fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000806:	dc00      	bgt.n	800080a <HAL_UART_RxCpltCallback+0x72>
			if(dutyCycleB > 1){
				dutyCycleB = 0;
			}
		}
	}
}
 8000808:	e047      	b.n	800089a <HAL_UART_RxCpltCallback+0x102>
				dutyCycleR = 0;
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <HAL_UART_RxCpltCallback+0x120>)
 800080c:	f04f 0200 	mov.w	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
}
 8000812:	e042      	b.n	800089a <HAL_UART_RxCpltCallback+0x102>
		else if(ch=='g'){
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <HAL_UART_RxCpltCallback+0x11c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b67      	cmp	r3, #103	; 0x67
 800081a:	d11d      	bne.n	8000858 <HAL_UART_RxCpltCallback+0xc0>
			dutyCycleG += 0.2;
 800081c:	4b27      	ldr	r3, [pc, #156]	; (80008bc <HAL_UART_RxCpltCallback+0x124>)
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000826:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80008a8 <HAL_UART_RxCpltCallback+0x110>
 800082a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800082e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <HAL_UART_RxCpltCallback+0x124>)
 8000834:	edc3 7a00 	vstr	s15, [r3]
			if(dutyCycleG > 1){
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <HAL_UART_RxCpltCallback+0x124>)
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084a:	dc00      	bgt.n	800084e <HAL_UART_RxCpltCallback+0xb6>
}
 800084c:	e025      	b.n	800089a <HAL_UART_RxCpltCallback+0x102>
				dutyCycleG = 0;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_UART_RxCpltCallback+0x124>)
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	e020      	b.n	800089a <HAL_UART_RxCpltCallback+0x102>
		else if(ch=='b'){
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_UART_RxCpltCallback+0x11c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b62      	cmp	r3, #98	; 0x62
 800085e:	d11c      	bne.n	800089a <HAL_UART_RxCpltCallback+0x102>
			dutyCycleB += 0.2;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_UART_RxCpltCallback+0x128>)
 8000862:	edd3 7a00 	vldr	s15, [r3]
 8000866:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800086a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80008a8 <HAL_UART_RxCpltCallback+0x110>
 800086e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_UART_RxCpltCallback+0x128>)
 8000878:	edc3 7a00 	vstr	s15, [r3]
			if(dutyCycleB > 1){
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_UART_RxCpltCallback+0x128>)
 800087e:	edd3 7a00 	vldr	s15, [r3]
 8000882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800088a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088e:	dc00      	bgt.n	8000892 <HAL_UART_RxCpltCallback+0xfa>
}
 8000890:	e003      	b.n	800089a <HAL_UART_RxCpltCallback+0x102>
				dutyCycleB = 0;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_UART_RxCpltCallback+0x128>)
 8000894:	f04f 0200 	mov.w	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	f3af 8000 	nop.w
 80008a8:	9999999a 	.word	0x9999999a
 80008ac:	3fc99999 	.word	0x3fc99999
 80008b0:	20000088 	.word	0x20000088
 80008b4:	20000038 	.word	0x20000038
 80008b8:	2000002c 	.word	0x2000002c
 80008bc:	20000030 	.word	0x20000030
 80008c0:	20000034 	.word	0x20000034

080008c4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008d6:	f000 fbbf 	bl	8001058 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008da:	2301      	movs	r3, #1
 80008dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008de:	2300      	movs	r3, #0
 80008e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008e6:	231f      	movs	r3, #31
 80008e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008ea:	2387      	movs	r3, #135	; 0x87
 80008ec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008f2:	2300      	movs	r3, #0
 80008f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008f6:	2301      	movs	r3, #1
 80008f8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000906:	463b      	mov	r3, r7
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fbdd 	bl	80010c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800090e:	2004      	movs	r0, #4
 8000910:	f000 fbba 	bl	8001088 <HAL_MPU_Enable>

}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fa1a 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART3_IRQHandler+0x10>)
 80009ca:	f003 f817 	bl	80039fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000088 	.word	0x20000088

080009d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08e      	sub	sp, #56	; 0x38
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8000a36:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a38:	f240 4237 	movw	r2, #1079	; 0x437
 8000a3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a46:	2209      	movs	r2, #9
 8000a48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a56:	482e      	ldr	r0, [pc, #184]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a58:	f001 fede 	bl	8002818 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f7ff ff5b 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4827      	ldr	r0, [pc, #156]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a74:	f002 f996 	bl	8002da4 <HAL_TIM_ConfigClockSource>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a7e:	f7ff ff4d 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a82:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000a84:	f001 ff1f 	bl	80028c6 <HAL_TIM_PWM_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a8e:	f7ff ff45 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481b      	ldr	r0, [pc, #108]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000aa2:	f002 fe07 	bl	80036b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000aac:	f7ff ff36 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab0:	2360      	movs	r3, #96	; 0x60
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000ac8:	f002 f858 	bl	8002b7c <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ad2:	f7ff ff23 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000ade:	f002 f84d 	bl	8002b7c <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ae8:	f7ff ff18 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	220c      	movs	r2, #12
 8000af0:	4619      	mov	r1, r3
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000af4:	f002 f842 	bl	8002b7c <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000afe:	f7ff ff0d 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM2_Init+0x114>)
 8000b04:	f000 f824 	bl	8000b50 <HAL_TIM_MspPostInit>

}
 8000b08:	bf00      	nop
 8000b0a:	3738      	adds	r7, #56	; 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000003c 	.word	0x2000003c

08000b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b24:	d10b      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_TIM_Base_MspInit+0x38>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_TIM_Base_MspInit+0x38>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_TIM_Base_MspInit+0x38>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b70:	d138      	bne.n	8000be4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_TIM_MspPostInit+0x9c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <HAL_TIM_MspPostInit+0x9c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_TIM_MspPostInit+0x9c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_TIM_MspPostInit+0x9c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_TIM_MspPostInit+0x9c>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_TIM_MspPostInit+0x9c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000ba2:	2309      	movs	r3, #9
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <HAL_TIM_MspPostInit+0xa0>)
 8000bbe:	f000 fb59 	bl	8001274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_TIM_MspPostInit+0xa4>)
 8000be0:	f000 fb48 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <MX_USART3_UART_Init+0x5c>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_USART3_UART_Init+0x58>)
 8000c3c:	f002 fdc8 	bl	80037d0 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c46:	f7ff fe69 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000088 	.word	0x20000088
 8000c54:	40004800 	.word	0x40004800

08000c58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0ae      	sub	sp, #184	; 0xb8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2290      	movs	r2, #144	; 0x90
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f8bb 	bl	8004df4 <memset>
  if(uartHandle->Instance==USART3)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <HAL_UART_MspInit+0xc4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d144      	bne.n	8000d12 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 f996 	bl	8001fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ca2:	f7ff fe3b 	bl	800091c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <HAL_UART_MspInit+0xcc>)
 8000cfe:	f000 fab9 	bl	8001274 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2027      	movs	r0, #39	; 0x27
 8000d08:	f000 f96f 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d0c:	2027      	movs	r0, #39	; 0x27
 8000d0e:	f000 f988 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d12:	bf00      	nop
 8000d14:	37b8      	adds	r7, #184	; 0xb8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff fe41 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f004 f855 	bl	8004e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fc35 	bl	80005c8 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d6c:	08004e8c 	.word	0x08004e8c
  ldr r2, =_sbss
 8000d70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d74:	20000114 	.word	0x20000114

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>

08000d7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f000 f928 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d84:	200f      	movs	r0, #15
 8000d86:	f000 f805 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8a:	f7ff fdcd 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f943 	bl	800103e <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f90b 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000110 	.word	0x20000110

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000110 	.word	0x20000110

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <__NVIC_SetPriorityGrouping+0x40>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x40>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	05fa0000 	.word	0x05fa0000

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800105c:	f3bf 8f5f 	dmb	sy
}
 8001060:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_MPU_Disable+0x28>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_MPU_Disable+0x28>)
 8001068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_MPU_Disable+0x2c>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	e000ed90 	.word	0xe000ed90

08001088 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <HAL_MPU_Enable+0x38>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_MPU_Enable+0x3c>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_MPU_Enable+0x3c>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010a6:	f3bf 8f4f 	dsb	sy
}
 80010aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ac:	f3bf 8f6f 	isb	sy
}
 80010b0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed90 	.word	0xe000ed90
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	785a      	ldrb	r2, [r3, #1]
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_MPU_ConfigRegion+0x84>)
 80010d6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d029      	beq.n	8001134 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80010e0:	4a1a      	ldr	r2, [pc, #104]	; (800114c <HAL_MPU_ConfigRegion+0x84>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7b1b      	ldrb	r3, [r3, #12]
 80010ec:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7adb      	ldrb	r3, [r3, #11]
 80010f2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7a9b      	ldrb	r3, [r3, #10]
 80010fa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7b5b      	ldrb	r3, [r3, #13]
 8001102:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001104:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7b9b      	ldrb	r3, [r3, #14]
 800110a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800110c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7bdb      	ldrb	r3, [r3, #15]
 8001112:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001114:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7a5b      	ldrb	r3, [r3, #9]
 800111a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800111c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7a1b      	ldrb	r3, [r3, #8]
 8001122:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001124:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800112e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001130:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001132:	e005      	b.n	8001140 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_MPU_ConfigRegion+0x84>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_MPU_ConfigRegion+0x84>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed90 	.word	0xe000ed90

08001150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800115e:	f7ff fe5d 	bl	8000e1c <HAL_GetTick>
 8001162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d008      	beq.n	8001182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e052      	b.n	8001228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0216 	bic.w	r2, r2, #22
 8001190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <HAL_DMA_Abort+0x62>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0208 	bic.w	r2, r2, #8
 80011c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d2:	e013      	b.n	80011fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011d4:	f7ff fe22 	bl	8000e1c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d90c      	bls.n	80011fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2220      	movs	r2, #32
 80011e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e015      	b.n	8001228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1e4      	bne.n	80011d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120e:	223f      	movs	r2, #63	; 0x3f
 8001210:	409a      	lsls	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d004      	beq.n	800124e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00c      	b.n	8001268 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2205      	movs	r2, #5
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	e175      	b.n	8001580 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f040 8164 	bne.w	800157a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d005      	beq.n	80012ca <HAL_GPIO_Init+0x56>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d130      	bne.n	800132c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b03      	cmp	r3, #3
 8001336:	d017      	beq.n	8001368 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d123      	bne.n	80013bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	69b9      	ldr	r1, [r7, #24]
 80013b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80be 	beq.w	800157a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b66      	ldr	r3, [pc, #408]	; (8001598 <HAL_GPIO_Init+0x324>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a65      	ldr	r2, [pc, #404]	; (8001598 <HAL_GPIO_Init+0x324>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b63      	ldr	r3, [pc, #396]	; (8001598 <HAL_GPIO_Init+0x324>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001416:	4a61      	ldr	r2, [pc, #388]	; (800159c <HAL_GPIO_Init+0x328>)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <HAL_GPIO_Init+0x32c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d037      	beq.n	80014b2 <HAL_GPIO_Init+0x23e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d031      	beq.n	80014ae <HAL_GPIO_Init+0x23a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a56      	ldr	r2, [pc, #344]	; (80015a8 <HAL_GPIO_Init+0x334>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x236>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a55      	ldr	r2, [pc, #340]	; (80015ac <HAL_GPIO_Init+0x338>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x232>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_GPIO_Init+0x33c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x22e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a53      	ldr	r2, [pc, #332]	; (80015b4 <HAL_GPIO_Init+0x340>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x22a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <HAL_GPIO_Init+0x344>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x226>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a51      	ldr	r2, [pc, #324]	; (80015bc <HAL_GPIO_Init+0x348>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x222>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a50      	ldr	r2, [pc, #320]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x21e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4f      	ldr	r2, [pc, #316]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x21a>
 800148a:	2309      	movs	r3, #9
 800148c:	e012      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 800148e:	230a      	movs	r3, #10
 8001490:	e010      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 8001492:	2308      	movs	r3, #8
 8001494:	e00e      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 8001496:	2307      	movs	r3, #7
 8001498:	e00c      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 800149a:	2306      	movs	r3, #6
 800149c:	e00a      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 800149e:	2305      	movs	r3, #5
 80014a0:	e008      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x240>
 80014b2:	2300      	movs	r3, #0
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	; (800159c <HAL_GPIO_Init+0x328>)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <HAL_GPIO_Init+0x354>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f6:	4a34      	ldr	r2, [pc, #208]	; (80015c8 <HAL_GPIO_Init+0x354>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014fc:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <HAL_GPIO_Init+0x354>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001520:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <HAL_GPIO_Init+0x354>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <HAL_GPIO_Init+0x354>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_GPIO_Init+0x354>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_GPIO_Init+0x354>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_GPIO_Init+0x354>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	f67f ae86 	bls.w	8001294 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40013800 	.word	0x40013800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40021400 	.word	0x40021400
 80015b8:	40021800 	.word	0x40021800
 80015bc:	40021c00 	.word	0x40021c00
 80015c0:	40022000 	.word	0x40022000
 80015c4:	40022400 	.word	0x40022400
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015e8:	e003      	b.n	80015f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_PWREx_EnableOverDrive+0x98>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a22      	ldr	r2, [pc, #136]	; (8001698 <HAL_PWREx_EnableOverDrive+0x98>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_PWREx_EnableOverDrive+0x98>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800162e:	f7ff fbf5 	bl	8000e1c <HAL_GetTick>
 8001632:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001634:	e009      	b.n	800164a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001636:	f7ff fbf1 	bl	8000e1c <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001644:	d901      	bls.n	800164a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e022      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_PWREx_EnableOverDrive+0x9c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001656:	d1ee      	bne.n	8001636 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_PWREx_EnableOverDrive+0x9c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_PWREx_EnableOverDrive+0x9c>)
 800165e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001662:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff fbda 	bl	8000e1c <HAL_GetTick>
 8001668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800166a:	e009      	b.n	8001680 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800166c:	f7ff fbd6 	bl	8000e1c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167a:	d901      	bls.n	8001680 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e007      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800168c:	d1ee      	bne.n	800166c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e29b      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8087 	beq.w	80017d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c4:	4b96      	ldr	r3, [pc, #600]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d00c      	beq.n	80016ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d0:	4b93      	ldr	r3, [pc, #588]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d112      	bne.n	8001702 <HAL_RCC_OscConfig+0x62>
 80016dc:	4b90      	ldr	r3, [pc, #576]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016e8:	d10b      	bne.n	8001702 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ea:	4b8d      	ldr	r3, [pc, #564]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d06c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x130>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d168      	bne.n	80017d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e275      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x7a>
 800170c:	4b84      	ldr	r3, [pc, #528]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a83      	ldr	r2, [pc, #524]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	e02e      	b.n	8001778 <HAL_RCC_OscConfig+0xd8>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x9c>
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7e      	ldr	r2, [pc, #504]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7b      	ldr	r2, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e01d      	b.n	8001778 <HAL_RCC_OscConfig+0xd8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0xc0>
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a75      	ldr	r2, [pc, #468]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a72      	ldr	r2, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0xd8>
 8001760:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6e      	ldr	r2, [pc, #440]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6b      	ldr	r2, [pc, #428]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fb4c 	bl	8000e1c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fb48 	bl	8000e1c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e229      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xe8>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb38 	bl	8000e1c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fb34 	bl	8000e1c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e215      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x110>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d069      	beq.n	80018b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017de:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ea:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d11c      	bne.n	8001830 <HAL_RCC_OscConfig+0x190>
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d116      	bne.n	8001830 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_RCC_OscConfig+0x17a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e1e9      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	493d      	ldr	r1, [pc, #244]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	e040      	b.n	80018b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d023      	beq.n	8001880 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a38      	ldr	r2, [pc, #224]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff faea 	bl	8000e1c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff fae6 	bl	8000e1c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1c7      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4929      	ldr	r1, [pc, #164]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
 800187e:	e018      	b.n	80018b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a26      	ldr	r2, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fac6 	bl	8000e1c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fac2 	bl	8000e1c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1a3      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d038      	beq.n	8001930 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80018c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff faa3 	bl	8000e1c <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff fa9f 	bl	8000e1c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e180      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x23a>
 80018f8:	e01a      	b.n	8001930 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80018fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff fa89 	bl	8000e1c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff fa85 	bl	8000e1c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d903      	bls.n	8001924 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e166      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
 8001920:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ee      	bne.n	800190e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80a4 	beq.w	8001a86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193e:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10d      	bne.n	8001966 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a88      	ldr	r2, [pc, #544]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b86      	ldr	r3, [pc, #536]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001966:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x4d4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001972:	4b80      	ldr	r3, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x4d4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a7f      	ldr	r2, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x4d4>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7ff fa4d 	bl	8000e1c <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001986:	f7ff fa49 	bl	8000e1c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	; 0x64
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e12a      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001998:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x4d4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x31a>
 80019ac:	4b70      	ldr	r3, [pc, #448]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a6f      	ldr	r2, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	e02d      	b.n	8001a16 <HAL_RCC_OscConfig+0x376>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x33c>
 80019c2:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70
 80019ce:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6713      	str	r3, [r2, #112]	; 0x70
 80019da:	e01c      	b.n	8001a16 <HAL_RCC_OscConfig+0x376>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0x35e>
 80019e4:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a61      	ldr	r2, [pc, #388]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
 80019f0:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f4:	4a5e      	ldr	r2, [pc, #376]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6713      	str	r3, [r2, #112]	; 0x70
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0x376>
 80019fe:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a5b      	ldr	r2, [pc, #364]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d015      	beq.n	8001a4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f9fd 	bl	8000e1c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff f9f9 	bl	8000e1c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0d8      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ee      	beq.n	8001a26 <HAL_RCC_OscConfig+0x386>
 8001a48:	e014      	b.n	8001a74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f9e7 	bl	8000e1c <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff f9e3 	bl	8000e1c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0c2      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ee      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a3c      	ldr	r2, [pc, #240]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80ae 	beq.w	8001bec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d06d      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d14b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f9b4 	bl	8000e1c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f9b0 	bl	8000e1c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e091      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	019b      	lsls	r3, r3, #6
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	3b01      	subs	r3, #1
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	071b      	lsls	r3, r3, #28
 8001b02:	491b      	ldr	r1, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f982 	bl	8000e1c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff f97e 	bl	8000e1c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e05f      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x47c>
 8001b3a:	e057      	b.n	8001bec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f968 	bl	8000e1c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f964 	bl	8000e1c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e045      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_RCC_OscConfig+0x4d0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4b0>
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x54c>
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_RCC_OscConfig+0x558>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d030      	beq.n	8001be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d129      	bne.n	8001be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d122      	bne.n	8001be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ba8:	4013      	ands	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d119      	bne.n	8001be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d10f      	bne.n	8001be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d0      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d910      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 020f 	bic.w	r2, r3, #15
 8001c2a:	4965      	ldr	r1, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d040      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d115      	bne.n	8001cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e073      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06b      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4936      	ldr	r1, [pc, #216]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f894 	bl	8000e1c <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f890 	bl	8000e1c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e053      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d210      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 020f 	bic.w	r2, r3, #15
 8001d36:	4922      	ldr	r1, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f821 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1d0>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1d4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fff0 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08004e64 	.word	0x08004e64
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd8:	b090      	sub	sp, #64	; 0x40
 8001dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
 8001de0:	2300      	movs	r3, #0
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d00d      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x40>
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	f200 80a1 	bhi.w	8001f40 <HAL_RCC_GetSysClockFreq+0x16c>
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x34>
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e06:	e09b      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e0c:	e09b      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e0e:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e12:	e098      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e14:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e1e:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d028      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	2200      	movs	r2, #0
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	627a      	str	r2, [r7, #36]	; 0x24
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e40:	fb03 f201 	mul.w	r2, r3, r1
 8001e44:	2300      	movs	r3, #0
 8001e46:	fb00 f303 	mul.w	r3, r0, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a43      	ldr	r2, [pc, #268]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e4e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e54:	460a      	mov	r2, r1
 8001e56:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5a:	4413      	add	r3, r2
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	2200      	movs	r2, #0
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	61fa      	str	r2, [r7, #28]
 8001e66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e6e:	f7fe f9e3 	bl	8000238 <__aeabi_uldivmod>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4613      	mov	r3, r2
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e7a:	e053      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	2200      	movs	r2, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	617a      	str	r2, [r7, #20]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e8e:	f04f 0b00 	mov.w	fp, #0
 8001e92:	4652      	mov	r2, sl
 8001e94:	465b      	mov	r3, fp
 8001e96:	f04f 0000 	mov.w	r0, #0
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	0159      	lsls	r1, r3, #5
 8001ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea4:	0150      	lsls	r0, r2, #5
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	ebb2 080a 	subs.w	r8, r2, sl
 8001eae:	eb63 090b 	sbc.w	r9, r3, fp
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ebe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ec2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ec6:	ebb2 0408 	subs.w	r4, r2, r8
 8001eca:	eb63 0509 	sbc.w	r5, r3, r9
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	00eb      	lsls	r3, r5, #3
 8001ed8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001edc:	00e2      	lsls	r2, r4, #3
 8001ede:	4614      	mov	r4, r2
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	eb14 030a 	adds.w	r3, r4, sl
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	eb45 030b 	adc.w	r3, r5, fp
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001efa:	4629      	mov	r1, r5
 8001efc:	028b      	lsls	r3, r1, #10
 8001efe:	4621      	mov	r1, r4
 8001f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f04:	4621      	mov	r1, r4
 8001f06:	028a      	lsls	r2, r1, #10
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	60fa      	str	r2, [r7, #12]
 8001f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f18:	f7fe f98e 	bl	8000238 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001f34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f3e:	e002      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3740      	adds	r7, #64	; 0x40
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	017d7840 	.word	0x017d7840

08001f60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a9b      	lsrs	r3, r3, #10
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4903      	ldr	r1, [pc, #12]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08004e74 	.word	0x08004e74

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fa4:	f7ff ffdc 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0b5b      	lsrs	r3, r3, #13
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08004e74 	.word	0x08004e74

08001fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ff0:	4b69      	ldr	r3, [pc, #420]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a68      	ldr	r2, [pc, #416]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ffa:	6093      	str	r3, [r2, #8]
 8001ffc:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002004:	4964      	ldr	r1, [pc, #400]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d017      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002022:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	4959      	ldr	r1, [pc, #356]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002040:	d101      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d017      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800205e:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002064:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	494a      	ldr	r1, [pc, #296]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 808b 	beq.w	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a39      	ldr	r2, [pc, #228]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
 80020b8:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d0:	f7fe fea4 	bl	8000e1c <HAL_GetTick>
 80020d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d8:	f7fe fea0 	bl	8000e1c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e38f      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d035      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d02e      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002134:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002136:	4a18      	ldr	r2, [pc, #96]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d114      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fe68 	bl	8000e1c <HAL_GetTick>
 800214c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe fe64 	bl	8000e1c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e351      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ee      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800217e:	d111      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800218e:	400b      	ands	r3, r1
 8002190:	4901      	ldr	r1, [pc, #4]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
 8002196:	e00b      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000
 80021a0:	0ffffcff 	.word	0x0ffffcff
 80021a4:	4bac      	ldr	r3, [pc, #688]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4aab      	ldr	r2, [pc, #684]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021ae:	6093      	str	r3, [r2, #8]
 80021b0:	4ba9      	ldr	r3, [pc, #676]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021bc:	49a6      	ldr	r1, [pc, #664]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021ce:	4ba2      	ldr	r3, [pc, #648]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d4:	4aa0      	ldr	r2, [pc, #640]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021de:	4b9e      	ldr	r3, [pc, #632]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	499b      	ldr	r1, [pc, #620]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021fc:	4b96      	ldr	r3, [pc, #600]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800220a:	4993      	ldr	r1, [pc, #588]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800221e:	4b8e      	ldr	r3, [pc, #568]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800222c:	498a      	ldr	r1, [pc, #552]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224e:	4982      	ldr	r1, [pc, #520]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002262:	4b7d      	ldr	r3, [pc, #500]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4979      	ldr	r1, [pc, #484]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002284:	4b74      	ldr	r3, [pc, #464]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f023 0203 	bic.w	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4971      	ldr	r1, [pc, #452]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a6:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	f023 020c 	bic.w	r2, r3, #12
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	4968      	ldr	r1, [pc, #416]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022c8:	4b63      	ldr	r3, [pc, #396]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	4960      	ldr	r1, [pc, #384]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ea:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f8:	4957      	ldr	r1, [pc, #348]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800230c:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	494f      	ldr	r1, [pc, #316]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800232e:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	4946      	ldr	r1, [pc, #280]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	493e      	ldr	r1, [pc, #248]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002380:	4935      	ldr	r1, [pc, #212]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002394:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a2:	492d      	ldr	r1, [pc, #180]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d011      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c4:	4924      	ldr	r1, [pc, #144]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d4:	d101      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002404:	4914      	ldr	r1, [pc, #80]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002428:	490b      	ldr	r1, [pc, #44]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00f      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244c:	4902      	ldr	r1, [pc, #8]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002454:	e002      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002468:	4b8a      	ldr	r3, [pc, #552]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800246e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	4986      	ldr	r1, [pc, #536]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800248c:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002492:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800249c:	497d      	ldr	r1, [pc, #500]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d006      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80d6 	beq.w	8002664 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a75      	ldr	r2, [pc, #468]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe fcaa 	bl	8000e1c <HAL_GetTick>
 80024c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024cc:	f7fe fca6 	bl	8000e1c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e195      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d021      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11d      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024fe:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002512:	0e1b      	lsrs	r3, r3, #24
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	019a      	lsls	r2, r3, #6
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	071b      	lsls	r3, r3, #28
 8002532:	4958      	ldr	r1, [pc, #352]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002558:	2b00      	cmp	r3, #0
 800255a:	d02e      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002564:	d129      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002566:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002574:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257a:	0f1b      	lsrs	r3, r3, #28
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	019a      	lsls	r2, r3, #6
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	071b      	lsls	r3, r3, #28
 800259a:	493e      	ldr	r1, [pc, #248]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025a2:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a8:	f023 021f 	bic.w	r2, r3, #31
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4938      	ldr	r1, [pc, #224]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01d      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025c6:	4b33      	ldr	r3, [pc, #204]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025cc:	0e1b      	lsrs	r3, r3, #24
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025da:	0f1b      	lsrs	r3, r3, #28
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	019a      	lsls	r2, r3, #6
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	4926      	ldr	r1, [pc, #152]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d011      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	019a      	lsls	r2, r3, #6
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	071b      	lsls	r3, r3, #28
 800262a:	491a      	ldr	r1, [pc, #104]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800263c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263e:	f7fe fbed 	bl	8000e1c <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002646:	f7fe fbe9 	bl	8000e1c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	; 0x64
 8002652:	d901      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0d8      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b01      	cmp	r3, #1
 8002668:	f040 80ce 	bne.w	8002808 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002678:	f7fe fbd0 	bl	8000e1c <HAL_GetTick>
 800267c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800267e:	e00b      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002680:	f7fe fbcc 	bl	8000e1c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d904      	bls.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0bb      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002698:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a4:	d0ec      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02e      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12a      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026dc:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	0f1b      	lsrs	r3, r3, #28
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	019a      	lsls	r2, r3, #6
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	431a      	orrs	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	071b      	lsls	r3, r3, #28
 8002702:	4944      	ldr	r1, [pc, #272]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800270a:	4b42      	ldr	r3, [pc, #264]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002710:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	493d      	ldr	r1, [pc, #244]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d022      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002738:	d11d      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	0e1b      	lsrs	r3, r3, #24
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	0f1b      	lsrs	r3, r3, #28
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	019a      	lsls	r2, r3, #6
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	071b      	lsls	r3, r3, #28
 800276e:	4929      	ldr	r1, [pc, #164]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d028      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	0e1b      	lsrs	r3, r3, #24
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	019a      	lsls	r2, r3, #6
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	071b      	lsls	r3, r3, #28
 80027b6:	4917      	ldr	r1, [pc, #92]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	4911      	ldr	r1, [pc, #68]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe fb1c 	bl	8000e1c <HAL_GetTick>
 80027e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027e8:	f7fe fb18 	bl	8000e1c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e007      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002806:	d1ef      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e049      	b.n	80028be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe f968 	bl	8000b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f000 fb6e 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e049      	b.n	800296c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f841 	bl	8002974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f000 fb17 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_TIM_PWM_Start+0x24>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e03c      	b.n	8002a26 <HAL_TIM_PWM_Start+0x9e>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d109      	bne.n	80029c6 <HAL_TIM_PWM_Start+0x3e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	bf14      	ite	ne
 80029be:	2301      	movne	r3, #1
 80029c0:	2300      	moveq	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e02f      	b.n	8002a26 <HAL_TIM_PWM_Start+0x9e>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d109      	bne.n	80029e0 <HAL_TIM_PWM_Start+0x58>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e022      	b.n	8002a26 <HAL_TIM_PWM_Start+0x9e>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d109      	bne.n	80029fa <HAL_TIM_PWM_Start+0x72>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	e015      	b.n	8002a26 <HAL_TIM_PWM_Start+0x9e>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d109      	bne.n	8002a14 <HAL_TIM_PWM_Start+0x8c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e008      	b.n	8002a26 <HAL_TIM_PWM_Start+0x9e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e092      	b.n	8002b54 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0xb6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	e023      	b.n	8002a86 <HAL_TIM_PWM_Start+0xfe>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0xc6>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a4c:	e01b      	b.n	8002a86 <HAL_TIM_PWM_Start+0xfe>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_PWM_Start+0xd6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a5c:	e013      	b.n	8002a86 <HAL_TIM_PWM_Start+0xfe>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_PWM_Start+0xe6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a6c:	e00b      	b.n	8002a86 <HAL_TIM_PWM_Start+0xfe>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d104      	bne.n	8002a7e <HAL_TIM_PWM_Start+0xf6>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	e003      	b.n	8002a86 <HAL_TIM_PWM_Start+0xfe>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fdea 	bl	8003668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a30      	ldr	r2, [pc, #192]	; (8002b5c <HAL_TIM_PWM_Start+0x1d4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x120>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a2f      	ldr	r2, [pc, #188]	; (8002b60 <HAL_TIM_PWM_Start+0x1d8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_TIM_PWM_Start+0x124>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_PWM_Start+0x126>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <HAL_TIM_PWM_Start+0x1d4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x18a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad4:	d01d      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x18a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_TIM_PWM_Start+0x1dc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d018      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x18a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <HAL_TIM_PWM_Start+0x1e0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x18a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <HAL_TIM_PWM_Start+0x1e4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00e      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x18a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_TIM_PWM_Start+0x1d8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x18a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_TIM_PWM_Start+0x1e8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x18a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <HAL_TIM_PWM_Start+0x1ec>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d115      	bne.n	8002b3e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_TIM_PWM_Start+0x1f0>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d015      	beq.n	8002b50 <HAL_TIM_PWM_Start+0x1c8>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d011      	beq.n	8002b50 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3c:	e008      	b.n	8002b50 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e000      	b.n	8002b52 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40010400 	.word	0x40010400
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800
 8002b6c:	40000c00 	.word	0x40000c00
 8002b70:	40014000 	.word	0x40014000
 8002b74:	40001800 	.word	0x40001800
 8002b78:	00010007 	.word	0x00010007

08002b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0ff      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b14      	cmp	r3, #20
 8002ba6:	f200 80f0 	bhi.w	8002d8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002c05 	.word	0x08002c05
 8002bb4:	08002d8b 	.word	0x08002d8b
 8002bb8:	08002d8b 	.word	0x08002d8b
 8002bbc:	08002d8b 	.word	0x08002d8b
 8002bc0:	08002c45 	.word	0x08002c45
 8002bc4:	08002d8b 	.word	0x08002d8b
 8002bc8:	08002d8b 	.word	0x08002d8b
 8002bcc:	08002d8b 	.word	0x08002d8b
 8002bd0:	08002c87 	.word	0x08002c87
 8002bd4:	08002d8b 	.word	0x08002d8b
 8002bd8:	08002d8b 	.word	0x08002d8b
 8002bdc:	08002d8b 	.word	0x08002d8b
 8002be0:	08002cc7 	.word	0x08002cc7
 8002be4:	08002d8b 	.word	0x08002d8b
 8002be8:	08002d8b 	.word	0x08002d8b
 8002bec:	08002d8b 	.word	0x08002d8b
 8002bf0:	08002d09 	.word	0x08002d09
 8002bf4:	08002d8b 	.word	0x08002d8b
 8002bf8:	08002d8b 	.word	0x08002d8b
 8002bfc:	08002d8b 	.word	0x08002d8b
 8002c00:	08002d49 	.word	0x08002d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fa34 	bl	8003078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0208 	orr.w	r2, r2, #8
 8002c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0204 	bic.w	r2, r2, #4
 8002c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	619a      	str	r2, [r3, #24]
      break;
 8002c42:	e0a5      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa86 	bl	800315c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6999      	ldr	r1, [r3, #24]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	021a      	lsls	r2, r3, #8
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]
      break;
 8002c84:	e084      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fadd 	bl	800324c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0208 	orr.w	r2, r2, #8
 8002ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0204 	bic.w	r2, r2, #4
 8002cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69d9      	ldr	r1, [r3, #28]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	61da      	str	r2, [r3, #28]
      break;
 8002cc4:	e064      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fb33 	bl	8003338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69d9      	ldr	r1, [r3, #28]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	61da      	str	r2, [r3, #28]
      break;
 8002d06:	e043      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fb6a 	bl	80033e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0208 	orr.w	r2, r2, #8
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0204 	bic.w	r2, r2, #4
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d46:	e023      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fb9c 	bl	800348c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	021a      	lsls	r2, r3, #8
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d88:	e002      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop

08002da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0b4      	b.n	8002f2a <HAL_TIM_ConfigClockSource+0x186>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <HAL_TIM_ConfigClockSource+0x190>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d03e      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0xd4>
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfe:	f200 8087 	bhi.w	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	f000 8086 	beq.w	8002f16 <HAL_TIM_ConfigClockSource+0x172>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0e:	d87f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b70      	cmp	r3, #112	; 0x70
 8002e12:	d01a      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0xa6>
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d87b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b60      	cmp	r3, #96	; 0x60
 8002e1a:	d050      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x11a>
 8002e1c:	2b60      	cmp	r3, #96	; 0x60
 8002e1e:	d877      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d03c      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0xfa>
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d873      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d058      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x13a>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d86f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b30      	cmp	r3, #48	; 0x30
 8002e32:	d064      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d86b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d060      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d867      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05c      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d05a      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	e062      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e5a:	f000 fbe5 	bl	8003628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	609a      	str	r2, [r3, #8]
      break;
 8002e76:	e04f      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e88:	f000 fbce 	bl	8003628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9a:	609a      	str	r2, [r3, #8]
      break;
 8002e9c:	e03c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 fb42 	bl	8003534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2150      	movs	r1, #80	; 0x50
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fb9b 	bl	80035f2 <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e02c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 fb61 	bl	8003592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2160      	movs	r1, #96	; 0x60
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fb8b 	bl	80035f2 <TIM_ITRx_SetConfig>
      break;
 8002edc:	e01c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 fb22 	bl	8003534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2140      	movs	r1, #64	; 0x40
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fb7b 	bl	80035f2 <TIM_ITRx_SetConfig>
      break;
 8002efc:	e00c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 fb72 	bl	80035f2 <TIM_ITRx_SetConfig>
      break;
 8002f0e:	e003      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e000      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	fffeff88 	.word	0xfffeff88

08002f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a40      	ldr	r2, [pc, #256]	; (800304c <TIM_Base_SetConfig+0x114>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d00f      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3d      	ldr	r2, [pc, #244]	; (8003050 <TIM_Base_SetConfig+0x118>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3c      	ldr	r2, [pc, #240]	; (8003054 <TIM_Base_SetConfig+0x11c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3b      	ldr	r2, [pc, #236]	; (8003058 <TIM_Base_SetConfig+0x120>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3a      	ldr	r2, [pc, #232]	; (800305c <TIM_Base_SetConfig+0x124>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a2f      	ldr	r2, [pc, #188]	; (800304c <TIM_Base_SetConfig+0x114>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02b      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d027      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a2c      	ldr	r2, [pc, #176]	; (8003050 <TIM_Base_SetConfig+0x118>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d023      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2b      	ldr	r2, [pc, #172]	; (8003054 <TIM_Base_SetConfig+0x11c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <TIM_Base_SetConfig+0x120>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01b      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a29      	ldr	r2, [pc, #164]	; (800305c <TIM_Base_SetConfig+0x124>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d017      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a28      	ldr	r2, [pc, #160]	; (8003060 <TIM_Base_SetConfig+0x128>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a27      	ldr	r2, [pc, #156]	; (8003064 <TIM_Base_SetConfig+0x12c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00f      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a26      	ldr	r2, [pc, #152]	; (8003068 <TIM_Base_SetConfig+0x130>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	; (800306c <TIM_Base_SetConfig+0x134>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a24      	ldr	r2, [pc, #144]	; (8003070 <TIM_Base_SetConfig+0x138>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a23      	ldr	r2, [pc, #140]	; (8003074 <TIM_Base_SetConfig+0x13c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <TIM_Base_SetConfig+0x114>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_Base_SetConfig+0xf8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0c      	ldr	r2, [pc, #48]	; (800305c <TIM_Base_SetConfig+0x124>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d103      	bne.n	8003038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	615a      	str	r2, [r3, #20]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40010000 	.word	0x40010000
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800
 8003058:	40000c00 	.word	0x40000c00
 800305c:	40010400 	.word	0x40010400
 8003060:	40014000 	.word	0x40014000
 8003064:	40014400 	.word	0x40014400
 8003068:	40014800 	.word	0x40014800
 800306c:	40001800 	.word	0x40001800
 8003070:	40001c00 	.word	0x40001c00
 8003074:	40002000 	.word	0x40002000

08003078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0201 	bic.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <TIM_OC1_SetConfig+0xd8>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0303 	bic.w	r3, r3, #3
 80030ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 0302 	bic.w	r3, r3, #2
 80030c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a21      	ldr	r2, [pc, #132]	; (8003154 <TIM_OC1_SetConfig+0xdc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_OC1_SetConfig+0x64>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a20      	ldr	r2, [pc, #128]	; (8003158 <TIM_OC1_SetConfig+0xe0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10c      	bne.n	80030f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0308 	bic.w	r3, r3, #8
 80030e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a16      	ldr	r2, [pc, #88]	; (8003154 <TIM_OC1_SetConfig+0xdc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <TIM_OC1_SetConfig+0x8e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <TIM_OC1_SetConfig+0xe0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d111      	bne.n	800312a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	621a      	str	r2, [r3, #32]
}
 8003144:	bf00      	nop
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	fffeff8f 	.word	0xfffeff8f
 8003154:	40010000 	.word	0x40010000
 8003158:	40010400 	.word	0x40010400

0800315c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <TIM_OC2_SetConfig+0xe4>)
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0320 	bic.w	r3, r3, #32
 80031a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a23      	ldr	r2, [pc, #140]	; (8003244 <TIM_OC2_SetConfig+0xe8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_OC2_SetConfig+0x68>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a22      	ldr	r2, [pc, #136]	; (8003248 <TIM_OC2_SetConfig+0xec>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10d      	bne.n	80031e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <TIM_OC2_SetConfig+0xe8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_OC2_SetConfig+0x94>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <TIM_OC2_SetConfig+0xec>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d113      	bne.n	8003218 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	feff8fff 	.word	0xfeff8fff
 8003244:	40010000 	.word	0x40010000
 8003248:	40010400 	.word	0x40010400

0800324c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4b2d      	ldr	r3, [pc, #180]	; (800332c <TIM_OC3_SetConfig+0xe0>)
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a22      	ldr	r2, [pc, #136]	; (8003330 <TIM_OC3_SetConfig+0xe4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_OC3_SetConfig+0x66>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <TIM_OC3_SetConfig+0xe8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10d      	bne.n	80032ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <TIM_OC3_SetConfig+0xe4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d003      	beq.n	80032de <TIM_OC3_SetConfig+0x92>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a16      	ldr	r2, [pc, #88]	; (8003334 <TIM_OC3_SetConfig+0xe8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d113      	bne.n	8003306 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	621a      	str	r2, [r3, #32]
}
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	fffeff8f 	.word	0xfffeff8f
 8003330:	40010000 	.word	0x40010000
 8003334:	40010400 	.word	0x40010400

08003338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <TIM_OC4_SetConfig+0xa4>)
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	031b      	lsls	r3, r3, #12
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <TIM_OC4_SetConfig+0xa8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_OC4_SetConfig+0x68>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <TIM_OC4_SetConfig+0xac>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d109      	bne.n	80033b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	019b      	lsls	r3, r3, #6
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	feff8fff 	.word	0xfeff8fff
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40010400 	.word	0x40010400

080033e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <TIM_OC5_SetConfig+0x98>)
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003428:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a12      	ldr	r2, [pc, #72]	; (8003484 <TIM_OC5_SetConfig+0x9c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_OC5_SetConfig+0x5e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a11      	ldr	r2, [pc, #68]	; (8003488 <TIM_OC5_SetConfig+0xa0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d109      	bne.n	800345a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	fffeff8f 	.word	0xfffeff8f
 8003484:	40010000 	.word	0x40010000
 8003488:	40010400 	.word	0x40010400

0800348c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <TIM_OC6_SetConfig+0x9c>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	051b      	lsls	r3, r3, #20
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a13      	ldr	r2, [pc, #76]	; (800352c <TIM_OC6_SetConfig+0xa0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_OC6_SetConfig+0x60>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <TIM_OC6_SetConfig+0xa4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d109      	bne.n	8003500 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	029b      	lsls	r3, r3, #10
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	feff8fff 	.word	0xfeff8fff
 800352c:	40010000 	.word	0x40010000
 8003530:	40010400 	.word	0x40010400

08003534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0201 	bic.w	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800355e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f023 030a 	bic.w	r3, r3, #10
 8003570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003592:	b480      	push	{r7}
 8003594:	b087      	sub	sp, #28
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0210 	bic.w	r2, r3, #16
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	031b      	lsls	r3, r3, #12
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	f043 0307 	orr.w	r3, r3, #7
 8003614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	021a      	lsls	r2, r3, #8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	431a      	orrs	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4313      	orrs	r3, r2
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2201      	movs	r2, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	43db      	mvns	r3, r3
 800368a:	401a      	ands	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1a      	ldr	r2, [r3, #32]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	431a      	orrs	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e06d      	b.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a30      	ldr	r2, [pc, #192]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2f      	ldr	r2, [pc, #188]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003706:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d01d      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10c      	bne.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4313      	orrs	r3, r2
 800378c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40010400 	.word	0x40010400
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40001800 	.word	0x40001800

080037d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e040      	b.n	8003864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fa30 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fc06 	bl	8004020 <UART_SetConfig>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e022      	b.n	8003864 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fe5e 	bl	80044e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fee5 	bl	800462c <UART_CheckIdleState>
 8003862:	4603      	mov	r3, r0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003880:	2b20      	cmp	r3, #32
 8003882:	d171      	bne.n	8003968 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_UART_Transmit+0x24>
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e06a      	b.n	800396a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2221      	movs	r2, #33	; 0x21
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038a2:	f7fd fabb 	bl	8000e1c <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c0:	d108      	bne.n	80038d4 <HAL_UART_Transmit+0x68>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d104      	bne.n	80038d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	e003      	b.n	80038dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038dc:	e02c      	b.n	8003938 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 feec 	bl	80046c6 <UART_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e038      	b.n	800396a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	3302      	adds	r3, #2
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	e007      	b.n	8003926 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	3301      	adds	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1cc      	bne.n	80038de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2200      	movs	r2, #0
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 feb9 	bl	80046c6 <UART_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e005      	b.n	800396a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b08a      	sub	sp, #40	; 0x28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	4613      	mov	r3, r2
 800397e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003986:	2b20      	cmp	r3, #32
 8003988:	d132      	bne.n	80039f0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_UART_Receive_IT+0x24>
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e02b      	b.n	80039f2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d018      	beq.n	80039e0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	613b      	str	r3, [r7, #16]
   return(result);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	69f9      	ldr	r1, [r7, #28]
 80039d2:	6a3a      	ldr	r2, [r7, #32]
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e6      	bne.n	80039ae <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 ff34 	bl	8004854 <UART_Start_Receive_IT>
 80039ec:	4603      	mov	r3, r0
 80039ee:	e000      	b.n	80039f2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b0ba      	sub	sp, #232	; 0xe8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a26:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d115      	bne.n	8003a64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00f      	beq.n	8003a64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 82ac 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
      }
      return;
 8003a62:	e2a6      	b.n	8003fb2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8117 	beq.w	8003c9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a7e:	4b85      	ldr	r3, [pc, #532]	; (8003c94 <HAL_UART_IRQHandler+0x298>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 810a 	beq.w	8003c9c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d011      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xbc>
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d011      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xec>
 8003ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d011      	beq.n	8003b18 <HAL_UART_IRQHandler+0x11c>
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2204      	movs	r2, #4
 8003b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0e:	f043 0202 	orr.w	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2208      	movs	r2, #8
 8003b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4a:	f043 0208 	orr.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d012      	beq.n	8003b86 <HAL_UART_IRQHandler+0x18a>
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8212 	beq.w	8003fb6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04f      	beq.n	8003c7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fefe 	bl	80049e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d141      	bne.n	8003c76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d9      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <HAL_UART_IRQHandler+0x29c>)
 8003c4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd faec 	bl	8001230 <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e00f      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9b6 	bl	8003fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	e00b      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f9b2 	bl	8003fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e007      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9ae 	bl	8003fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c8c:	e193      	b.n	8003fb6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8e:	bf00      	nop
    return;
 8003c90:	e191      	b.n	8003fb6 <HAL_UART_IRQHandler+0x5ba>
 8003c92:	bf00      	nop
 8003c94:	04000120 	.word	0x04000120
 8003c98:	08004aa9 	.word	0x08004aa9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 814c 	bne.w	8003f3e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8145 	beq.w	8003f3e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 813e 	beq.w	8003f3e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	f040 80b6 	bne.w	8003e46 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ce6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8165 	beq.w	8003fba <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	f080 815d 	bcs.w	8003fba <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d14:	f000 8086 	beq.w	8003e24 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1da      	bne.n	8003d18 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e1      	bne.n	8003d62 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	f023 0310 	bic.w	r3, r3, #16
 8003df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e06:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e4      	bne.n	8003de4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd f996 	bl	8001150 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8d8 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e44:	e0b9      	b.n	8003fba <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80ab 	beq.w	8003fbe <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80a6 	beq.w	8003fbe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e94:	647b      	str	r3, [r7, #68]	; 0x44
 8003e96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e4      	bne.n	8003e72 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3308      	adds	r3, #8
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ecc:	633a      	str	r2, [r7, #48]	; 0x30
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e3      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	617b      	str	r3, [r7, #20]
   return(result);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e4      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f85c 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f3c:	e03f      	b.n	8003fbe <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <HAL_UART_IRQHandler+0x56c>
 8003f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f853 	bl	800400c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f66:	e02d      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01c      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
    }
    return;
 8003f90:	e017      	b.n	8003fc2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d012      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x5c8>
 8003f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fd92 	bl	8004ad4 <UART_EndTransmit_IT>
    return;
 8003fb0:	e008      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003fb2:	bf00      	nop
 8003fb4:	e006      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003fb6:	bf00      	nop
 8003fb8:	e004      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003fba:	bf00      	nop
 8003fbc:	e002      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003fc2:	bf00      	nop
  }

}
 8003fc4:	37e8      	adds	r7, #232	; 0xe8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop

08003fcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4ba6      	ldr	r3, [pc, #664]	; (80042e4 <UART_SetConfig+0x2c4>)
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	430b      	orrs	r3, r1
 8004056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a94      	ldr	r2, [pc, #592]	; (80042e8 <UART_SetConfig+0x2c8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d120      	bne.n	80040de <UART_SetConfig+0xbe>
 800409c:	4b93      	ldr	r3, [pc, #588]	; (80042ec <UART_SetConfig+0x2cc>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d816      	bhi.n	80040d8 <UART_SetConfig+0xb8>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <UART_SetConfig+0x90>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040cd 	.word	0x080040cd
 80040b8:	080040c7 	.word	0x080040c7
 80040bc:	080040d3 	.word	0x080040d3
 80040c0:	2301      	movs	r3, #1
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e150      	b.n	8004368 <UART_SetConfig+0x348>
 80040c6:	2302      	movs	r3, #2
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e14d      	b.n	8004368 <UART_SetConfig+0x348>
 80040cc:	2304      	movs	r3, #4
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e14a      	b.n	8004368 <UART_SetConfig+0x348>
 80040d2:	2308      	movs	r3, #8
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e147      	b.n	8004368 <UART_SetConfig+0x348>
 80040d8:	2310      	movs	r3, #16
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e144      	b.n	8004368 <UART_SetConfig+0x348>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a83      	ldr	r2, [pc, #524]	; (80042f0 <UART_SetConfig+0x2d0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d132      	bne.n	800414e <UART_SetConfig+0x12e>
 80040e8:	4b80      	ldr	r3, [pc, #512]	; (80042ec <UART_SetConfig+0x2cc>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d828      	bhi.n	8004148 <UART_SetConfig+0x128>
 80040f6:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <UART_SetConfig+0xdc>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004149 	.word	0x08004149
 8004104:	08004149 	.word	0x08004149
 8004108:	08004149 	.word	0x08004149
 800410c:	0800413d 	.word	0x0800413d
 8004110:	08004149 	.word	0x08004149
 8004114:	08004149 	.word	0x08004149
 8004118:	08004149 	.word	0x08004149
 800411c:	08004137 	.word	0x08004137
 8004120:	08004149 	.word	0x08004149
 8004124:	08004149 	.word	0x08004149
 8004128:	08004149 	.word	0x08004149
 800412c:	08004143 	.word	0x08004143
 8004130:	2300      	movs	r3, #0
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e118      	b.n	8004368 <UART_SetConfig+0x348>
 8004136:	2302      	movs	r3, #2
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e115      	b.n	8004368 <UART_SetConfig+0x348>
 800413c:	2304      	movs	r3, #4
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e112      	b.n	8004368 <UART_SetConfig+0x348>
 8004142:	2308      	movs	r3, #8
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e10f      	b.n	8004368 <UART_SetConfig+0x348>
 8004148:	2310      	movs	r3, #16
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e10c      	b.n	8004368 <UART_SetConfig+0x348>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a68      	ldr	r2, [pc, #416]	; (80042f4 <UART_SetConfig+0x2d4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d120      	bne.n	800419a <UART_SetConfig+0x17a>
 8004158:	4b64      	ldr	r3, [pc, #400]	; (80042ec <UART_SetConfig+0x2cc>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004162:	2b30      	cmp	r3, #48	; 0x30
 8004164:	d013      	beq.n	800418e <UART_SetConfig+0x16e>
 8004166:	2b30      	cmp	r3, #48	; 0x30
 8004168:	d814      	bhi.n	8004194 <UART_SetConfig+0x174>
 800416a:	2b20      	cmp	r3, #32
 800416c:	d009      	beq.n	8004182 <UART_SetConfig+0x162>
 800416e:	2b20      	cmp	r3, #32
 8004170:	d810      	bhi.n	8004194 <UART_SetConfig+0x174>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <UART_SetConfig+0x15c>
 8004176:	2b10      	cmp	r3, #16
 8004178:	d006      	beq.n	8004188 <UART_SetConfig+0x168>
 800417a:	e00b      	b.n	8004194 <UART_SetConfig+0x174>
 800417c:	2300      	movs	r3, #0
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e0f2      	b.n	8004368 <UART_SetConfig+0x348>
 8004182:	2302      	movs	r3, #2
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e0ef      	b.n	8004368 <UART_SetConfig+0x348>
 8004188:	2304      	movs	r3, #4
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0ec      	b.n	8004368 <UART_SetConfig+0x348>
 800418e:	2308      	movs	r3, #8
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e0e9      	b.n	8004368 <UART_SetConfig+0x348>
 8004194:	2310      	movs	r3, #16
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e0e6      	b.n	8004368 <UART_SetConfig+0x348>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a56      	ldr	r2, [pc, #344]	; (80042f8 <UART_SetConfig+0x2d8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d120      	bne.n	80041e6 <UART_SetConfig+0x1c6>
 80041a4:	4b51      	ldr	r3, [pc, #324]	; (80042ec <UART_SetConfig+0x2cc>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041ae:	2bc0      	cmp	r3, #192	; 0xc0
 80041b0:	d013      	beq.n	80041da <UART_SetConfig+0x1ba>
 80041b2:	2bc0      	cmp	r3, #192	; 0xc0
 80041b4:	d814      	bhi.n	80041e0 <UART_SetConfig+0x1c0>
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d009      	beq.n	80041ce <UART_SetConfig+0x1ae>
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d810      	bhi.n	80041e0 <UART_SetConfig+0x1c0>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <UART_SetConfig+0x1a8>
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d006      	beq.n	80041d4 <UART_SetConfig+0x1b4>
 80041c6:	e00b      	b.n	80041e0 <UART_SetConfig+0x1c0>
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e0cc      	b.n	8004368 <UART_SetConfig+0x348>
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e0c9      	b.n	8004368 <UART_SetConfig+0x348>
 80041d4:	2304      	movs	r3, #4
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e0c6      	b.n	8004368 <UART_SetConfig+0x348>
 80041da:	2308      	movs	r3, #8
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e0c3      	b.n	8004368 <UART_SetConfig+0x348>
 80041e0:	2310      	movs	r3, #16
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e0c0      	b.n	8004368 <UART_SetConfig+0x348>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a44      	ldr	r2, [pc, #272]	; (80042fc <UART_SetConfig+0x2dc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d125      	bne.n	800423c <UART_SetConfig+0x21c>
 80041f0:	4b3e      	ldr	r3, [pc, #248]	; (80042ec <UART_SetConfig+0x2cc>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041fe:	d017      	beq.n	8004230 <UART_SetConfig+0x210>
 8004200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004204:	d817      	bhi.n	8004236 <UART_SetConfig+0x216>
 8004206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420a:	d00b      	beq.n	8004224 <UART_SetConfig+0x204>
 800420c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004210:	d811      	bhi.n	8004236 <UART_SetConfig+0x216>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <UART_SetConfig+0x1fe>
 8004216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421a:	d006      	beq.n	800422a <UART_SetConfig+0x20a>
 800421c:	e00b      	b.n	8004236 <UART_SetConfig+0x216>
 800421e:	2300      	movs	r3, #0
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e0a1      	b.n	8004368 <UART_SetConfig+0x348>
 8004224:	2302      	movs	r3, #2
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e09e      	b.n	8004368 <UART_SetConfig+0x348>
 800422a:	2304      	movs	r3, #4
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e09b      	b.n	8004368 <UART_SetConfig+0x348>
 8004230:	2308      	movs	r3, #8
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e098      	b.n	8004368 <UART_SetConfig+0x348>
 8004236:	2310      	movs	r3, #16
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e095      	b.n	8004368 <UART_SetConfig+0x348>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <UART_SetConfig+0x2e0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d125      	bne.n	8004292 <UART_SetConfig+0x272>
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <UART_SetConfig+0x2cc>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004254:	d017      	beq.n	8004286 <UART_SetConfig+0x266>
 8004256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800425a:	d817      	bhi.n	800428c <UART_SetConfig+0x26c>
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004260:	d00b      	beq.n	800427a <UART_SetConfig+0x25a>
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004266:	d811      	bhi.n	800428c <UART_SetConfig+0x26c>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <UART_SetConfig+0x254>
 800426c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004270:	d006      	beq.n	8004280 <UART_SetConfig+0x260>
 8004272:	e00b      	b.n	800428c <UART_SetConfig+0x26c>
 8004274:	2301      	movs	r3, #1
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e076      	b.n	8004368 <UART_SetConfig+0x348>
 800427a:	2302      	movs	r3, #2
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e073      	b.n	8004368 <UART_SetConfig+0x348>
 8004280:	2304      	movs	r3, #4
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e070      	b.n	8004368 <UART_SetConfig+0x348>
 8004286:	2308      	movs	r3, #8
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e06d      	b.n	8004368 <UART_SetConfig+0x348>
 800428c:	2310      	movs	r3, #16
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e06a      	b.n	8004368 <UART_SetConfig+0x348>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <UART_SetConfig+0x2e4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d138      	bne.n	800430e <UART_SetConfig+0x2ee>
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <UART_SetConfig+0x2cc>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042aa:	d017      	beq.n	80042dc <UART_SetConfig+0x2bc>
 80042ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042b0:	d82a      	bhi.n	8004308 <UART_SetConfig+0x2e8>
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b6:	d00b      	beq.n	80042d0 <UART_SetConfig+0x2b0>
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d824      	bhi.n	8004308 <UART_SetConfig+0x2e8>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <UART_SetConfig+0x2aa>
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d006      	beq.n	80042d6 <UART_SetConfig+0x2b6>
 80042c8:	e01e      	b.n	8004308 <UART_SetConfig+0x2e8>
 80042ca:	2300      	movs	r3, #0
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e04b      	b.n	8004368 <UART_SetConfig+0x348>
 80042d0:	2302      	movs	r3, #2
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e048      	b.n	8004368 <UART_SetConfig+0x348>
 80042d6:	2304      	movs	r3, #4
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e045      	b.n	8004368 <UART_SetConfig+0x348>
 80042dc:	2308      	movs	r3, #8
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e042      	b.n	8004368 <UART_SetConfig+0x348>
 80042e2:	bf00      	nop
 80042e4:	efff69f3 	.word	0xefff69f3
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40004400 	.word	0x40004400
 80042f4:	40004800 	.word	0x40004800
 80042f8:	40004c00 	.word	0x40004c00
 80042fc:	40005000 	.word	0x40005000
 8004300:	40011400 	.word	0x40011400
 8004304:	40007800 	.word	0x40007800
 8004308:	2310      	movs	r3, #16
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e02c      	b.n	8004368 <UART_SetConfig+0x348>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a72      	ldr	r2, [pc, #456]	; (80044dc <UART_SetConfig+0x4bc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d125      	bne.n	8004364 <UART_SetConfig+0x344>
 8004318:	4b71      	ldr	r3, [pc, #452]	; (80044e0 <UART_SetConfig+0x4c0>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004322:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004326:	d017      	beq.n	8004358 <UART_SetConfig+0x338>
 8004328:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800432c:	d817      	bhi.n	800435e <UART_SetConfig+0x33e>
 800432e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004332:	d00b      	beq.n	800434c <UART_SetConfig+0x32c>
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004338:	d811      	bhi.n	800435e <UART_SetConfig+0x33e>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <UART_SetConfig+0x326>
 800433e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004342:	d006      	beq.n	8004352 <UART_SetConfig+0x332>
 8004344:	e00b      	b.n	800435e <UART_SetConfig+0x33e>
 8004346:	2300      	movs	r3, #0
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e00d      	b.n	8004368 <UART_SetConfig+0x348>
 800434c:	2302      	movs	r3, #2
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e00a      	b.n	8004368 <UART_SetConfig+0x348>
 8004352:	2304      	movs	r3, #4
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e007      	b.n	8004368 <UART_SetConfig+0x348>
 8004358:	2308      	movs	r3, #8
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e004      	b.n	8004368 <UART_SetConfig+0x348>
 800435e:	2310      	movs	r3, #16
 8004360:	77fb      	strb	r3, [r7, #31]
 8004362:	e001      	b.n	8004368 <UART_SetConfig+0x348>
 8004364:	2310      	movs	r3, #16
 8004366:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	d15b      	bne.n	800442a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004372:	7ffb      	ldrb	r3, [r7, #31]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d828      	bhi.n	80043ca <UART_SetConfig+0x3aa>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <UART_SetConfig+0x360>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043ad 	.word	0x080043ad
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043bb 	.word	0x080043bb
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043cb 	.word	0x080043cb
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fd fde8 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 80043a8:	61b8      	str	r0, [r7, #24]
        break;
 80043aa:	e013      	b.n	80043d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ac:	f7fd fdf8 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 80043b0:	61b8      	str	r0, [r7, #24]
        break;
 80043b2:	e00f      	b.n	80043d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b4:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <UART_SetConfig+0x4c4>)
 80043b6:	61bb      	str	r3, [r7, #24]
        break;
 80043b8:	e00c      	b.n	80043d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ba:	f7fd fd0b 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 80043be:	61b8      	str	r0, [r7, #24]
        break;
 80043c0:	e008      	b.n	80043d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c6:	61bb      	str	r3, [r7, #24]
        break;
 80043c8:	e004      	b.n	80043d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	77bb      	strb	r3, [r7, #30]
        break;
 80043d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d074      	beq.n	80044c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	005a      	lsls	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	441a      	add	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	d916      	bls.n	8004424 <UART_SetConfig+0x404>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d212      	bcs.n	8004424 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f023 030f 	bic.w	r3, r3, #15
 8004406:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	b29b      	uxth	r3, r3
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	b29a      	uxth	r2, r3
 8004414:	89fb      	ldrh	r3, [r7, #14]
 8004416:	4313      	orrs	r3, r2
 8004418:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	89fa      	ldrh	r2, [r7, #14]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	e04f      	b.n	80044c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	77bb      	strb	r3, [r7, #30]
 8004428:	e04c      	b.n	80044c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800442a:	7ffb      	ldrb	r3, [r7, #31]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d828      	bhi.n	8004482 <UART_SetConfig+0x462>
 8004430:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <UART_SetConfig+0x418>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004465 	.word	0x08004465
 8004440:	0800446d 	.word	0x0800446d
 8004444:	08004483 	.word	0x08004483
 8004448:	08004473 	.word	0x08004473
 800444c:	08004483 	.word	0x08004483
 8004450:	08004483 	.word	0x08004483
 8004454:	08004483 	.word	0x08004483
 8004458:	0800447b 	.word	0x0800447b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800445c:	f7fd fd8c 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8004460:	61b8      	str	r0, [r7, #24]
        break;
 8004462:	e013      	b.n	800448c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fd fd9c 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 8004468:	61b8      	str	r0, [r7, #24]
        break;
 800446a:	e00f      	b.n	800448c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <UART_SetConfig+0x4c4>)
 800446e:	61bb      	str	r3, [r7, #24]
        break;
 8004470:	e00c      	b.n	800448c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004472:	f7fd fcaf 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8004476:	61b8      	str	r0, [r7, #24]
        break;
 8004478:	e008      	b.n	800448c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447e:	61bb      	str	r3, [r7, #24]
        break;
 8004480:	e004      	b.n	800448c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	77bb      	strb	r3, [r7, #30]
        break;
 800448a:	bf00      	nop
    }

    if (pclk != 0U)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	085a      	lsrs	r2, r3, #1
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	441a      	add	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b0f      	cmp	r3, #15
 80044aa:	d909      	bls.n	80044c0 <UART_SetConfig+0x4a0>
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d205      	bcs.n	80044c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	e001      	b.n	80044c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40007c00 	.word	0x40007c00
 80044e0:	40023800 	.word	0x40023800
 80044e4:	00f42400 	.word	0x00f42400

080044e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01a      	beq.n	80045fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e6:	d10a      	bne.n	80045fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af02      	add	r7, sp, #8
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800463c:	f7fc fbee 	bl	8000e1c <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b08      	cmp	r3, #8
 800464e:	d10e      	bne.n	800466e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f831 	bl	80046c6 <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e027      	b.n	80046be <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d10e      	bne.n	800469a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800467c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f81b 	bl	80046c6 <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e011      	b.n	80046be <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b09c      	sub	sp, #112	; 0x70
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	4613      	mov	r3, r2
 80046d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d6:	e0a7      	b.n	8004828 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	f000 80a3 	beq.w	8004828 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fc fb9b 	bl	8000e1c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d13f      	bne.n	8004778 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004708:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800470c:	667b      	str	r3, [r7, #100]	; 0x64
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004718:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800471c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e6      	bne.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3308      	adds	r3, #8
 8004730:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	663b      	str	r3, [r7, #96]	; 0x60
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800474a:	64ba      	str	r2, [r7, #72]	; 0x48
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e068      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d050      	beq.n	8004828 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004794:	d148      	bne.n	8004828 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800479e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
 80047c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e6      	bne.n	80047a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	613b      	str	r3, [r7, #16]
   return(result);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047f2:	623a      	str	r2, [r7, #32]
 80047f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	69f9      	ldr	r1, [r7, #28]
 80047f8:	6a3a      	ldr	r2, [r7, #32]
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e5      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e010      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	429a      	cmp	r2, r3
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	429a      	cmp	r2, r3
 8004844:	f43f af48 	beq.w	80046d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3770      	adds	r7, #112	; 0x70
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004854:	b480      	push	{r7}
 8004856:	b097      	sub	sp, #92	; 0x5c
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004886:	d10e      	bne.n	80048a6 <UART_Start_Receive_IT+0x52>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <UART_Start_Receive_IT+0x48>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004896:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800489a:	e02d      	b.n	80048f8 <UART_Start_Receive_IT+0xa4>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	22ff      	movs	r2, #255	; 0xff
 80048a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048a4:	e028      	b.n	80048f8 <UART_Start_Receive_IT+0xa4>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10d      	bne.n	80048ca <UART_Start_Receive_IT+0x76>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <UART_Start_Receive_IT+0x6c>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	22ff      	movs	r2, #255	; 0xff
 80048ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048be:	e01b      	b.n	80048f8 <UART_Start_Receive_IT+0xa4>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	227f      	movs	r2, #127	; 0x7f
 80048c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048c8:	e016      	b.n	80048f8 <UART_Start_Receive_IT+0xa4>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048d2:	d10d      	bne.n	80048f0 <UART_Start_Receive_IT+0x9c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <UART_Start_Receive_IT+0x92>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	227f      	movs	r2, #127	; 0x7f
 80048e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048e4:	e008      	b.n	80048f8 <UART_Start_Receive_IT+0xa4>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	223f      	movs	r2, #63	; 0x3f
 80048ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ee:	e003      	b.n	80048f8 <UART_Start_Receive_IT+0xa4>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2222      	movs	r2, #34	; 0x22
 8004904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	657b      	str	r3, [r7, #84]	; 0x54
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004928:	64ba      	str	r2, [r7, #72]	; 0x48
 800492a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800492e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004944:	d107      	bne.n	8004956 <UART_Start_Receive_IT+0x102>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <UART_Start_Receive_IT+0x184>)
 8004952:	669a      	str	r2, [r3, #104]	; 0x68
 8004954:	e002      	b.n	800495c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <UART_Start_Receive_IT+0x188>)
 800495a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d019      	beq.n	8004998 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
 8004984:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e6      	bne.n	8004964 <UART_Start_Receive_IT+0x110>
 8004996:	e018      	b.n	80049ca <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	613b      	str	r3, [r7, #16]
   return(result);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f043 0320 	orr.w	r3, r3, #32
 80049ac:	653b      	str	r3, [r7, #80]	; 0x50
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	69f9      	ldr	r1, [r7, #28]
 80049bc:	6a3a      	ldr	r2, [r7, #32]
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e6      	bne.n	8004998 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	375c      	adds	r7, #92	; 0x5c
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	08004c8f 	.word	0x08004c8f
 80049dc:	08004b29 	.word	0x08004b29

080049e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b095      	sub	sp, #84	; 0x54
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a06:	643b      	str	r3, [r7, #64]	; 0x40
 8004a08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e6      	bne.n	80049e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3308      	adds	r3, #8
 8004a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e5      	bne.n	8004a1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d118      	bne.n	8004a88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f023 0310 	bic.w	r3, r3, #16
 8004a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6979      	ldr	r1, [r7, #20]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	613b      	str	r3, [r7, #16]
   return(result);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e6      	bne.n	8004a56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a9c:	bf00      	nop
 8004a9e:	3754      	adds	r7, #84	; 0x54
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff fa8a 	bl	8003fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	613b      	str	r3, [r7, #16]
   return(result);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e6      	bne.n	8004adc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fa56 	bl	8003fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b20:	bf00      	nop
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b096      	sub	sp, #88	; 0x58
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b36:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b40:	2b22      	cmp	r3, #34	; 0x22
 8004b42:	f040 8098 	bne.w	8004c76 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b50:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004b54:	b2d9      	uxtb	r1, r3
 8004b56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	400a      	ands	r2, r1
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d17b      	bne.n	8004c86 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ba2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bac:	647b      	str	r3, [r7, #68]	; 0x44
 8004bae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e6      	bne.n	8004b8e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	623b      	str	r3, [r7, #32]
   return(result);
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004be0:	633a      	str	r2, [r7, #48]	; 0x30
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e5      	bne.n	8004bc0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d12e      	bne.n	8004c6e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0310 	bic.w	r3, r3, #16
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	69b9      	ldr	r1, [r7, #24]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	617b      	str	r3, [r7, #20]
   return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e6      	bne.n	8004c16 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d103      	bne.n	8004c5e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff f9c4 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c6c:	e00b      	b.n	8004c86 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fb fd92 	bl	8000798 <HAL_UART_RxCpltCallback>
}
 8004c74:	e007      	b.n	8004c86 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699a      	ldr	r2, [r3, #24]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0208 	orr.w	r2, r2, #8
 8004c84:	619a      	str	r2, [r3, #24]
}
 8004c86:	bf00      	nop
 8004c88:	3758      	adds	r7, #88	; 0x58
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b096      	sub	sp, #88	; 0x58
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca6:	2b22      	cmp	r3, #34	; 0x22
 8004ca8:	f040 8098 	bne.w	8004ddc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004cbc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004cc0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	1c9a      	adds	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d17b      	bne.n	8004dec <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d12:	643b      	str	r3, [r7, #64]	; 0x40
 8004d14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e6      	bne.n	8004cf4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d12e      	bne.n	8004dd4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0310 	bic.w	r3, r3, #16
 8004d90:	647b      	str	r3, [r7, #68]	; 0x44
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	613b      	str	r3, [r7, #16]
   return(result);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d103      	bne.n	8004dc4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2210      	movs	r2, #16
 8004dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff f911 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dd2:	e00b      	b.n	8004dec <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fb fcdf 	bl	8000798 <HAL_UART_RxCpltCallback>
}
 8004dda:	e007      	b.n	8004dec <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0208 	orr.w	r2, r2, #8
 8004dea:	619a      	str	r2, [r3, #24]
}
 8004dec:	bf00      	nop
 8004dee:	3758      	adds	r7, #88	; 0x58
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <memset>:
 8004df4:	4402      	add	r2, r0
 8004df6:	4603      	mov	r3, r0
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d100      	bne.n	8004dfe <memset+0xa>
 8004dfc:	4770      	bx	lr
 8004dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004e02:	e7f9      	b.n	8004df8 <memset+0x4>

08004e04 <__libc_init_array>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4d0d      	ldr	r5, [pc, #52]	; (8004e3c <__libc_init_array+0x38>)
 8004e08:	4c0d      	ldr	r4, [pc, #52]	; (8004e40 <__libc_init_array+0x3c>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	2600      	movs	r6, #0
 8004e10:	42a6      	cmp	r6, r4
 8004e12:	d109      	bne.n	8004e28 <__libc_init_array+0x24>
 8004e14:	4d0b      	ldr	r5, [pc, #44]	; (8004e44 <__libc_init_array+0x40>)
 8004e16:	4c0c      	ldr	r4, [pc, #48]	; (8004e48 <__libc_init_array+0x44>)
 8004e18:	f000 f818 	bl	8004e4c <_init>
 8004e1c:	1b64      	subs	r4, r4, r5
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	2600      	movs	r6, #0
 8004e22:	42a6      	cmp	r6, r4
 8004e24:	d105      	bne.n	8004e32 <__libc_init_array+0x2e>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2c:	4798      	blx	r3
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7ee      	b.n	8004e10 <__libc_init_array+0xc>
 8004e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e36:	4798      	blx	r3
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7f2      	b.n	8004e22 <__libc_init_array+0x1e>
 8004e3c:	08004e84 	.word	0x08004e84
 8004e40:	08004e84 	.word	0x08004e84
 8004e44:	08004e84 	.word	0x08004e84
 8004e48:	08004e88 	.word	0x08004e88

08004e4c <_init>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr

08004e58 <_fini>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr
