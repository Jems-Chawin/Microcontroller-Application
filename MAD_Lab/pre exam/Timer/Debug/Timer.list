
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004844  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a9c  08004a9c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa4  08004aa4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08004b08  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004b08  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103ce  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e2  00000000  00000000  0003049b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00032880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab5  00000000  00000000  00033640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027923  00000000  00000000  000340f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123d6  00000000  00000000  0005ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9950  00000000  00000000  0006ddee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dc0  00000000  00000000  00167740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0016b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004a2c 	.word	0x08004a2c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004a2c 	.word	0x08004a2c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x2c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <displayNumber>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t count;
extern void displayNumber(uint32_t count){
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b09f      	sub	sp, #124	; 0x7c
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	char buffer[100];
	snprintf(buffer, 100, "%.2d:%.2d\r\n", count/60, count%60);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <displayNumber+0x58>)
 8000628:	fba2 2303 	umull	r2, r3, r2, r3
 800062c:	095c      	lsrs	r4, r3, #5
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <displayNumber+0x58>)
 8000632:	fba3 2301 	umull	r2, r3, r3, r1
 8000636:	095a      	lsrs	r2, r3, #5
 8000638:	4613      	mov	r3, r2
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	1aca      	subs	r2, r1, r3
 8000642:	f107 000c 	add.w	r0, r7, #12
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	4623      	mov	r3, r4
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <displayNumber+0x5c>)
 800064c:	2164      	movs	r1, #100	; 0x64
 800064e:	f003 fd35 	bl	80040bc <sniprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) buffer, strlen(buffer), 100);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fdf2 	bl	8000240 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f107 010c 	add.w	r1, r7, #12
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <displayNumber+0x60>)
 8000668:	f002 fcd4 	bl	8003014 <HAL_UART_Transmit>
}
 800066c:	bf00      	nop
 800066e:	3774      	adds	r7, #116	; 0x74
 8000670:	46bd      	mov	sp, r7
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	88888889 	.word	0x88888889
 8000678:	08004a44 	.word	0x08004a44
 800067c:	20000118 	.word	0x20000118

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 faed 	bl	8000c62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f814 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f7ff ffae 	bl	80005ec <MX_GPIO_Init>
  MX_TIM1_Init();
 8000690:	f000 f944 	bl	800091c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000694:	f000 f996 	bl	80009c4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000698:	f000 fa22 	bl	8000ae0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <main+0x2c>)
 800069e:	f001 fff1 	bl	8002684 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <main+0x30>)
 80006a4:	f001 ffee 	bl	8002684 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x28>
 80006aa:	bf00      	nop
 80006ac:	20000080 	.word	0x20000080
 80006b0:	200000cc 	.word	0x200000cc

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fd2e 	bl	8004124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemClock_Config+0xd4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <SystemClock_Config+0xd4>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemClock_Config+0xd8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <SystemClock_Config+0xd8>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800071c:	2308      	movs	r3, #8
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000720:	23d8      	movs	r3, #216	; 0xd8
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fe91 	bl	800145c <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000740:	f000 f826 	bl	8000790 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000744:	f000 fe3a 	bl	80013bc <HAL_PWREx_EnableOverDrive>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074e:	f000 f81f 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2107      	movs	r1, #7
 8000770:	4618      	mov	r0, r3
 8000772:	f001 f921 	bl	80019b8 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800077c:	f000 f808 	bl	8000790 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x44>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_MspInit+0x44>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_MspInit+0x44>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_MspInit+0x44>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_MspInit+0x44>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_MspInit+0x44>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007d2:	2005      	movs	r0, #5
 80007d4:	f000 fb72 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <NMI_Handler+0x4>

080007ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <MemManage_Handler+0x4>

080007f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <UsageFault_Handler+0x4>

08000802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000830:	f000 fa54 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a03      	ldr	r2, [pc, #12]	; (8000850 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000844:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000848:	f001 ff94 	bl	8002774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000078 	.word	0x20000078
 8000854:	20000080 	.word	0x20000080

08000858 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	displayNumber(count);
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <TIM2_IRQHandler+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fedb 	bl	800061c <displayNumber>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <TIM2_IRQHandler+0x1c>)
 8000868:	f001 ff84 	bl	8002774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000078 	.word	0x20000078
 8000874:	200000cc 	.word	0x200000cc

08000878 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USART3_IRQHandler+0x10>)
 800087e:	f002 fc4d 	bl	800311c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000118 	.word	0x20000118

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f003 fc3a 	bl	8004134 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20080000 	.word	0x20080000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	2000007c 	.word	0x2000007c
 80008f4:	200002f0 	.word	0x200002f0

080008f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_TIM1_Init+0xa0>)
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <MX_TIM1_Init+0xa4>)
 800093e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000942:	f245 425f 	movw	r2, #21599	; 0x545f
 8000946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_TIM1_Init+0xa0>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000950:	f242 720f 	movw	r2, #9999	; 0x270f
 8000954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_TIM1_Init+0xa0>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_TIM1_Init+0xa0>)
 800096a:	f001 fe33 	bl	80025d4 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000974:	f7ff ff0c 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_TIM1_Init+0xa0>)
 8000986:	f002 f815 	bl	80029b4 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000990:	f7ff fefe 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_TIM1_Init+0xa0>)
 80009a6:	f002 fa3b 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009b0:	f7ff feee 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000080 	.word	0x20000080
 80009c0:	40010000 	.word	0x40010000

080009c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009ec:	226b      	movs	r2, #107	; 0x6b
 80009ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400000-1;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009f8:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <MX_TIM2_Init+0x98>)
 80009fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a0a:	f001 fde3 	bl	80025d4 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a14:	f7ff febc 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a26:	f001 ffc5 	bl	80029b4 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a30:	f7ff feae 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a42:	f002 f9ed 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f7ff fea0 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000cc 	.word	0x200000cc
 8000a5c:	00061a7f 	.word	0x00061a7f

08000a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_TIM_Base_MspInit+0x78>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d114      	bne.n	8000a9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 fa1f 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a94:	2019      	movs	r0, #25
 8000a96:	f000 fa38 	bl	8000f0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a9a:	e018      	b.n	8000ace <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa4:	d113      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	201c      	movs	r0, #28
 8000ac4:	f000 fa05 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ac8:	201c      	movs	r0, #28
 8000aca:	f000 fa1e 	bl	8000f0a <HAL_NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	40023800 	.word	0x40023800

08000ae0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MX_USART3_UART_Init+0x5c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b24:	f002 fa28 	bl	8002f78 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f7ff fe2f 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000118 	.word	0x20000118
 8000b3c:	40004800 	.word	0x40004800

08000b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ae      	sub	sp, #184	; 0xb8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2290      	movs	r2, #144	; 0x90
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fadf 	bl	8004124 <memset>
  if(uartHandle->Instance==USART3)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <HAL_UART_MspInit+0xc4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d144      	bne.n	8000bfa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f900 	bl	8001d84 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b8a:	f7ff fe01 	bl	8000790 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_UART_MspInit+0xc8>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <HAL_UART_MspInit+0xc8>)
 8000b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_UART_MspInit+0xc8>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_UART_MspInit+0xc8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_UART_MspInit+0xc8>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_UART_MspInit+0xc8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <HAL_UART_MspInit+0xcc>)
 8000be6:	f000 fa3d 	bl	8001064 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2027      	movs	r0, #39	; 0x27
 8000bf0:	f000 f96f 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bf4:	2027      	movs	r0, #39	; 0x27
 8000bf6:	f000 f988 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	37b8      	adds	r7, #184	; 0xb8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40004800 	.word	0x40004800
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020c00 	.word	0x40020c00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff fe5d 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f003 fa7f 	bl	8004140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fd1d 	bl	8000680 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c54:	08004aac 	.word	0x08004aac
  ldr r2, =_sbss
 8000c58:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c5c:	200002ec 	.word	0x200002ec

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>

08000c62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c66:	2003      	movs	r0, #3
 8000c68:	f000 f928 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 f805 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c72:	f7ff fd93 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f943 	bl	8000f26 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f90b 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200001a0 	.word	0x200001a0

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200001a0 	.word	0x200001a0

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <__NVIC_SetPriorityGrouping+0x40>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x40>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	05fa0000 	.word	0x05fa0000

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff3e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff31 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff feda 	bl	8000d04 <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d008      	beq.n	8000f70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e052      	b.n	8001016 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0216 	bic.w	r2, r2, #22
 8000f7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d103      	bne.n	8000fa0 <HAL_DMA_Abort+0x62>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0208 	bic.w	r2, r2, #8
 8000fae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc0:	e013      	b.n	8000fea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fc2:	f7ff fe9f 	bl	8000d04 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d90c      	bls.n	8000fea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e015      	b.n	8001016 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e4      	bne.n	8000fc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ffc:	223f      	movs	r2, #63	; 0x3f
 8000ffe:	409a      	lsls	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d004      	beq.n	800103c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e00c      	b.n	8001056 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2205      	movs	r2, #5
 8001040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e175      	b.n	8001370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8164 	bne.w	800136a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x56>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80be 	beq.w	800136a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b66      	ldr	r3, [pc, #408]	; (8001388 <HAL_GPIO_Init+0x324>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a65      	ldr	r2, [pc, #404]	; (8001388 <HAL_GPIO_Init+0x324>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_GPIO_Init+0x324>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001206:	4a61      	ldr	r2, [pc, #388]	; (800138c <HAL_GPIO_Init+0x328>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <HAL_GPIO_Init+0x32c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d037      	beq.n	80012a2 <HAL_GPIO_Init+0x23e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a57      	ldr	r2, [pc, #348]	; (8001394 <HAL_GPIO_Init+0x330>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d031      	beq.n	800129e <HAL_GPIO_Init+0x23a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a56      	ldr	r2, [pc, #344]	; (8001398 <HAL_GPIO_Init+0x334>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d02b      	beq.n	800129a <HAL_GPIO_Init+0x236>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a55      	ldr	r2, [pc, #340]	; (800139c <HAL_GPIO_Init+0x338>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x232>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a54      	ldr	r2, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x33c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x22e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a53      	ldr	r2, [pc, #332]	; (80013a4 <HAL_GPIO_Init+0x340>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x22a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a52      	ldr	r2, [pc, #328]	; (80013a8 <HAL_GPIO_Init+0x344>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x226>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a51      	ldr	r2, [pc, #324]	; (80013ac <HAL_GPIO_Init+0x348>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x222>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a50      	ldr	r2, [pc, #320]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x21e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <HAL_GPIO_Init+0x350>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x21a>
 800127a:	2309      	movs	r3, #9
 800127c:	e012      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800127e:	230a      	movs	r3, #10
 8001280:	e010      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 8001282:	2308      	movs	r3, #8
 8001284:	e00e      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 8001286:	2307      	movs	r3, #7
 8001288:	e00c      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800128a:	2306      	movs	r3, #6
 800128c:	e00a      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800128e:	2305      	movs	r3, #5
 8001290:	e008      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 8001292:	2304      	movs	r3, #4
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 8001296:	2303      	movs	r3, #3
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 80012a2:	2300      	movs	r3, #0
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	f002 0203 	and.w	r2, r2, #3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4093      	lsls	r3, r2
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012b4:	4935      	ldr	r1, [pc, #212]	; (800138c <HAL_GPIO_Init+0x328>)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <HAL_GPIO_Init+0x354>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e6:	4a34      	ldr	r2, [pc, #208]	; (80013b8 <HAL_GPIO_Init+0x354>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_GPIO_Init+0x354>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001310:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <HAL_GPIO_Init+0x354>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_GPIO_Init+0x354>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <HAL_GPIO_Init+0x354>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_GPIO_Init+0x354>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_GPIO_Init+0x354>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	f67f ae86 	bls.w	8001084 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40013800 	.word	0x40013800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40020800 	.word	0x40020800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40021400 	.word	0x40021400
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40021c00 	.word	0x40021c00
 80013b0:	40022000 	.word	0x40022000
 80013b4:	40022400 	.word	0x40022400
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_PWREx_EnableOverDrive+0x98>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a22      	ldr	r2, [pc, #136]	; (8001454 <HAL_PWREx_EnableOverDrive+0x98>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_PWREx_EnableOverDrive+0x98>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ea:	f7ff fc8b 	bl	8000d04 <HAL_GetTick>
 80013ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013f0:	e009      	b.n	8001406 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013f2:	f7ff fc87 	bl	8000d04 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001400:	d901      	bls.n	8001406 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e022      	b.n	800144c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001412:	d1ee      	bne.n	80013f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_PWREx_EnableOverDrive+0x9c>)
 800141a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff fc70 	bl	8000d04 <HAL_GetTick>
 8001424:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001426:	e009      	b.n	800143c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001428:	f7ff fc6c 	bl	8000d04 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001436:	d901      	bls.n	800143c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e007      	b.n	800144c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_PWREx_EnableOverDrive+0x9c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001448:	d1ee      	bne.n	8001428 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000

0800145c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e29b      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8087 	beq.w	800158e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001480:	4b96      	ldr	r3, [pc, #600]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b04      	cmp	r3, #4
 800148a:	d00c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148c:	4b93      	ldr	r3, [pc, #588]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0x62>
 8001498:	4b90      	ldr	r3, [pc, #576]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4b8d      	ldr	r3, [pc, #564]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d06c      	beq.n	800158c <HAL_RCC_OscConfig+0x130>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d168      	bne.n	800158c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e275      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x7a>
 80014c8:	4b84      	ldr	r3, [pc, #528]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a83      	ldr	r2, [pc, #524]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e02e      	b.n	8001534 <HAL_RCC_OscConfig+0xd8>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x9c>
 80014de:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7e      	ldr	r2, [pc, #504]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b7c      	ldr	r3, [pc, #496]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a7b      	ldr	r2, [pc, #492]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xd8>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0xc0>
 8001502:	4b76      	ldr	r3, [pc, #472]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a75      	ldr	r2, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b73      	ldr	r3, [pc, #460]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a72      	ldr	r2, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xd8>
 800151c:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b6c      	ldr	r3, [pc, #432]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a6b      	ldr	r2, [pc, #428]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbe2 	bl	8000d04 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fbde 	bl	8000d04 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e229      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b61      	ldr	r3, [pc, #388]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xe8>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbce 	bl	8000d04 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fbca 	bl	8000d04 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e215      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b57      	ldr	r3, [pc, #348]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x110>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d069      	beq.n	800166e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159a:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b4d      	ldr	r3, [pc, #308]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x190>
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x17a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1e9      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	493d      	ldr	r1, [pc, #244]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e040      	b.n	800166e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d023      	beq.n	800163c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a38      	ldr	r2, [pc, #224]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fb80 	bl	8000d04 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fb7c 	bl	8000d04 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1c7      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4929      	ldr	r1, [pc, #164]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
 800163a:	e018      	b.n	800166e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fb5c 	bl	8000d04 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff fb58 	bl	8000d04 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1a3      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d038      	beq.n	80016ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d019      	beq.n	80016b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fb39 	bl	8000d04 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff fb35 	bl	8000d04 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e180      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80016aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x23a>
 80016b4:	e01a      	b.n	80016ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80016b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb1f 	bl	8000d04 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff fb1b 	bl	8000d04 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d903      	bls.n	80016e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e166      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
 80016dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b92      	ldr	r3, [pc, #584]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ee      	bne.n	80016ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a4 	beq.w	8001842 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a88      	ldr	r2, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b86      	ldr	r3, [pc, #536]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001722:	4b83      	ldr	r3, [pc, #524]	; (8001930 <HAL_RCC_OscConfig+0x4d4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800172e:	4b80      	ldr	r3, [pc, #512]	; (8001930 <HAL_RCC_OscConfig+0x4d4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7f      	ldr	r2, [pc, #508]	; (8001930 <HAL_RCC_OscConfig+0x4d4>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff fae3 	bl	8000d04 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff fadf 	bl	8000d04 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	; 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e12a      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001754:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x4d4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x31a>
 8001768:	4b70      	ldr	r3, [pc, #448]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a6f      	ldr	r2, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	e02d      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x33c>
 800177e:	4b6b      	ldr	r3, [pc, #428]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a6a      	ldr	r2, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
 800178a:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a67      	ldr	r2, [pc, #412]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	e01c      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d10c      	bne.n	80017ba <HAL_RCC_OscConfig+0x35e>
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a61      	ldr	r2, [pc, #388]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
 80017ac:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a5e      	ldr	r2, [pc, #376]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
 80017b8:	e00b      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a5b      	ldr	r2, [pc, #364]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a58      	ldr	r2, [pc, #352]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d015      	beq.n	8001806 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017da:	f7ff fa93 	bl	8000d04 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fa8f 	bl	8000d04 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0d8      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	4b4c      	ldr	r3, [pc, #304]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ee      	beq.n	80017e2 <HAL_RCC_OscConfig+0x386>
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fa7d 	bl	8000d04 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff fa79 	bl	8000d04 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0c2      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ee      	bne.n	800180e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a3c      	ldr	r2, [pc, #240]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 800183c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80ae 	beq.w	80019a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184c:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d06d      	beq.n	8001934 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d14b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a31      	ldr	r2, [pc, #196]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fa4a 	bl	8000d04 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fa46 	bl	8000d04 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e091      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	071b      	lsls	r3, r3, #28
 80018be:	491b      	ldr	r1, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa18 	bl	8000d04 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fa14 	bl	8000d04 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e05f      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x47c>
 80018f6:	e057      	b.n	80019a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f9fe 	bl	8000d04 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f9fa 	bl	8000d04 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e045      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x4b0>
 800192a:	e03d      	b.n	80019a8 <HAL_RCC_OscConfig+0x54c>
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_RCC_OscConfig+0x558>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d030      	beq.n	80019a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d129      	bne.n	80019a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d122      	bne.n	80019a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800196a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800196c:	4293      	cmp	r3, r2
 800196e:	d119      	bne.n	80019a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	3b01      	subs	r3, #1
 800197e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d10f      	bne.n	80019a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0d0      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d910      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b67      	ldr	r3, [pc, #412]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	4965      	ldr	r1, [pc, #404]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0b8      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a18:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	494d      	ldr	r1, [pc, #308]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d040      	beq.n	8001adc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d115      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e07f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e073      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e06b      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4936      	ldr	r1, [pc, #216]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aac:	f7ff f92a 	bl	8000d04 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff f926 	bl	8000d04 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e053      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d210      	bcs.n	8001b0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 020f 	bic.w	r2, r3, #15
 8001af2:	4922      	ldr	r1, [pc, #136]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e032      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4916      	ldr	r1, [pc, #88]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	490e      	ldr	r1, [pc, #56]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b4a:	f000 f821 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	490a      	ldr	r1, [pc, #40]	; (8001b84 <HAL_RCC_ClockConfig+0x1cc>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_RCC_ClockConfig+0x1d0>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1d4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f886 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08004a50 	.word	0x08004a50
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b94:	b090      	sub	sp, #64	; 0x40
 8001b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	f200 80a1 	bhi.w	8001cfc <HAL_RCC_GetSysClockFreq+0x16c>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x3a>
 8001bc2:	e09b      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bc8:	e09b      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bce:	e098      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d028      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	2200      	movs	r2, #0
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfc:	fb03 f201 	mul.w	r2, r3, r1
 8001c00:	2300      	movs	r3, #0
 8001c02:	fb00 f303 	mul.w	r3, r0, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	4a43      	ldr	r2, [pc, #268]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c10:	460a      	mov	r2, r1
 8001c12:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	4413      	add	r3, r2
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	61fa      	str	r2, [r7, #28]
 8001c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c2a:	f7fe fb61 	bl	80002f0 <__aeabi_uldivmod>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4613      	mov	r3, r2
 8001c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c36:	e053      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	2200      	movs	r2, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	617a      	str	r2, [r7, #20]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c4a:	f04f 0b00 	mov.w	fp, #0
 8001c4e:	4652      	mov	r2, sl
 8001c50:	465b      	mov	r3, fp
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	f04f 0100 	mov.w	r1, #0
 8001c5a:	0159      	lsls	r1, r3, #5
 8001c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c60:	0150      	lsls	r0, r2, #5
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	ebb2 080a 	subs.w	r8, r2, sl
 8001c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c82:	ebb2 0408 	subs.w	r4, r2, r8
 8001c86:	eb63 0509 	sbc.w	r5, r3, r9
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	00eb      	lsls	r3, r5, #3
 8001c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c98:	00e2      	lsls	r2, r4, #3
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	eb14 030a 	adds.w	r3, r4, sl
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	eb45 030b 	adc.w	r3, r5, fp
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	028b      	lsls	r3, r1, #10
 8001cba:	4621      	mov	r1, r4
 8001cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	028a      	lsls	r2, r1, #10
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	60fa      	str	r2, [r7, #12]
 8001cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cd4:	f7fe fb0c 	bl	80002f0 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	3301      	adds	r3, #1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cfa:	e002      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3740      	adds	r7, #64	; 0x40
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	017d7840 	.word	0x017d7840

08001d1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08004a60 	.word	0x08004a60

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d60:	f7ff ffdc 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0b5b      	lsrs	r3, r3, #13
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08004a60 	.word	0x08004a60

08001d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dac:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a68      	ldr	r2, [pc, #416]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001db6:	6093      	str	r3, [r2, #8]
 8001db8:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	4964      	ldr	r1, [pc, #400]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d017      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	4959      	ldr	r1, [pc, #356]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d017      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e1a:	4b4e      	ldr	r3, [pc, #312]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	494a      	ldr	r1, [pc, #296]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e38:	d101      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 808b 	beq.w	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a39      	ldr	r2, [pc, #228]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
 8001e74:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a34      	ldr	r2, [pc, #208]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e8c:	f7fe ff3a 	bl	8000d04 <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7fe ff36 	bl	8000d04 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e38f      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d035      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d02e      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ef2:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d114      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe fefe 	bl	8000d04 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fefa 	bl	8000d04 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e351      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ee      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f3a:	d111      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	4901      	ldr	r1, [pc, #4]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	0ffffcff 	.word	0x0ffffcff
 8001f60:	4bac      	ldr	r3, [pc, #688]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4aab      	ldr	r2, [pc, #684]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f6a:	6093      	str	r3, [r2, #8]
 8001f6c:	4ba9      	ldr	r3, [pc, #676]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f78:	49a6      	ldr	r1, [pc, #664]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d010      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f8a:	4ba2      	ldr	r3, [pc, #648]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f90:	4aa0      	ldr	r2, [pc, #640]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f9a:	4b9e      	ldr	r3, [pc, #632]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	499b      	ldr	r1, [pc, #620]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb8:	4b96      	ldr	r3, [pc, #600]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc6:	4993      	ldr	r1, [pc, #588]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fda:	4b8e      	ldr	r3, [pc, #568]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe8:	498a      	ldr	r1, [pc, #552]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ffc:	4b85      	ldr	r3, [pc, #532]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200a:	4982      	ldr	r1, [pc, #520]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800201e:	4b7d      	ldr	r3, [pc, #500]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4979      	ldr	r1, [pc, #484]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002040:	4b74      	ldr	r3, [pc, #464]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4971      	ldr	r1, [pc, #452]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002062:	4b6c      	ldr	r3, [pc, #432]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	f023 020c 	bic.w	r2, r3, #12
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002070:	4968      	ldr	r1, [pc, #416]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002084:	4b63      	ldr	r3, [pc, #396]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	4960      	ldr	r1, [pc, #384]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020a6:	4b5b      	ldr	r3, [pc, #364]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b4:	4957      	ldr	r1, [pc, #348]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020c8:	4b52      	ldr	r3, [pc, #328]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	494f      	ldr	r1, [pc, #316]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	4946      	ldr	r1, [pc, #280]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800210c:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211a:	493e      	ldr	r1, [pc, #248]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800212e:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213c:	4935      	ldr	r1, [pc, #212]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800215e:	492d      	ldr	r1, [pc, #180]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d011      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002172:	4b28      	ldr	r3, [pc, #160]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002180:	4924      	ldr	r1, [pc, #144]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002190:	d101      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	4914      	ldr	r1, [pc, #80]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00b      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e4:	490b      	ldr	r1, [pc, #44]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00f      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002208:	4902      	ldr	r1, [pc, #8]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002210:	e002      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002224:	4b8a      	ldr	r3, [pc, #552]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	4986      	ldr	r1, [pc, #536]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002248:	4b81      	ldr	r3, [pc, #516]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002258:	497d      	ldr	r1, [pc, #500]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d006      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80d6 	beq.w	8002420 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002274:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a75      	ldr	r2, [pc, #468]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800227e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002280:	f7fe fd40 	bl	8000d04 <HAL_GetTick>
 8002284:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002288:	f7fe fd3c 	bl	8000d04 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e195      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800229a:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d021      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d11d      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022c8:	4b61      	ldr	r3, [pc, #388]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ce:	0e1b      	lsrs	r3, r3, #24
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	019a      	lsls	r2, r3, #6
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	071b      	lsls	r3, r3, #28
 80022ee:	4958      	ldr	r1, [pc, #352]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002314:	2b00      	cmp	r3, #0
 8002316:	d02e      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002320:	d129      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002322:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002336:	0f1b      	lsrs	r3, r3, #28
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	019a      	lsls	r2, r3, #6
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	061b      	lsls	r3, r3, #24
 8002350:	431a      	orrs	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	071b      	lsls	r3, r3, #28
 8002356:	493e      	ldr	r1, [pc, #248]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002364:	f023 021f 	bic.w	r2, r3, #31
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	3b01      	subs	r3, #1
 800236e:	4938      	ldr	r1, [pc, #224]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01d      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002382:	4b33      	ldr	r3, [pc, #204]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002388:	0e1b      	lsrs	r3, r3, #24
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002390:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002396:	0f1b      	lsrs	r3, r3, #28
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	019a      	lsls	r2, r3, #6
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	431a      	orrs	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	061b      	lsls	r3, r3, #24
 80023b0:	431a      	orrs	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	071b      	lsls	r3, r3, #28
 80023b6:	4926      	ldr	r1, [pc, #152]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d011      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	019a      	lsls	r2, r3, #6
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	071b      	lsls	r3, r3, #28
 80023e6:	491a      	ldr	r1, [pc, #104]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fa:	f7fe fc83 	bl	8000d04 <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002402:	f7fe fc7f 	bl	8000d04 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b64      	cmp	r3, #100	; 0x64
 800240e:	d901      	bls.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0d8      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b01      	cmp	r3, #1
 8002424:	f040 80ce 	bne.w	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002434:	f7fe fc66 	bl	8000d04 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800243a:	e00b      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800243c:	f7fe fc62 	bl	8000d04 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d904      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0bb      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002454:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800245c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002460:	d0ec      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800247e:	2b00      	cmp	r3, #0
 8002480:	d02e      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d12a      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800248a:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002498:	4b4d      	ldr	r3, [pc, #308]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	0f1b      	lsrs	r3, r3, #28
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	019a      	lsls	r2, r3, #6
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	071b      	lsls	r3, r3, #28
 80024be:	4944      	ldr	r1, [pc, #272]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024c6:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	3b01      	subs	r3, #1
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	493d      	ldr	r1, [pc, #244]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d022      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f4:	d11d      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	0e1b      	lsrs	r3, r3, #24
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002504:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	0f1b      	lsrs	r3, r3, #28
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	019a      	lsls	r2, r3, #6
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	4929      	ldr	r1, [pc, #164]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d028      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002544:	0e1b      	lsrs	r3, r3, #24
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	0c1b      	lsrs	r3, r3, #16
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	019a      	lsls	r2, r3, #6
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	431a      	orrs	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	071b      	lsls	r3, r3, #28
 8002572:	4917      	ldr	r1, [pc, #92]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800257c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	4911      	ldr	r1, [pc, #68]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259c:	f7fe fbb2 	bl	8000d04 <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025a4:	f7fe fbae 	bl	8000d04 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e007      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c2:	d1ef      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e049      	b.n	800267a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fa30 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f000 faca 	bl	8002bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d001      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e054      	b.n	8002746 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a26      	ldr	r2, [pc, #152]	; (8002754 <HAL_TIM_Base_Start_IT+0xd0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d022      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d01d      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a22      	ldr	r2, [pc, #136]	; (8002758 <HAL_TIM_Base_Start_IT+0xd4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d018      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a21      	ldr	r2, [pc, #132]	; (800275c <HAL_TIM_Base_Start_IT+0xd8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <HAL_TIM_Base_Start_IT+0xdc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00e      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <HAL_TIM_Base_Start_IT+0xe0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d009      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <HAL_TIM_Base_Start_IT+0xe4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x80>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <HAL_TIM_Base_Start_IT+0xe8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d115      	bne.n	8002730 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_TIM_Base_Start_IT+0xec>)
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d015      	beq.n	8002742 <HAL_TIM_Base_Start_IT+0xbe>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271c:	d011      	beq.n	8002742 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272e:	e008      	b.n	8002742 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e000      	b.n	8002744 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40000400 	.word	0x40000400
 800275c:	40000800 	.word	0x40000800
 8002760:	40000c00 	.word	0x40000c00
 8002764:	40010400 	.word	0x40010400
 8002768:	40014000 	.word	0x40014000
 800276c:	40001800 	.word	0x40001800
 8002770:	00010007 	.word	0x00010007

08002774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d122      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d11b      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0202 	mvn.w	r2, #2
 80027a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f9da 	bl	8002b70 <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f9cc 	bl	8002b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f9dd 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d122      	bne.n	8002824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d11b      	bne.n	8002824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0204 	mvn.w	r2, #4
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f9b0 	bl	8002b70 <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f9a2 	bl	8002b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9b3 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b08      	cmp	r3, #8
 8002830:	d122      	bne.n	8002878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b08      	cmp	r3, #8
 800283e:	d11b      	bne.n	8002878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0208 	mvn.w	r2, #8
 8002848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2204      	movs	r2, #4
 800284e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f986 	bl	8002b70 <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f978 	bl	8002b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f989 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b10      	cmp	r3, #16
 8002884:	d122      	bne.n	80028cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b10      	cmp	r3, #16
 8002892:	d11b      	bne.n	80028cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0210 	mvn.w	r2, #16
 800289c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2208      	movs	r2, #8
 80028a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f95c 	bl	8002b70 <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f94e 	bl	8002b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f95f 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d107      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0201 	mvn.w	r2, #1
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f928 	bl	8002b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d107      	bne.n	8002924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fb16 	bl	8002f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002932:	d10e      	bne.n	8002952 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d107      	bne.n	8002952 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800294a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fb09 	bl	8002f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	d10e      	bne.n	800297e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d107      	bne.n	800297e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f90d 	bl	8002b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b20      	cmp	r3, #32
 800298a:	d10e      	bne.n	80029aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b20      	cmp	r3, #32
 8002998:	d107      	bne.n	80029aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f06f 0220 	mvn.w	r2, #32
 80029a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fac9 	bl	8002f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_TIM_ConfigClockSource+0x1c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e0b4      	b.n	8002b3a <HAL_TIM_ConfigClockSource+0x186>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	4b56      	ldr	r3, [pc, #344]	; (8002b44 <HAL_TIM_ConfigClockSource+0x190>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a08:	d03e      	beq.n	8002a88 <HAL_TIM_ConfigClockSource+0xd4>
 8002a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0e:	f200 8087 	bhi.w	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a16:	f000 8086 	beq.w	8002b26 <HAL_TIM_ConfigClockSource+0x172>
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	d87f      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b70      	cmp	r3, #112	; 0x70
 8002a22:	d01a      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0xa6>
 8002a24:	2b70      	cmp	r3, #112	; 0x70
 8002a26:	d87b      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b60      	cmp	r3, #96	; 0x60
 8002a2a:	d050      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x11a>
 8002a2c:	2b60      	cmp	r3, #96	; 0x60
 8002a2e:	d877      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b50      	cmp	r3, #80	; 0x50
 8002a32:	d03c      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0xfa>
 8002a34:	2b50      	cmp	r3, #80	; 0x50
 8002a36:	d873      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d058      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x13a>
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d86f      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a40:	2b30      	cmp	r3, #48	; 0x30
 8002a42:	d064      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x15a>
 8002a44:	2b30      	cmp	r3, #48	; 0x30
 8002a46:	d86b      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d060      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x15a>
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d867      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05c      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x15a>
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d05a      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x15a>
 8002a58:	e062      	b.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a6a:	f000 f9b9 	bl	8002de0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	609a      	str	r2, [r3, #8]
      break;
 8002a86:	e04f      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a98:	f000 f9a2 	bl	8002de0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aaa:	609a      	str	r2, [r3, #8]
      break;
 8002aac:	e03c      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 f916 	bl	8002cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2150      	movs	r1, #80	; 0x50
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f96f 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002acc:	e02c      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ada:	461a      	mov	r2, r3
 8002adc:	f000 f935 	bl	8002d4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2160      	movs	r1, #96	; 0x60
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f95f 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002aec:	e01c      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afa:	461a      	mov	r2, r3
 8002afc:	f000 f8f6 	bl	8002cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2140      	movs	r1, #64	; 0x40
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f94f 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b0c:	e00c      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f000 f946 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b1e:	e003      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      break;
 8002b24:	e000      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	fffeff88 	.word	0xfffeff88

08002b48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a40      	ldr	r2, [pc, #256]	; (8002cc0 <TIM_Base_SetConfig+0x114>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bca:	d00f      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a3d      	ldr	r2, [pc, #244]	; (8002cc4 <TIM_Base_SetConfig+0x118>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00b      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <TIM_Base_SetConfig+0x11c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d007      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <TIM_Base_SetConfig+0x120>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3a      	ldr	r2, [pc, #232]	; (8002cd0 <TIM_Base_SetConfig+0x124>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a2f      	ldr	r2, [pc, #188]	; (8002cc0 <TIM_Base_SetConfig+0x114>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d02b      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d027      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a2c      	ldr	r2, [pc, #176]	; (8002cc4 <TIM_Base_SetConfig+0x118>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d023      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <TIM_Base_SetConfig+0x11c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01f      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a2a      	ldr	r2, [pc, #168]	; (8002ccc <TIM_Base_SetConfig+0x120>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01b      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <TIM_Base_SetConfig+0x124>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d017      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <TIM_Base_SetConfig+0x128>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <TIM_Base_SetConfig+0x12c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00f      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <TIM_Base_SetConfig+0x130>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <TIM_Base_SetConfig+0x134>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <TIM_Base_SetConfig+0x138>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a23      	ldr	r2, [pc, #140]	; (8002ce8 <TIM_Base_SetConfig+0x13c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d108      	bne.n	8002c70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <TIM_Base_SetConfig+0x114>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0xf8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <TIM_Base_SetConfig+0x124>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d103      	bne.n	8002cac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	615a      	str	r2, [r3, #20]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40000800 	.word	0x40000800
 8002ccc:	40000c00 	.word	0x40000c00
 8002cd0:	40010400 	.word	0x40010400
 8002cd4:	40014000 	.word	0x40014000
 8002cd8:	40014400 	.word	0x40014400
 8002cdc:	40014800 	.word	0x40014800
 8002ce0:	40001800 	.word	0x40001800
 8002ce4:	40001c00 	.word	0x40001c00
 8002ce8:	40002000 	.word	0x40002000

08002cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0201 	bic.w	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f023 030a 	bic.w	r3, r3, #10
 8002d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0210 	bic.w	r2, r3, #16
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	031b      	lsls	r3, r3, #12
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 0307 	orr.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	021a      	lsls	r2, r3, #8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e06d      	b.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2f      	ldr	r2, [pc, #188]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a20      	ldr	r2, [pc, #128]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d022      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d01d      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d018      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d013      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10c      	bne.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40010400 	.word	0x40010400
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	40000c00 	.word	0x40000c00
 8002f34:	40014000 	.word	0x40014000
 8002f38:	40001800 	.word	0x40001800

08002f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e040      	b.n	800300c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd fdd0 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	; 0x24
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fbc2 	bl	8003740 <UART_SetConfig>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e022      	b.n	800300c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fe1a 	bl	8003c08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fea1 	bl	8003d4c <UART_CheckIdleState>
 800300a:	4603      	mov	r3, r0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003028:	2b20      	cmp	r3, #32
 800302a:	d171      	bne.n	8003110 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_UART_Transmit+0x24>
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e06a      	b.n	8003112 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2221      	movs	r2, #33	; 0x21
 8003048:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800304a:	f7fd fe5b 	bl	8000d04 <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003068:	d108      	bne.n	800307c <HAL_UART_Transmit+0x68>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e003      	b.n	8003084 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003084:	e02c      	b.n	80030e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fea8 	bl	8003de6 <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e038      	b.n	8003112 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	3302      	adds	r3, #2
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e007      	b.n	80030ce <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1cc      	bne.n	8003086 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2140      	movs	r1, #64	; 0x40
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fe75 	bl	8003de6 <UART_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e005      	b.n	8003112 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b0ba      	sub	sp, #232	; 0xe8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003146:	f640 030f 	movw	r3, #2063	; 0x80f
 800314a:	4013      	ands	r3, r2
 800314c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d115      	bne.n	8003184 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00f      	beq.n	8003184 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d009      	beq.n	8003184 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 82ac 	beq.w	80036d2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
      }
      return;
 8003182:	e2a6      	b.n	80036d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8117 	beq.w	80033bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800318e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800319a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800319e:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_UART_IRQHandler+0x298>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 810a 	beq.w	80033bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d011      	beq.n	80031d8 <HAL_UART_IRQHandler+0xbc>
 80031b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2201      	movs	r2, #1
 80031c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d011      	beq.n	8003208 <HAL_UART_IRQHandler+0xec>
 80031e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00b      	beq.n	8003208 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2202      	movs	r2, #2
 80031f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fe:	f043 0204 	orr.w	r2, r3, #4
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d011      	beq.n	8003238 <HAL_UART_IRQHandler+0x11c>
 8003214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2204      	movs	r2, #4
 8003226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d017      	beq.n	8003274 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003254:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2208      	movs	r2, #8
 8003262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326a:	f043 0208 	orr.w	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327c:	2b00      	cmp	r3, #0
 800327e:	d012      	beq.n	80032a6 <HAL_UART_IRQHandler+0x18a>
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00c      	beq.n	80032a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8212 	beq.w	80036d6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d005      	beq.n	80032fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04f      	beq.n	800339e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fe37 	bl	8003f72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d141      	bne.n	8003396 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800332c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3308      	adds	r3, #8
 800333a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800333e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800334a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1d9      	bne.n	8003312 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003362:	2b00      	cmp	r3, #0
 8003364:	d013      	beq.n	800338e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <HAL_UART_IRQHandler+0x29c>)
 800336c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fe53 	bl	800101e <HAL_DMA_Abort_IT>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003388:	4610      	mov	r0, r2
 800338a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338c:	e00f      	b.n	80033ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f9b6 	bl	8003700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	e00b      	b.n	80033ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9b2 	bl	8003700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	e007      	b.n	80033ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f9ae 	bl	8003700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80033ac:	e193      	b.n	80036d6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ae:	bf00      	nop
    return;
 80033b0:	e191      	b.n	80036d6 <HAL_UART_IRQHandler+0x5ba>
 80033b2:	bf00      	nop
 80033b4:	04000120 	.word	0x04000120
 80033b8:	0800403b 	.word	0x0800403b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f040 814c 	bne.w	800365e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8145 	beq.w	800365e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 813e 	beq.w	800365e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	f040 80b6 	bne.w	8003566 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003406:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8165 	beq.w	80036da <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800341a:	429a      	cmp	r2, r3
 800341c:	f080 815d 	bcs.w	80036da <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003426:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003434:	f000 8086 	beq.w	8003544 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800344c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003466:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800346e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800347a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1da      	bne.n	8003438 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3308      	adds	r3, #8
 8003488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3308      	adds	r3, #8
 80034a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e1      	bne.n	8003482 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3308      	adds	r3, #8
 80034c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3308      	adds	r3, #8
 80034de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e3      	bne.n	80034be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	f023 0310 	bic.w	r3, r3, #16
 8003518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003526:	65bb      	str	r3, [r7, #88]	; 0x58
 8003528:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800352c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e4      	bne.n	8003504 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fcfd 	bl	8000f3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003556:	b29b      	uxth	r3, r3
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	b29b      	uxth	r3, r3
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8d8 	bl	8003714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003564:	e0b9      	b.n	80036da <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003572:	b29b      	uxth	r3, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80ab 	beq.w	80036de <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80a6 	beq.w	80036de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
 80035b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e4      	bne.n	8003592 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3308      	adds	r3, #8
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	623b      	str	r3, [r7, #32]
   return(result);
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3308      	adds	r3, #8
 80035e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035ec:	633a      	str	r2, [r7, #48]	; 0x30
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e3      	bne.n	80035c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	60fb      	str	r3, [r7, #12]
   return(result);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f023 0310 	bic.w	r3, r3, #16
 8003628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	617b      	str	r3, [r7, #20]
   return(result);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e4      	bne.n	8003614 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f85c 	bl	8003714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800365c:	e03f      	b.n	80036de <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800365e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00e      	beq.n	8003688 <HAL_UART_IRQHandler+0x56c>
 800366a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800367e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f853 	bl	800372c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003686:	e02d      	b.n	80036e4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01c      	beq.n	80036e2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
    }
    return;
 80036b0:	e017      	b.n	80036e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <HAL_UART_IRQHandler+0x5c8>
 80036be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fccb 	bl	8004066 <UART_EndTransmit_IT>
    return;
 80036d0:	e008      	b.n	80036e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80036d2:	bf00      	nop
 80036d4:	e006      	b.n	80036e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80036d6:	bf00      	nop
 80036d8:	e004      	b.n	80036e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80036e2:	bf00      	nop
  }

}
 80036e4:	37e8      	adds	r7, #232	; 0xe8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop

080036ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4ba6      	ldr	r3, [pc, #664]	; (8003a04 <UART_SetConfig+0x2c4>)
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	6979      	ldr	r1, [r7, #20]
 8003774:	430b      	orrs	r3, r1
 8003776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a94      	ldr	r2, [pc, #592]	; (8003a08 <UART_SetConfig+0x2c8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d120      	bne.n	80037fe <UART_SetConfig+0xbe>
 80037bc:	4b93      	ldr	r3, [pc, #588]	; (8003a0c <UART_SetConfig+0x2cc>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d816      	bhi.n	80037f8 <UART_SetConfig+0xb8>
 80037ca:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <UART_SetConfig+0x90>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037ed 	.word	0x080037ed
 80037d8:	080037e7 	.word	0x080037e7
 80037dc:	080037f3 	.word	0x080037f3
 80037e0:	2301      	movs	r3, #1
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e150      	b.n	8003a88 <UART_SetConfig+0x348>
 80037e6:	2302      	movs	r3, #2
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e14d      	b.n	8003a88 <UART_SetConfig+0x348>
 80037ec:	2304      	movs	r3, #4
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e14a      	b.n	8003a88 <UART_SetConfig+0x348>
 80037f2:	2308      	movs	r3, #8
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e147      	b.n	8003a88 <UART_SetConfig+0x348>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e144      	b.n	8003a88 <UART_SetConfig+0x348>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a83      	ldr	r2, [pc, #524]	; (8003a10 <UART_SetConfig+0x2d0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d132      	bne.n	800386e <UART_SetConfig+0x12e>
 8003808:	4b80      	ldr	r3, [pc, #512]	; (8003a0c <UART_SetConfig+0x2cc>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d828      	bhi.n	8003868 <UART_SetConfig+0x128>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <UART_SetConfig+0xdc>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003851 	.word	0x08003851
 8003820:	08003869 	.word	0x08003869
 8003824:	08003869 	.word	0x08003869
 8003828:	08003869 	.word	0x08003869
 800382c:	0800385d 	.word	0x0800385d
 8003830:	08003869 	.word	0x08003869
 8003834:	08003869 	.word	0x08003869
 8003838:	08003869 	.word	0x08003869
 800383c:	08003857 	.word	0x08003857
 8003840:	08003869 	.word	0x08003869
 8003844:	08003869 	.word	0x08003869
 8003848:	08003869 	.word	0x08003869
 800384c:	08003863 	.word	0x08003863
 8003850:	2300      	movs	r3, #0
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e118      	b.n	8003a88 <UART_SetConfig+0x348>
 8003856:	2302      	movs	r3, #2
 8003858:	77fb      	strb	r3, [r7, #31]
 800385a:	e115      	b.n	8003a88 <UART_SetConfig+0x348>
 800385c:	2304      	movs	r3, #4
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e112      	b.n	8003a88 <UART_SetConfig+0x348>
 8003862:	2308      	movs	r3, #8
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e10f      	b.n	8003a88 <UART_SetConfig+0x348>
 8003868:	2310      	movs	r3, #16
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e10c      	b.n	8003a88 <UART_SetConfig+0x348>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a68      	ldr	r2, [pc, #416]	; (8003a14 <UART_SetConfig+0x2d4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d120      	bne.n	80038ba <UART_SetConfig+0x17a>
 8003878:	4b64      	ldr	r3, [pc, #400]	; (8003a0c <UART_SetConfig+0x2cc>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003882:	2b30      	cmp	r3, #48	; 0x30
 8003884:	d013      	beq.n	80038ae <UART_SetConfig+0x16e>
 8003886:	2b30      	cmp	r3, #48	; 0x30
 8003888:	d814      	bhi.n	80038b4 <UART_SetConfig+0x174>
 800388a:	2b20      	cmp	r3, #32
 800388c:	d009      	beq.n	80038a2 <UART_SetConfig+0x162>
 800388e:	2b20      	cmp	r3, #32
 8003890:	d810      	bhi.n	80038b4 <UART_SetConfig+0x174>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <UART_SetConfig+0x15c>
 8003896:	2b10      	cmp	r3, #16
 8003898:	d006      	beq.n	80038a8 <UART_SetConfig+0x168>
 800389a:	e00b      	b.n	80038b4 <UART_SetConfig+0x174>
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e0f2      	b.n	8003a88 <UART_SetConfig+0x348>
 80038a2:	2302      	movs	r3, #2
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e0ef      	b.n	8003a88 <UART_SetConfig+0x348>
 80038a8:	2304      	movs	r3, #4
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e0ec      	b.n	8003a88 <UART_SetConfig+0x348>
 80038ae:	2308      	movs	r3, #8
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e0e9      	b.n	8003a88 <UART_SetConfig+0x348>
 80038b4:	2310      	movs	r3, #16
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e0e6      	b.n	8003a88 <UART_SetConfig+0x348>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a56      	ldr	r2, [pc, #344]	; (8003a18 <UART_SetConfig+0x2d8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d120      	bne.n	8003906 <UART_SetConfig+0x1c6>
 80038c4:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <UART_SetConfig+0x2cc>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038ce:	2bc0      	cmp	r3, #192	; 0xc0
 80038d0:	d013      	beq.n	80038fa <UART_SetConfig+0x1ba>
 80038d2:	2bc0      	cmp	r3, #192	; 0xc0
 80038d4:	d814      	bhi.n	8003900 <UART_SetConfig+0x1c0>
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d009      	beq.n	80038ee <UART_SetConfig+0x1ae>
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d810      	bhi.n	8003900 <UART_SetConfig+0x1c0>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <UART_SetConfig+0x1a8>
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d006      	beq.n	80038f4 <UART_SetConfig+0x1b4>
 80038e6:	e00b      	b.n	8003900 <UART_SetConfig+0x1c0>
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e0cc      	b.n	8003a88 <UART_SetConfig+0x348>
 80038ee:	2302      	movs	r3, #2
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e0c9      	b.n	8003a88 <UART_SetConfig+0x348>
 80038f4:	2304      	movs	r3, #4
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e0c6      	b.n	8003a88 <UART_SetConfig+0x348>
 80038fa:	2308      	movs	r3, #8
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e0c3      	b.n	8003a88 <UART_SetConfig+0x348>
 8003900:	2310      	movs	r3, #16
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e0c0      	b.n	8003a88 <UART_SetConfig+0x348>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a44      	ldr	r2, [pc, #272]	; (8003a1c <UART_SetConfig+0x2dc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d125      	bne.n	800395c <UART_SetConfig+0x21c>
 8003910:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <UART_SetConfig+0x2cc>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800391e:	d017      	beq.n	8003950 <UART_SetConfig+0x210>
 8003920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003924:	d817      	bhi.n	8003956 <UART_SetConfig+0x216>
 8003926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392a:	d00b      	beq.n	8003944 <UART_SetConfig+0x204>
 800392c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003930:	d811      	bhi.n	8003956 <UART_SetConfig+0x216>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <UART_SetConfig+0x1fe>
 8003936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393a:	d006      	beq.n	800394a <UART_SetConfig+0x20a>
 800393c:	e00b      	b.n	8003956 <UART_SetConfig+0x216>
 800393e:	2300      	movs	r3, #0
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e0a1      	b.n	8003a88 <UART_SetConfig+0x348>
 8003944:	2302      	movs	r3, #2
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e09e      	b.n	8003a88 <UART_SetConfig+0x348>
 800394a:	2304      	movs	r3, #4
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e09b      	b.n	8003a88 <UART_SetConfig+0x348>
 8003950:	2308      	movs	r3, #8
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e098      	b.n	8003a88 <UART_SetConfig+0x348>
 8003956:	2310      	movs	r3, #16
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e095      	b.n	8003a88 <UART_SetConfig+0x348>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2f      	ldr	r2, [pc, #188]	; (8003a20 <UART_SetConfig+0x2e0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d125      	bne.n	80039b2 <UART_SetConfig+0x272>
 8003966:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <UART_SetConfig+0x2cc>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003974:	d017      	beq.n	80039a6 <UART_SetConfig+0x266>
 8003976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397a:	d817      	bhi.n	80039ac <UART_SetConfig+0x26c>
 800397c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003980:	d00b      	beq.n	800399a <UART_SetConfig+0x25a>
 8003982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003986:	d811      	bhi.n	80039ac <UART_SetConfig+0x26c>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <UART_SetConfig+0x254>
 800398c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003990:	d006      	beq.n	80039a0 <UART_SetConfig+0x260>
 8003992:	e00b      	b.n	80039ac <UART_SetConfig+0x26c>
 8003994:	2301      	movs	r3, #1
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e076      	b.n	8003a88 <UART_SetConfig+0x348>
 800399a:	2302      	movs	r3, #2
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e073      	b.n	8003a88 <UART_SetConfig+0x348>
 80039a0:	2304      	movs	r3, #4
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e070      	b.n	8003a88 <UART_SetConfig+0x348>
 80039a6:	2308      	movs	r3, #8
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e06d      	b.n	8003a88 <UART_SetConfig+0x348>
 80039ac:	2310      	movs	r3, #16
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e06a      	b.n	8003a88 <UART_SetConfig+0x348>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <UART_SetConfig+0x2e4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d138      	bne.n	8003a2e <UART_SetConfig+0x2ee>
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <UART_SetConfig+0x2cc>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039ca:	d017      	beq.n	80039fc <UART_SetConfig+0x2bc>
 80039cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039d0:	d82a      	bhi.n	8003a28 <UART_SetConfig+0x2e8>
 80039d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d6:	d00b      	beq.n	80039f0 <UART_SetConfig+0x2b0>
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039dc:	d824      	bhi.n	8003a28 <UART_SetConfig+0x2e8>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <UART_SetConfig+0x2aa>
 80039e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e6:	d006      	beq.n	80039f6 <UART_SetConfig+0x2b6>
 80039e8:	e01e      	b.n	8003a28 <UART_SetConfig+0x2e8>
 80039ea:	2300      	movs	r3, #0
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e04b      	b.n	8003a88 <UART_SetConfig+0x348>
 80039f0:	2302      	movs	r3, #2
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e048      	b.n	8003a88 <UART_SetConfig+0x348>
 80039f6:	2304      	movs	r3, #4
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e045      	b.n	8003a88 <UART_SetConfig+0x348>
 80039fc:	2308      	movs	r3, #8
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e042      	b.n	8003a88 <UART_SetConfig+0x348>
 8003a02:	bf00      	nop
 8003a04:	efff69f3 	.word	0xefff69f3
 8003a08:	40011000 	.word	0x40011000
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40004400 	.word	0x40004400
 8003a14:	40004800 	.word	0x40004800
 8003a18:	40004c00 	.word	0x40004c00
 8003a1c:	40005000 	.word	0x40005000
 8003a20:	40011400 	.word	0x40011400
 8003a24:	40007800 	.word	0x40007800
 8003a28:	2310      	movs	r3, #16
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e02c      	b.n	8003a88 <UART_SetConfig+0x348>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a72      	ldr	r2, [pc, #456]	; (8003bfc <UART_SetConfig+0x4bc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d125      	bne.n	8003a84 <UART_SetConfig+0x344>
 8003a38:	4b71      	ldr	r3, [pc, #452]	; (8003c00 <UART_SetConfig+0x4c0>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a46:	d017      	beq.n	8003a78 <UART_SetConfig+0x338>
 8003a48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a4c:	d817      	bhi.n	8003a7e <UART_SetConfig+0x33e>
 8003a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a52:	d00b      	beq.n	8003a6c <UART_SetConfig+0x32c>
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d811      	bhi.n	8003a7e <UART_SetConfig+0x33e>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <UART_SetConfig+0x326>
 8003a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a62:	d006      	beq.n	8003a72 <UART_SetConfig+0x332>
 8003a64:	e00b      	b.n	8003a7e <UART_SetConfig+0x33e>
 8003a66:	2300      	movs	r3, #0
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e00d      	b.n	8003a88 <UART_SetConfig+0x348>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e00a      	b.n	8003a88 <UART_SetConfig+0x348>
 8003a72:	2304      	movs	r3, #4
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e007      	b.n	8003a88 <UART_SetConfig+0x348>
 8003a78:	2308      	movs	r3, #8
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e004      	b.n	8003a88 <UART_SetConfig+0x348>
 8003a7e:	2310      	movs	r3, #16
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e001      	b.n	8003a88 <UART_SetConfig+0x348>
 8003a84:	2310      	movs	r3, #16
 8003a86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a90:	d15b      	bne.n	8003b4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a92:	7ffb      	ldrb	r3, [r7, #31]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d828      	bhi.n	8003aea <UART_SetConfig+0x3aa>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0x360>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ac5 	.word	0x08003ac5
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003ad5 	.word	0x08003ad5
 8003aac:	08003aeb 	.word	0x08003aeb
 8003ab0:	08003adb 	.word	0x08003adb
 8003ab4:	08003aeb 	.word	0x08003aeb
 8003ab8:	08003aeb 	.word	0x08003aeb
 8003abc:	08003aeb 	.word	0x08003aeb
 8003ac0:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac4:	f7fe f936 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8003ac8:	61b8      	str	r0, [r7, #24]
        break;
 8003aca:	e013      	b.n	8003af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003acc:	f7fe f946 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8003ad0:	61b8      	str	r0, [r7, #24]
        break;
 8003ad2:	e00f      	b.n	8003af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <UART_SetConfig+0x4c4>)
 8003ad6:	61bb      	str	r3, [r7, #24]
        break;
 8003ad8:	e00c      	b.n	8003af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7fe f859 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8003ade:	61b8      	str	r0, [r7, #24]
        break;
 8003ae0:	e008      	b.n	8003af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	61bb      	str	r3, [r7, #24]
        break;
 8003ae8:	e004      	b.n	8003af4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	77bb      	strb	r3, [r7, #30]
        break;
 8003af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d074      	beq.n	8003be4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	005a      	lsls	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	441a      	add	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d916      	bls.n	8003b44 <UART_SetConfig+0x404>
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d212      	bcs.n	8003b44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f023 030f 	bic.w	r3, r3, #15
 8003b26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	89fb      	ldrh	r3, [r7, #14]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	89fa      	ldrh	r2, [r7, #14]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e04f      	b.n	8003be4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	77bb      	strb	r3, [r7, #30]
 8003b48:	e04c      	b.n	8003be4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d828      	bhi.n	8003ba2 <UART_SetConfig+0x462>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <UART_SetConfig+0x418>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b8d 	.word	0x08003b8d
 8003b64:	08003ba3 	.word	0x08003ba3
 8003b68:	08003b93 	.word	0x08003b93
 8003b6c:	08003ba3 	.word	0x08003ba3
 8003b70:	08003ba3 	.word	0x08003ba3
 8003b74:	08003ba3 	.word	0x08003ba3
 8003b78:	08003b9b 	.word	0x08003b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b7c:	f7fe f8da 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8003b80:	61b8      	str	r0, [r7, #24]
        break;
 8003b82:	e013      	b.n	8003bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b84:	f7fe f8ea 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8003b88:	61b8      	str	r0, [r7, #24]
        break;
 8003b8a:	e00f      	b.n	8003bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <UART_SetConfig+0x4c4>)
 8003b8e:	61bb      	str	r3, [r7, #24]
        break;
 8003b90:	e00c      	b.n	8003bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b92:	f7fd fffd 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8003b96:	61b8      	str	r0, [r7, #24]
        break;
 8003b98:	e008      	b.n	8003bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ba0:	e004      	b.n	8003bac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8003baa:	bf00      	nop
    }

    if (pclk != 0U)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	085a      	lsrs	r2, r3, #1
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b0f      	cmp	r3, #15
 8003bca:	d909      	bls.n	8003be0 <UART_SetConfig+0x4a0>
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd2:	d205      	bcs.n	8003be0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	e001      	b.n	8003be4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40007c00 	.word	0x40007c00
 8003c00:	40023800 	.word	0x40023800
 8003c04:	00f42400 	.word	0x00f42400

08003c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01a      	beq.n	8003d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d06:	d10a      	bne.n	8003d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
  }
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d5c:	f7fc ffd2 	bl	8000d04 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d10e      	bne.n	8003d8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f831 	bl	8003de6 <UART_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e027      	b.n	8003dde <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d10e      	bne.n	8003dba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f81b 	bl	8003de6 <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e011      	b.n	8003dde <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b09c      	sub	sp, #112	; 0x70
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df6:	e0a7      	b.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	f000 80a3 	beq.w	8003f48 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fc ff7f 	bl	8000d04 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d13f      	bne.n	8003e98 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e6      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	663b      	str	r3, [r7, #96]	; 0x60
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e068      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d050      	beq.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb4:	d148      	bne.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ebe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e6      	bne.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	613b      	str	r3, [r7, #16]
   return(result);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f12:	623a      	str	r2, [r7, #32]
 8003f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	69f9      	ldr	r1, [r7, #28]
 8003f18:	6a3a      	ldr	r2, [r7, #32]
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e5      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e010      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4013      	ands	r3, r2
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	f43f af48 	beq.w	8003df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3770      	adds	r7, #112	; 0x70
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b095      	sub	sp, #84	; 0x54
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f98:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e6      	bne.n	8003f7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d118      	bne.n	800401a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f023 0310 	bic.w	r3, r3, #16
 8003ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6979      	ldr	r1, [r7, #20]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	613b      	str	r3, [r7, #16]
   return(result);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e6      	bne.n	8003fe8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800402e:	bf00      	nop
 8004030:	3754      	adds	r7, #84	; 0x54
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f7ff fb51 	bl	8003700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b088      	sub	sp, #32
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	60bb      	str	r3, [r7, #8]
   return(result);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	613b      	str	r3, [r7, #16]
   return(result);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff fb1d 	bl	80036ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b2:	bf00      	nop
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <sniprintf>:
 80040bc:	b40c      	push	{r2, r3}
 80040be:	b530      	push	{r4, r5, lr}
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <sniprintf+0x64>)
 80040c2:	1e0c      	subs	r4, r1, #0
 80040c4:	681d      	ldr	r5, [r3, #0]
 80040c6:	b09d      	sub	sp, #116	; 0x74
 80040c8:	da08      	bge.n	80040dc <sniprintf+0x20>
 80040ca:	238b      	movs	r3, #139	; 0x8b
 80040cc:	602b      	str	r3, [r5, #0]
 80040ce:	f04f 30ff 	mov.w	r0, #4294967295
 80040d2:	b01d      	add	sp, #116	; 0x74
 80040d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040d8:	b002      	add	sp, #8
 80040da:	4770      	bx	lr
 80040dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80040e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80040e4:	bf14      	ite	ne
 80040e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040ea:	4623      	moveq	r3, r4
 80040ec:	9304      	str	r3, [sp, #16]
 80040ee:	9307      	str	r3, [sp, #28]
 80040f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040f4:	9002      	str	r0, [sp, #8]
 80040f6:	9006      	str	r0, [sp, #24]
 80040f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80040fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040fe:	ab21      	add	r3, sp, #132	; 0x84
 8004100:	a902      	add	r1, sp, #8
 8004102:	4628      	mov	r0, r5
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	f000 f993 	bl	8004430 <_svfiprintf_r>
 800410a:	1c43      	adds	r3, r0, #1
 800410c:	bfbc      	itt	lt
 800410e:	238b      	movlt	r3, #139	; 0x8b
 8004110:	602b      	strlt	r3, [r5, #0]
 8004112:	2c00      	cmp	r4, #0
 8004114:	d0dd      	beq.n	80040d2 <sniprintf+0x16>
 8004116:	9b02      	ldr	r3, [sp, #8]
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e7d9      	b.n	80040d2 <sniprintf+0x16>
 800411e:	bf00      	nop
 8004120:	20000058 	.word	0x20000058

08004124 <memset>:
 8004124:	4402      	add	r2, r0
 8004126:	4603      	mov	r3, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	d100      	bne.n	800412e <memset+0xa>
 800412c:	4770      	bx	lr
 800412e:	f803 1b01 	strb.w	r1, [r3], #1
 8004132:	e7f9      	b.n	8004128 <memset+0x4>

08004134 <__errno>:
 8004134:	4b01      	ldr	r3, [pc, #4]	; (800413c <__errno+0x8>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000058 	.word	0x20000058

08004140 <__libc_init_array>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4d0d      	ldr	r5, [pc, #52]	; (8004178 <__libc_init_array+0x38>)
 8004144:	4c0d      	ldr	r4, [pc, #52]	; (800417c <__libc_init_array+0x3c>)
 8004146:	1b64      	subs	r4, r4, r5
 8004148:	10a4      	asrs	r4, r4, #2
 800414a:	2600      	movs	r6, #0
 800414c:	42a6      	cmp	r6, r4
 800414e:	d109      	bne.n	8004164 <__libc_init_array+0x24>
 8004150:	4d0b      	ldr	r5, [pc, #44]	; (8004180 <__libc_init_array+0x40>)
 8004152:	4c0c      	ldr	r4, [pc, #48]	; (8004184 <__libc_init_array+0x44>)
 8004154:	f000 fc6a 	bl	8004a2c <_init>
 8004158:	1b64      	subs	r4, r4, r5
 800415a:	10a4      	asrs	r4, r4, #2
 800415c:	2600      	movs	r6, #0
 800415e:	42a6      	cmp	r6, r4
 8004160:	d105      	bne.n	800416e <__libc_init_array+0x2e>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	f855 3b04 	ldr.w	r3, [r5], #4
 8004168:	4798      	blx	r3
 800416a:	3601      	adds	r6, #1
 800416c:	e7ee      	b.n	800414c <__libc_init_array+0xc>
 800416e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004172:	4798      	blx	r3
 8004174:	3601      	adds	r6, #1
 8004176:	e7f2      	b.n	800415e <__libc_init_array+0x1e>
 8004178:	08004aa4 	.word	0x08004aa4
 800417c:	08004aa4 	.word	0x08004aa4
 8004180:	08004aa4 	.word	0x08004aa4
 8004184:	08004aa8 	.word	0x08004aa8

08004188 <__retarget_lock_acquire_recursive>:
 8004188:	4770      	bx	lr

0800418a <__retarget_lock_release_recursive>:
 800418a:	4770      	bx	lr

0800418c <_free_r>:
 800418c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800418e:	2900      	cmp	r1, #0
 8004190:	d044      	beq.n	800421c <_free_r+0x90>
 8004192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004196:	9001      	str	r0, [sp, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f1a1 0404 	sub.w	r4, r1, #4
 800419e:	bfb8      	it	lt
 80041a0:	18e4      	addlt	r4, r4, r3
 80041a2:	f000 f8df 	bl	8004364 <__malloc_lock>
 80041a6:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <_free_r+0x94>)
 80041a8:	9801      	ldr	r0, [sp, #4]
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	b933      	cbnz	r3, 80041bc <_free_r+0x30>
 80041ae:	6063      	str	r3, [r4, #4]
 80041b0:	6014      	str	r4, [r2, #0]
 80041b2:	b003      	add	sp, #12
 80041b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041b8:	f000 b8da 	b.w	8004370 <__malloc_unlock>
 80041bc:	42a3      	cmp	r3, r4
 80041be:	d908      	bls.n	80041d2 <_free_r+0x46>
 80041c0:	6825      	ldr	r5, [r4, #0]
 80041c2:	1961      	adds	r1, r4, r5
 80041c4:	428b      	cmp	r3, r1
 80041c6:	bf01      	itttt	eq
 80041c8:	6819      	ldreq	r1, [r3, #0]
 80041ca:	685b      	ldreq	r3, [r3, #4]
 80041cc:	1949      	addeq	r1, r1, r5
 80041ce:	6021      	streq	r1, [r4, #0]
 80041d0:	e7ed      	b.n	80041ae <_free_r+0x22>
 80041d2:	461a      	mov	r2, r3
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b10b      	cbz	r3, 80041dc <_free_r+0x50>
 80041d8:	42a3      	cmp	r3, r4
 80041da:	d9fa      	bls.n	80041d2 <_free_r+0x46>
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	1855      	adds	r5, r2, r1
 80041e0:	42a5      	cmp	r5, r4
 80041e2:	d10b      	bne.n	80041fc <_free_r+0x70>
 80041e4:	6824      	ldr	r4, [r4, #0]
 80041e6:	4421      	add	r1, r4
 80041e8:	1854      	adds	r4, r2, r1
 80041ea:	42a3      	cmp	r3, r4
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	d1e0      	bne.n	80041b2 <_free_r+0x26>
 80041f0:	681c      	ldr	r4, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	6053      	str	r3, [r2, #4]
 80041f6:	440c      	add	r4, r1
 80041f8:	6014      	str	r4, [r2, #0]
 80041fa:	e7da      	b.n	80041b2 <_free_r+0x26>
 80041fc:	d902      	bls.n	8004204 <_free_r+0x78>
 80041fe:	230c      	movs	r3, #12
 8004200:	6003      	str	r3, [r0, #0]
 8004202:	e7d6      	b.n	80041b2 <_free_r+0x26>
 8004204:	6825      	ldr	r5, [r4, #0]
 8004206:	1961      	adds	r1, r4, r5
 8004208:	428b      	cmp	r3, r1
 800420a:	bf04      	itt	eq
 800420c:	6819      	ldreq	r1, [r3, #0]
 800420e:	685b      	ldreq	r3, [r3, #4]
 8004210:	6063      	str	r3, [r4, #4]
 8004212:	bf04      	itt	eq
 8004214:	1949      	addeq	r1, r1, r5
 8004216:	6021      	streq	r1, [r4, #0]
 8004218:	6054      	str	r4, [r2, #4]
 800421a:	e7ca      	b.n	80041b2 <_free_r+0x26>
 800421c:	b003      	add	sp, #12
 800421e:	bd30      	pop	{r4, r5, pc}
 8004220:	200002e4 	.word	0x200002e4

08004224 <sbrk_aligned>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4e0e      	ldr	r6, [pc, #56]	; (8004260 <sbrk_aligned+0x3c>)
 8004228:	460c      	mov	r4, r1
 800422a:	6831      	ldr	r1, [r6, #0]
 800422c:	4605      	mov	r5, r0
 800422e:	b911      	cbnz	r1, 8004236 <sbrk_aligned+0x12>
 8004230:	f000 fba6 	bl	8004980 <_sbrk_r>
 8004234:	6030      	str	r0, [r6, #0]
 8004236:	4621      	mov	r1, r4
 8004238:	4628      	mov	r0, r5
 800423a:	f000 fba1 	bl	8004980 <_sbrk_r>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d00a      	beq.n	8004258 <sbrk_aligned+0x34>
 8004242:	1cc4      	adds	r4, r0, #3
 8004244:	f024 0403 	bic.w	r4, r4, #3
 8004248:	42a0      	cmp	r0, r4
 800424a:	d007      	beq.n	800425c <sbrk_aligned+0x38>
 800424c:	1a21      	subs	r1, r4, r0
 800424e:	4628      	mov	r0, r5
 8004250:	f000 fb96 	bl	8004980 <_sbrk_r>
 8004254:	3001      	adds	r0, #1
 8004256:	d101      	bne.n	800425c <sbrk_aligned+0x38>
 8004258:	f04f 34ff 	mov.w	r4, #4294967295
 800425c:	4620      	mov	r0, r4
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	200002e8 	.word	0x200002e8

08004264 <_malloc_r>:
 8004264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004268:	1ccd      	adds	r5, r1, #3
 800426a:	f025 0503 	bic.w	r5, r5, #3
 800426e:	3508      	adds	r5, #8
 8004270:	2d0c      	cmp	r5, #12
 8004272:	bf38      	it	cc
 8004274:	250c      	movcc	r5, #12
 8004276:	2d00      	cmp	r5, #0
 8004278:	4607      	mov	r7, r0
 800427a:	db01      	blt.n	8004280 <_malloc_r+0x1c>
 800427c:	42a9      	cmp	r1, r5
 800427e:	d905      	bls.n	800428c <_malloc_r+0x28>
 8004280:	230c      	movs	r3, #12
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	2600      	movs	r6, #0
 8004286:	4630      	mov	r0, r6
 8004288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800428c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004360 <_malloc_r+0xfc>
 8004290:	f000 f868 	bl	8004364 <__malloc_lock>
 8004294:	f8d8 3000 	ldr.w	r3, [r8]
 8004298:	461c      	mov	r4, r3
 800429a:	bb5c      	cbnz	r4, 80042f4 <_malloc_r+0x90>
 800429c:	4629      	mov	r1, r5
 800429e:	4638      	mov	r0, r7
 80042a0:	f7ff ffc0 	bl	8004224 <sbrk_aligned>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	4604      	mov	r4, r0
 80042a8:	d155      	bne.n	8004356 <_malloc_r+0xf2>
 80042aa:	f8d8 4000 	ldr.w	r4, [r8]
 80042ae:	4626      	mov	r6, r4
 80042b0:	2e00      	cmp	r6, #0
 80042b2:	d145      	bne.n	8004340 <_malloc_r+0xdc>
 80042b4:	2c00      	cmp	r4, #0
 80042b6:	d048      	beq.n	800434a <_malloc_r+0xe6>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	4631      	mov	r1, r6
 80042bc:	4638      	mov	r0, r7
 80042be:	eb04 0903 	add.w	r9, r4, r3
 80042c2:	f000 fb5d 	bl	8004980 <_sbrk_r>
 80042c6:	4581      	cmp	r9, r0
 80042c8:	d13f      	bne.n	800434a <_malloc_r+0xe6>
 80042ca:	6821      	ldr	r1, [r4, #0]
 80042cc:	1a6d      	subs	r5, r5, r1
 80042ce:	4629      	mov	r1, r5
 80042d0:	4638      	mov	r0, r7
 80042d2:	f7ff ffa7 	bl	8004224 <sbrk_aligned>
 80042d6:	3001      	adds	r0, #1
 80042d8:	d037      	beq.n	800434a <_malloc_r+0xe6>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	442b      	add	r3, r5
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	f8d8 3000 	ldr.w	r3, [r8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d038      	beq.n	800435a <_malloc_r+0xf6>
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	42a2      	cmp	r2, r4
 80042ec:	d12b      	bne.n	8004346 <_malloc_r+0xe2>
 80042ee:	2200      	movs	r2, #0
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	e00f      	b.n	8004314 <_malloc_r+0xb0>
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	1b52      	subs	r2, r2, r5
 80042f8:	d41f      	bmi.n	800433a <_malloc_r+0xd6>
 80042fa:	2a0b      	cmp	r2, #11
 80042fc:	d917      	bls.n	800432e <_malloc_r+0xca>
 80042fe:	1961      	adds	r1, r4, r5
 8004300:	42a3      	cmp	r3, r4
 8004302:	6025      	str	r5, [r4, #0]
 8004304:	bf18      	it	ne
 8004306:	6059      	strne	r1, [r3, #4]
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	bf08      	it	eq
 800430c:	f8c8 1000 	streq.w	r1, [r8]
 8004310:	5162      	str	r2, [r4, r5]
 8004312:	604b      	str	r3, [r1, #4]
 8004314:	4638      	mov	r0, r7
 8004316:	f104 060b 	add.w	r6, r4, #11
 800431a:	f000 f829 	bl	8004370 <__malloc_unlock>
 800431e:	f026 0607 	bic.w	r6, r6, #7
 8004322:	1d23      	adds	r3, r4, #4
 8004324:	1af2      	subs	r2, r6, r3
 8004326:	d0ae      	beq.n	8004286 <_malloc_r+0x22>
 8004328:	1b9b      	subs	r3, r3, r6
 800432a:	50a3      	str	r3, [r4, r2]
 800432c:	e7ab      	b.n	8004286 <_malloc_r+0x22>
 800432e:	42a3      	cmp	r3, r4
 8004330:	6862      	ldr	r2, [r4, #4]
 8004332:	d1dd      	bne.n	80042f0 <_malloc_r+0x8c>
 8004334:	f8c8 2000 	str.w	r2, [r8]
 8004338:	e7ec      	b.n	8004314 <_malloc_r+0xb0>
 800433a:	4623      	mov	r3, r4
 800433c:	6864      	ldr	r4, [r4, #4]
 800433e:	e7ac      	b.n	800429a <_malloc_r+0x36>
 8004340:	4634      	mov	r4, r6
 8004342:	6876      	ldr	r6, [r6, #4]
 8004344:	e7b4      	b.n	80042b0 <_malloc_r+0x4c>
 8004346:	4613      	mov	r3, r2
 8004348:	e7cc      	b.n	80042e4 <_malloc_r+0x80>
 800434a:	230c      	movs	r3, #12
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4638      	mov	r0, r7
 8004350:	f000 f80e 	bl	8004370 <__malloc_unlock>
 8004354:	e797      	b.n	8004286 <_malloc_r+0x22>
 8004356:	6025      	str	r5, [r4, #0]
 8004358:	e7dc      	b.n	8004314 <_malloc_r+0xb0>
 800435a:	605b      	str	r3, [r3, #4]
 800435c:	deff      	udf	#255	; 0xff
 800435e:	bf00      	nop
 8004360:	200002e4 	.word	0x200002e4

08004364 <__malloc_lock>:
 8004364:	4801      	ldr	r0, [pc, #4]	; (800436c <__malloc_lock+0x8>)
 8004366:	f7ff bf0f 	b.w	8004188 <__retarget_lock_acquire_recursive>
 800436a:	bf00      	nop
 800436c:	200002e0 	.word	0x200002e0

08004370 <__malloc_unlock>:
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <__malloc_unlock+0x8>)
 8004372:	f7ff bf0a 	b.w	800418a <__retarget_lock_release_recursive>
 8004376:	bf00      	nop
 8004378:	200002e0 	.word	0x200002e0

0800437c <__ssputs_r>:
 800437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004380:	688e      	ldr	r6, [r1, #8]
 8004382:	461f      	mov	r7, r3
 8004384:	42be      	cmp	r6, r7
 8004386:	680b      	ldr	r3, [r1, #0]
 8004388:	4682      	mov	sl, r0
 800438a:	460c      	mov	r4, r1
 800438c:	4690      	mov	r8, r2
 800438e:	d82c      	bhi.n	80043ea <__ssputs_r+0x6e>
 8004390:	898a      	ldrh	r2, [r1, #12]
 8004392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004396:	d026      	beq.n	80043e6 <__ssputs_r+0x6a>
 8004398:	6965      	ldr	r5, [r4, #20]
 800439a:	6909      	ldr	r1, [r1, #16]
 800439c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043a0:	eba3 0901 	sub.w	r9, r3, r1
 80043a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043a8:	1c7b      	adds	r3, r7, #1
 80043aa:	444b      	add	r3, r9
 80043ac:	106d      	asrs	r5, r5, #1
 80043ae:	429d      	cmp	r5, r3
 80043b0:	bf38      	it	cc
 80043b2:	461d      	movcc	r5, r3
 80043b4:	0553      	lsls	r3, r2, #21
 80043b6:	d527      	bpl.n	8004408 <__ssputs_r+0x8c>
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7ff ff53 	bl	8004264 <_malloc_r>
 80043be:	4606      	mov	r6, r0
 80043c0:	b360      	cbz	r0, 800441c <__ssputs_r+0xa0>
 80043c2:	6921      	ldr	r1, [r4, #16]
 80043c4:	464a      	mov	r2, r9
 80043c6:	f000 faeb 	bl	80049a0 <memcpy>
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	6126      	str	r6, [r4, #16]
 80043d8:	6165      	str	r5, [r4, #20]
 80043da:	444e      	add	r6, r9
 80043dc:	eba5 0509 	sub.w	r5, r5, r9
 80043e0:	6026      	str	r6, [r4, #0]
 80043e2:	60a5      	str	r5, [r4, #8]
 80043e4:	463e      	mov	r6, r7
 80043e6:	42be      	cmp	r6, r7
 80043e8:	d900      	bls.n	80043ec <__ssputs_r+0x70>
 80043ea:	463e      	mov	r6, r7
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	4632      	mov	r2, r6
 80043f0:	4641      	mov	r1, r8
 80043f2:	f000 faab 	bl	800494c <memmove>
 80043f6:	68a3      	ldr	r3, [r4, #8]
 80043f8:	1b9b      	subs	r3, r3, r6
 80043fa:	60a3      	str	r3, [r4, #8]
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	4433      	add	r3, r6
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	2000      	movs	r0, #0
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	462a      	mov	r2, r5
 800440a:	f000 fad7 	bl	80049bc <_realloc_r>
 800440e:	4606      	mov	r6, r0
 8004410:	2800      	cmp	r0, #0
 8004412:	d1e0      	bne.n	80043d6 <__ssputs_r+0x5a>
 8004414:	6921      	ldr	r1, [r4, #16]
 8004416:	4650      	mov	r0, sl
 8004418:	f7ff feb8 	bl	800418c <_free_r>
 800441c:	230c      	movs	r3, #12
 800441e:	f8ca 3000 	str.w	r3, [sl]
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	f04f 30ff 	mov.w	r0, #4294967295
 800442e:	e7e9      	b.n	8004404 <__ssputs_r+0x88>

08004430 <_svfiprintf_r>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	4698      	mov	r8, r3
 8004436:	898b      	ldrh	r3, [r1, #12]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	b09d      	sub	sp, #116	; 0x74
 800443c:	4607      	mov	r7, r0
 800443e:	460d      	mov	r5, r1
 8004440:	4614      	mov	r4, r2
 8004442:	d50e      	bpl.n	8004462 <_svfiprintf_r+0x32>
 8004444:	690b      	ldr	r3, [r1, #16]
 8004446:	b963      	cbnz	r3, 8004462 <_svfiprintf_r+0x32>
 8004448:	2140      	movs	r1, #64	; 0x40
 800444a:	f7ff ff0b 	bl	8004264 <_malloc_r>
 800444e:	6028      	str	r0, [r5, #0]
 8004450:	6128      	str	r0, [r5, #16]
 8004452:	b920      	cbnz	r0, 800445e <_svfiprintf_r+0x2e>
 8004454:	230c      	movs	r3, #12
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	e0d0      	b.n	8004600 <_svfiprintf_r+0x1d0>
 800445e:	2340      	movs	r3, #64	; 0x40
 8004460:	616b      	str	r3, [r5, #20]
 8004462:	2300      	movs	r3, #0
 8004464:	9309      	str	r3, [sp, #36]	; 0x24
 8004466:	2320      	movs	r3, #32
 8004468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800446c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004470:	2330      	movs	r3, #48	; 0x30
 8004472:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004618 <_svfiprintf_r+0x1e8>
 8004476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800447a:	f04f 0901 	mov.w	r9, #1
 800447e:	4623      	mov	r3, r4
 8004480:	469a      	mov	sl, r3
 8004482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004486:	b10a      	cbz	r2, 800448c <_svfiprintf_r+0x5c>
 8004488:	2a25      	cmp	r2, #37	; 0x25
 800448a:	d1f9      	bne.n	8004480 <_svfiprintf_r+0x50>
 800448c:	ebba 0b04 	subs.w	fp, sl, r4
 8004490:	d00b      	beq.n	80044aa <_svfiprintf_r+0x7a>
 8004492:	465b      	mov	r3, fp
 8004494:	4622      	mov	r2, r4
 8004496:	4629      	mov	r1, r5
 8004498:	4638      	mov	r0, r7
 800449a:	f7ff ff6f 	bl	800437c <__ssputs_r>
 800449e:	3001      	adds	r0, #1
 80044a0:	f000 80a9 	beq.w	80045f6 <_svfiprintf_r+0x1c6>
 80044a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044a6:	445a      	add	r2, fp
 80044a8:	9209      	str	r2, [sp, #36]	; 0x24
 80044aa:	f89a 3000 	ldrb.w	r3, [sl]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80a1 	beq.w	80045f6 <_svfiprintf_r+0x1c6>
 80044b4:	2300      	movs	r3, #0
 80044b6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044be:	f10a 0a01 	add.w	sl, sl, #1
 80044c2:	9304      	str	r3, [sp, #16]
 80044c4:	9307      	str	r3, [sp, #28]
 80044c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044ca:	931a      	str	r3, [sp, #104]	; 0x68
 80044cc:	4654      	mov	r4, sl
 80044ce:	2205      	movs	r2, #5
 80044d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d4:	4850      	ldr	r0, [pc, #320]	; (8004618 <_svfiprintf_r+0x1e8>)
 80044d6:	f7fb febb 	bl	8000250 <memchr>
 80044da:	9a04      	ldr	r2, [sp, #16]
 80044dc:	b9d8      	cbnz	r0, 8004516 <_svfiprintf_r+0xe6>
 80044de:	06d0      	lsls	r0, r2, #27
 80044e0:	bf44      	itt	mi
 80044e2:	2320      	movmi	r3, #32
 80044e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044e8:	0711      	lsls	r1, r2, #28
 80044ea:	bf44      	itt	mi
 80044ec:	232b      	movmi	r3, #43	; 0x2b
 80044ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f2:	f89a 3000 	ldrb.w	r3, [sl]
 80044f6:	2b2a      	cmp	r3, #42	; 0x2a
 80044f8:	d015      	beq.n	8004526 <_svfiprintf_r+0xf6>
 80044fa:	9a07      	ldr	r2, [sp, #28]
 80044fc:	4654      	mov	r4, sl
 80044fe:	2000      	movs	r0, #0
 8004500:	f04f 0c0a 	mov.w	ip, #10
 8004504:	4621      	mov	r1, r4
 8004506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800450a:	3b30      	subs	r3, #48	; 0x30
 800450c:	2b09      	cmp	r3, #9
 800450e:	d94d      	bls.n	80045ac <_svfiprintf_r+0x17c>
 8004510:	b1b0      	cbz	r0, 8004540 <_svfiprintf_r+0x110>
 8004512:	9207      	str	r2, [sp, #28]
 8004514:	e014      	b.n	8004540 <_svfiprintf_r+0x110>
 8004516:	eba0 0308 	sub.w	r3, r0, r8
 800451a:	fa09 f303 	lsl.w	r3, r9, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	46a2      	mov	sl, r4
 8004524:	e7d2      	b.n	80044cc <_svfiprintf_r+0x9c>
 8004526:	9b03      	ldr	r3, [sp, #12]
 8004528:	1d19      	adds	r1, r3, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	9103      	str	r1, [sp, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	bfbb      	ittet	lt
 8004532:	425b      	neglt	r3, r3
 8004534:	f042 0202 	orrlt.w	r2, r2, #2
 8004538:	9307      	strge	r3, [sp, #28]
 800453a:	9307      	strlt	r3, [sp, #28]
 800453c:	bfb8      	it	lt
 800453e:	9204      	strlt	r2, [sp, #16]
 8004540:	7823      	ldrb	r3, [r4, #0]
 8004542:	2b2e      	cmp	r3, #46	; 0x2e
 8004544:	d10c      	bne.n	8004560 <_svfiprintf_r+0x130>
 8004546:	7863      	ldrb	r3, [r4, #1]
 8004548:	2b2a      	cmp	r3, #42	; 0x2a
 800454a:	d134      	bne.n	80045b6 <_svfiprintf_r+0x186>
 800454c:	9b03      	ldr	r3, [sp, #12]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	9203      	str	r2, [sp, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	bfb8      	it	lt
 8004558:	f04f 33ff 	movlt.w	r3, #4294967295
 800455c:	3402      	adds	r4, #2
 800455e:	9305      	str	r3, [sp, #20]
 8004560:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004628 <_svfiprintf_r+0x1f8>
 8004564:	7821      	ldrb	r1, [r4, #0]
 8004566:	2203      	movs	r2, #3
 8004568:	4650      	mov	r0, sl
 800456a:	f7fb fe71 	bl	8000250 <memchr>
 800456e:	b138      	cbz	r0, 8004580 <_svfiprintf_r+0x150>
 8004570:	9b04      	ldr	r3, [sp, #16]
 8004572:	eba0 000a 	sub.w	r0, r0, sl
 8004576:	2240      	movs	r2, #64	; 0x40
 8004578:	4082      	lsls	r2, r0
 800457a:	4313      	orrs	r3, r2
 800457c:	3401      	adds	r4, #1
 800457e:	9304      	str	r3, [sp, #16]
 8004580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004584:	4825      	ldr	r0, [pc, #148]	; (800461c <_svfiprintf_r+0x1ec>)
 8004586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800458a:	2206      	movs	r2, #6
 800458c:	f7fb fe60 	bl	8000250 <memchr>
 8004590:	2800      	cmp	r0, #0
 8004592:	d038      	beq.n	8004606 <_svfiprintf_r+0x1d6>
 8004594:	4b22      	ldr	r3, [pc, #136]	; (8004620 <_svfiprintf_r+0x1f0>)
 8004596:	bb1b      	cbnz	r3, 80045e0 <_svfiprintf_r+0x1b0>
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	3307      	adds	r3, #7
 800459c:	f023 0307 	bic.w	r3, r3, #7
 80045a0:	3308      	adds	r3, #8
 80045a2:	9303      	str	r3, [sp, #12]
 80045a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a6:	4433      	add	r3, r6
 80045a8:	9309      	str	r3, [sp, #36]	; 0x24
 80045aa:	e768      	b.n	800447e <_svfiprintf_r+0x4e>
 80045ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80045b0:	460c      	mov	r4, r1
 80045b2:	2001      	movs	r0, #1
 80045b4:	e7a6      	b.n	8004504 <_svfiprintf_r+0xd4>
 80045b6:	2300      	movs	r3, #0
 80045b8:	3401      	adds	r4, #1
 80045ba:	9305      	str	r3, [sp, #20]
 80045bc:	4619      	mov	r1, r3
 80045be:	f04f 0c0a 	mov.w	ip, #10
 80045c2:	4620      	mov	r0, r4
 80045c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c8:	3a30      	subs	r2, #48	; 0x30
 80045ca:	2a09      	cmp	r2, #9
 80045cc:	d903      	bls.n	80045d6 <_svfiprintf_r+0x1a6>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0c6      	beq.n	8004560 <_svfiprintf_r+0x130>
 80045d2:	9105      	str	r1, [sp, #20]
 80045d4:	e7c4      	b.n	8004560 <_svfiprintf_r+0x130>
 80045d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045da:	4604      	mov	r4, r0
 80045dc:	2301      	movs	r3, #1
 80045de:	e7f0      	b.n	80045c2 <_svfiprintf_r+0x192>
 80045e0:	ab03      	add	r3, sp, #12
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	462a      	mov	r2, r5
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <_svfiprintf_r+0x1f4>)
 80045e8:	a904      	add	r1, sp, #16
 80045ea:	4638      	mov	r0, r7
 80045ec:	f3af 8000 	nop.w
 80045f0:	1c42      	adds	r2, r0, #1
 80045f2:	4606      	mov	r6, r0
 80045f4:	d1d6      	bne.n	80045a4 <_svfiprintf_r+0x174>
 80045f6:	89ab      	ldrh	r3, [r5, #12]
 80045f8:	065b      	lsls	r3, r3, #25
 80045fa:	f53f af2d 	bmi.w	8004458 <_svfiprintf_r+0x28>
 80045fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004600:	b01d      	add	sp, #116	; 0x74
 8004602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004606:	ab03      	add	r3, sp, #12
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	462a      	mov	r2, r5
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <_svfiprintf_r+0x1f4>)
 800460e:	a904      	add	r1, sp, #16
 8004610:	4638      	mov	r0, r7
 8004612:	f000 f879 	bl	8004708 <_printf_i>
 8004616:	e7eb      	b.n	80045f0 <_svfiprintf_r+0x1c0>
 8004618:	08004a68 	.word	0x08004a68
 800461c:	08004a72 	.word	0x08004a72
 8004620:	00000000 	.word	0x00000000
 8004624:	0800437d 	.word	0x0800437d
 8004628:	08004a6e 	.word	0x08004a6e

0800462c <_printf_common>:
 800462c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	4616      	mov	r6, r2
 8004632:	4699      	mov	r9, r3
 8004634:	688a      	ldr	r2, [r1, #8]
 8004636:	690b      	ldr	r3, [r1, #16]
 8004638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800463c:	4293      	cmp	r3, r2
 800463e:	bfb8      	it	lt
 8004640:	4613      	movlt	r3, r2
 8004642:	6033      	str	r3, [r6, #0]
 8004644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004648:	4607      	mov	r7, r0
 800464a:	460c      	mov	r4, r1
 800464c:	b10a      	cbz	r2, 8004652 <_printf_common+0x26>
 800464e:	3301      	adds	r3, #1
 8004650:	6033      	str	r3, [r6, #0]
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	0699      	lsls	r1, r3, #26
 8004656:	bf42      	ittt	mi
 8004658:	6833      	ldrmi	r3, [r6, #0]
 800465a:	3302      	addmi	r3, #2
 800465c:	6033      	strmi	r3, [r6, #0]
 800465e:	6825      	ldr	r5, [r4, #0]
 8004660:	f015 0506 	ands.w	r5, r5, #6
 8004664:	d106      	bne.n	8004674 <_printf_common+0x48>
 8004666:	f104 0a19 	add.w	sl, r4, #25
 800466a:	68e3      	ldr	r3, [r4, #12]
 800466c:	6832      	ldr	r2, [r6, #0]
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	42ab      	cmp	r3, r5
 8004672:	dc26      	bgt.n	80046c2 <_printf_common+0x96>
 8004674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004678:	1e13      	subs	r3, r2, #0
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	bf18      	it	ne
 800467e:	2301      	movne	r3, #1
 8004680:	0692      	lsls	r2, r2, #26
 8004682:	d42b      	bmi.n	80046dc <_printf_common+0xb0>
 8004684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004688:	4649      	mov	r1, r9
 800468a:	4638      	mov	r0, r7
 800468c:	47c0      	blx	r8
 800468e:	3001      	adds	r0, #1
 8004690:	d01e      	beq.n	80046d0 <_printf_common+0xa4>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	6922      	ldr	r2, [r4, #16]
 8004696:	f003 0306 	and.w	r3, r3, #6
 800469a:	2b04      	cmp	r3, #4
 800469c:	bf02      	ittt	eq
 800469e:	68e5      	ldreq	r5, [r4, #12]
 80046a0:	6833      	ldreq	r3, [r6, #0]
 80046a2:	1aed      	subeq	r5, r5, r3
 80046a4:	68a3      	ldr	r3, [r4, #8]
 80046a6:	bf0c      	ite	eq
 80046a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046ac:	2500      	movne	r5, #0
 80046ae:	4293      	cmp	r3, r2
 80046b0:	bfc4      	itt	gt
 80046b2:	1a9b      	subgt	r3, r3, r2
 80046b4:	18ed      	addgt	r5, r5, r3
 80046b6:	2600      	movs	r6, #0
 80046b8:	341a      	adds	r4, #26
 80046ba:	42b5      	cmp	r5, r6
 80046bc:	d11a      	bne.n	80046f4 <_printf_common+0xc8>
 80046be:	2000      	movs	r0, #0
 80046c0:	e008      	b.n	80046d4 <_printf_common+0xa8>
 80046c2:	2301      	movs	r3, #1
 80046c4:	4652      	mov	r2, sl
 80046c6:	4649      	mov	r1, r9
 80046c8:	4638      	mov	r0, r7
 80046ca:	47c0      	blx	r8
 80046cc:	3001      	adds	r0, #1
 80046ce:	d103      	bne.n	80046d8 <_printf_common+0xac>
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d8:	3501      	adds	r5, #1
 80046da:	e7c6      	b.n	800466a <_printf_common+0x3e>
 80046dc:	18e1      	adds	r1, r4, r3
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	2030      	movs	r0, #48	; 0x30
 80046e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046e6:	4422      	add	r2, r4
 80046e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046f0:	3302      	adds	r3, #2
 80046f2:	e7c7      	b.n	8004684 <_printf_common+0x58>
 80046f4:	2301      	movs	r3, #1
 80046f6:	4622      	mov	r2, r4
 80046f8:	4649      	mov	r1, r9
 80046fa:	4638      	mov	r0, r7
 80046fc:	47c0      	blx	r8
 80046fe:	3001      	adds	r0, #1
 8004700:	d0e6      	beq.n	80046d0 <_printf_common+0xa4>
 8004702:	3601      	adds	r6, #1
 8004704:	e7d9      	b.n	80046ba <_printf_common+0x8e>
	...

08004708 <_printf_i>:
 8004708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	7e0f      	ldrb	r7, [r1, #24]
 800470e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004710:	2f78      	cmp	r7, #120	; 0x78
 8004712:	4691      	mov	r9, r2
 8004714:	4680      	mov	r8, r0
 8004716:	460c      	mov	r4, r1
 8004718:	469a      	mov	sl, r3
 800471a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800471e:	d807      	bhi.n	8004730 <_printf_i+0x28>
 8004720:	2f62      	cmp	r7, #98	; 0x62
 8004722:	d80a      	bhi.n	800473a <_printf_i+0x32>
 8004724:	2f00      	cmp	r7, #0
 8004726:	f000 80d4 	beq.w	80048d2 <_printf_i+0x1ca>
 800472a:	2f58      	cmp	r7, #88	; 0x58
 800472c:	f000 80c0 	beq.w	80048b0 <_printf_i+0x1a8>
 8004730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004738:	e03a      	b.n	80047b0 <_printf_i+0xa8>
 800473a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800473e:	2b15      	cmp	r3, #21
 8004740:	d8f6      	bhi.n	8004730 <_printf_i+0x28>
 8004742:	a101      	add	r1, pc, #4	; (adr r1, 8004748 <_printf_i+0x40>)
 8004744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004748:	080047a1 	.word	0x080047a1
 800474c:	080047b5 	.word	0x080047b5
 8004750:	08004731 	.word	0x08004731
 8004754:	08004731 	.word	0x08004731
 8004758:	08004731 	.word	0x08004731
 800475c:	08004731 	.word	0x08004731
 8004760:	080047b5 	.word	0x080047b5
 8004764:	08004731 	.word	0x08004731
 8004768:	08004731 	.word	0x08004731
 800476c:	08004731 	.word	0x08004731
 8004770:	08004731 	.word	0x08004731
 8004774:	080048b9 	.word	0x080048b9
 8004778:	080047e1 	.word	0x080047e1
 800477c:	08004873 	.word	0x08004873
 8004780:	08004731 	.word	0x08004731
 8004784:	08004731 	.word	0x08004731
 8004788:	080048db 	.word	0x080048db
 800478c:	08004731 	.word	0x08004731
 8004790:	080047e1 	.word	0x080047e1
 8004794:	08004731 	.word	0x08004731
 8004798:	08004731 	.word	0x08004731
 800479c:	0800487b 	.word	0x0800487b
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	1d1a      	adds	r2, r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	602a      	str	r2, [r5, #0]
 80047a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b0:	2301      	movs	r3, #1
 80047b2:	e09f      	b.n	80048f4 <_printf_i+0x1ec>
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	0607      	lsls	r7, r0, #24
 80047ba:	f103 0104 	add.w	r1, r3, #4
 80047be:	6029      	str	r1, [r5, #0]
 80047c0:	d501      	bpl.n	80047c6 <_printf_i+0xbe>
 80047c2:	681e      	ldr	r6, [r3, #0]
 80047c4:	e003      	b.n	80047ce <_printf_i+0xc6>
 80047c6:	0646      	lsls	r6, r0, #25
 80047c8:	d5fb      	bpl.n	80047c2 <_printf_i+0xba>
 80047ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047ce:	2e00      	cmp	r6, #0
 80047d0:	da03      	bge.n	80047da <_printf_i+0xd2>
 80047d2:	232d      	movs	r3, #45	; 0x2d
 80047d4:	4276      	negs	r6, r6
 80047d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047da:	485a      	ldr	r0, [pc, #360]	; (8004944 <_printf_i+0x23c>)
 80047dc:	230a      	movs	r3, #10
 80047de:	e012      	b.n	8004806 <_printf_i+0xfe>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	6820      	ldr	r0, [r4, #0]
 80047e4:	1d19      	adds	r1, r3, #4
 80047e6:	6029      	str	r1, [r5, #0]
 80047e8:	0605      	lsls	r5, r0, #24
 80047ea:	d501      	bpl.n	80047f0 <_printf_i+0xe8>
 80047ec:	681e      	ldr	r6, [r3, #0]
 80047ee:	e002      	b.n	80047f6 <_printf_i+0xee>
 80047f0:	0641      	lsls	r1, r0, #25
 80047f2:	d5fb      	bpl.n	80047ec <_printf_i+0xe4>
 80047f4:	881e      	ldrh	r6, [r3, #0]
 80047f6:	4853      	ldr	r0, [pc, #332]	; (8004944 <_printf_i+0x23c>)
 80047f8:	2f6f      	cmp	r7, #111	; 0x6f
 80047fa:	bf0c      	ite	eq
 80047fc:	2308      	moveq	r3, #8
 80047fe:	230a      	movne	r3, #10
 8004800:	2100      	movs	r1, #0
 8004802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004806:	6865      	ldr	r5, [r4, #4]
 8004808:	60a5      	str	r5, [r4, #8]
 800480a:	2d00      	cmp	r5, #0
 800480c:	bfa2      	ittt	ge
 800480e:	6821      	ldrge	r1, [r4, #0]
 8004810:	f021 0104 	bicge.w	r1, r1, #4
 8004814:	6021      	strge	r1, [r4, #0]
 8004816:	b90e      	cbnz	r6, 800481c <_printf_i+0x114>
 8004818:	2d00      	cmp	r5, #0
 800481a:	d04b      	beq.n	80048b4 <_printf_i+0x1ac>
 800481c:	4615      	mov	r5, r2
 800481e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004822:	fb03 6711 	mls	r7, r3, r1, r6
 8004826:	5dc7      	ldrb	r7, [r0, r7]
 8004828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800482c:	4637      	mov	r7, r6
 800482e:	42bb      	cmp	r3, r7
 8004830:	460e      	mov	r6, r1
 8004832:	d9f4      	bls.n	800481e <_printf_i+0x116>
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10b      	bne.n	8004850 <_printf_i+0x148>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	07de      	lsls	r6, r3, #31
 800483c:	d508      	bpl.n	8004850 <_printf_i+0x148>
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	6861      	ldr	r1, [r4, #4]
 8004842:	4299      	cmp	r1, r3
 8004844:	bfde      	ittt	le
 8004846:	2330      	movle	r3, #48	; 0x30
 8004848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800484c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004850:	1b52      	subs	r2, r2, r5
 8004852:	6122      	str	r2, [r4, #16]
 8004854:	f8cd a000 	str.w	sl, [sp]
 8004858:	464b      	mov	r3, r9
 800485a:	aa03      	add	r2, sp, #12
 800485c:	4621      	mov	r1, r4
 800485e:	4640      	mov	r0, r8
 8004860:	f7ff fee4 	bl	800462c <_printf_common>
 8004864:	3001      	adds	r0, #1
 8004866:	d14a      	bne.n	80048fe <_printf_i+0x1f6>
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	b004      	add	sp, #16
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f043 0320 	orr.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	4833      	ldr	r0, [pc, #204]	; (8004948 <_printf_i+0x240>)
 800487c:	2778      	movs	r7, #120	; 0x78
 800487e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	6829      	ldr	r1, [r5, #0]
 8004886:	061f      	lsls	r7, r3, #24
 8004888:	f851 6b04 	ldr.w	r6, [r1], #4
 800488c:	d402      	bmi.n	8004894 <_printf_i+0x18c>
 800488e:	065f      	lsls	r7, r3, #25
 8004890:	bf48      	it	mi
 8004892:	b2b6      	uxthmi	r6, r6
 8004894:	07df      	lsls	r7, r3, #31
 8004896:	bf48      	it	mi
 8004898:	f043 0320 	orrmi.w	r3, r3, #32
 800489c:	6029      	str	r1, [r5, #0]
 800489e:	bf48      	it	mi
 80048a0:	6023      	strmi	r3, [r4, #0]
 80048a2:	b91e      	cbnz	r6, 80048ac <_printf_i+0x1a4>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	f023 0320 	bic.w	r3, r3, #32
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	2310      	movs	r3, #16
 80048ae:	e7a7      	b.n	8004800 <_printf_i+0xf8>
 80048b0:	4824      	ldr	r0, [pc, #144]	; (8004944 <_printf_i+0x23c>)
 80048b2:	e7e4      	b.n	800487e <_printf_i+0x176>
 80048b4:	4615      	mov	r5, r2
 80048b6:	e7bd      	b.n	8004834 <_printf_i+0x12c>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	6826      	ldr	r6, [r4, #0]
 80048bc:	6961      	ldr	r1, [r4, #20]
 80048be:	1d18      	adds	r0, r3, #4
 80048c0:	6028      	str	r0, [r5, #0]
 80048c2:	0635      	lsls	r5, r6, #24
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	d501      	bpl.n	80048cc <_printf_i+0x1c4>
 80048c8:	6019      	str	r1, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <_printf_i+0x1ca>
 80048cc:	0670      	lsls	r0, r6, #25
 80048ce:	d5fb      	bpl.n	80048c8 <_printf_i+0x1c0>
 80048d0:	8019      	strh	r1, [r3, #0]
 80048d2:	2300      	movs	r3, #0
 80048d4:	6123      	str	r3, [r4, #16]
 80048d6:	4615      	mov	r5, r2
 80048d8:	e7bc      	b.n	8004854 <_printf_i+0x14c>
 80048da:	682b      	ldr	r3, [r5, #0]
 80048dc:	1d1a      	adds	r2, r3, #4
 80048de:	602a      	str	r2, [r5, #0]
 80048e0:	681d      	ldr	r5, [r3, #0]
 80048e2:	6862      	ldr	r2, [r4, #4]
 80048e4:	2100      	movs	r1, #0
 80048e6:	4628      	mov	r0, r5
 80048e8:	f7fb fcb2 	bl	8000250 <memchr>
 80048ec:	b108      	cbz	r0, 80048f2 <_printf_i+0x1ea>
 80048ee:	1b40      	subs	r0, r0, r5
 80048f0:	6060      	str	r0, [r4, #4]
 80048f2:	6863      	ldr	r3, [r4, #4]
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	2300      	movs	r3, #0
 80048f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048fc:	e7aa      	b.n	8004854 <_printf_i+0x14c>
 80048fe:	6923      	ldr	r3, [r4, #16]
 8004900:	462a      	mov	r2, r5
 8004902:	4649      	mov	r1, r9
 8004904:	4640      	mov	r0, r8
 8004906:	47d0      	blx	sl
 8004908:	3001      	adds	r0, #1
 800490a:	d0ad      	beq.n	8004868 <_printf_i+0x160>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	079b      	lsls	r3, r3, #30
 8004910:	d413      	bmi.n	800493a <_printf_i+0x232>
 8004912:	68e0      	ldr	r0, [r4, #12]
 8004914:	9b03      	ldr	r3, [sp, #12]
 8004916:	4298      	cmp	r0, r3
 8004918:	bfb8      	it	lt
 800491a:	4618      	movlt	r0, r3
 800491c:	e7a6      	b.n	800486c <_printf_i+0x164>
 800491e:	2301      	movs	r3, #1
 8004920:	4632      	mov	r2, r6
 8004922:	4649      	mov	r1, r9
 8004924:	4640      	mov	r0, r8
 8004926:	47d0      	blx	sl
 8004928:	3001      	adds	r0, #1
 800492a:	d09d      	beq.n	8004868 <_printf_i+0x160>
 800492c:	3501      	adds	r5, #1
 800492e:	68e3      	ldr	r3, [r4, #12]
 8004930:	9903      	ldr	r1, [sp, #12]
 8004932:	1a5b      	subs	r3, r3, r1
 8004934:	42ab      	cmp	r3, r5
 8004936:	dcf2      	bgt.n	800491e <_printf_i+0x216>
 8004938:	e7eb      	b.n	8004912 <_printf_i+0x20a>
 800493a:	2500      	movs	r5, #0
 800493c:	f104 0619 	add.w	r6, r4, #25
 8004940:	e7f5      	b.n	800492e <_printf_i+0x226>
 8004942:	bf00      	nop
 8004944:	08004a79 	.word	0x08004a79
 8004948:	08004a8a 	.word	0x08004a8a

0800494c <memmove>:
 800494c:	4288      	cmp	r0, r1
 800494e:	b510      	push	{r4, lr}
 8004950:	eb01 0402 	add.w	r4, r1, r2
 8004954:	d902      	bls.n	800495c <memmove+0x10>
 8004956:	4284      	cmp	r4, r0
 8004958:	4623      	mov	r3, r4
 800495a:	d807      	bhi.n	800496c <memmove+0x20>
 800495c:	1e43      	subs	r3, r0, #1
 800495e:	42a1      	cmp	r1, r4
 8004960:	d008      	beq.n	8004974 <memmove+0x28>
 8004962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800496a:	e7f8      	b.n	800495e <memmove+0x12>
 800496c:	4402      	add	r2, r0
 800496e:	4601      	mov	r1, r0
 8004970:	428a      	cmp	r2, r1
 8004972:	d100      	bne.n	8004976 <memmove+0x2a>
 8004974:	bd10      	pop	{r4, pc}
 8004976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800497a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800497e:	e7f7      	b.n	8004970 <memmove+0x24>

08004980 <_sbrk_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d06      	ldr	r5, [pc, #24]	; (800499c <_sbrk_r+0x1c>)
 8004984:	2300      	movs	r3, #0
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fb ff7e 	bl	800088c <_sbrk>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_sbrk_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_sbrk_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	200002dc 	.word	0x200002dc

080049a0 <memcpy>:
 80049a0:	440a      	add	r2, r1
 80049a2:	4291      	cmp	r1, r2
 80049a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049a8:	d100      	bne.n	80049ac <memcpy+0xc>
 80049aa:	4770      	bx	lr
 80049ac:	b510      	push	{r4, lr}
 80049ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b6:	4291      	cmp	r1, r2
 80049b8:	d1f9      	bne.n	80049ae <memcpy+0xe>
 80049ba:	bd10      	pop	{r4, pc}

080049bc <_realloc_r>:
 80049bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c0:	4680      	mov	r8, r0
 80049c2:	4614      	mov	r4, r2
 80049c4:	460e      	mov	r6, r1
 80049c6:	b921      	cbnz	r1, 80049d2 <_realloc_r+0x16>
 80049c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049cc:	4611      	mov	r1, r2
 80049ce:	f7ff bc49 	b.w	8004264 <_malloc_r>
 80049d2:	b92a      	cbnz	r2, 80049e0 <_realloc_r+0x24>
 80049d4:	f7ff fbda 	bl	800418c <_free_r>
 80049d8:	4625      	mov	r5, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e0:	f000 f81b 	bl	8004a1a <_malloc_usable_size_r>
 80049e4:	4284      	cmp	r4, r0
 80049e6:	4607      	mov	r7, r0
 80049e8:	d802      	bhi.n	80049f0 <_realloc_r+0x34>
 80049ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049ee:	d812      	bhi.n	8004a16 <_realloc_r+0x5a>
 80049f0:	4621      	mov	r1, r4
 80049f2:	4640      	mov	r0, r8
 80049f4:	f7ff fc36 	bl	8004264 <_malloc_r>
 80049f8:	4605      	mov	r5, r0
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d0ed      	beq.n	80049da <_realloc_r+0x1e>
 80049fe:	42bc      	cmp	r4, r7
 8004a00:	4622      	mov	r2, r4
 8004a02:	4631      	mov	r1, r6
 8004a04:	bf28      	it	cs
 8004a06:	463a      	movcs	r2, r7
 8004a08:	f7ff ffca 	bl	80049a0 <memcpy>
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f7ff fbbc 	bl	800418c <_free_r>
 8004a14:	e7e1      	b.n	80049da <_realloc_r+0x1e>
 8004a16:	4635      	mov	r5, r6
 8004a18:	e7df      	b.n	80049da <_realloc_r+0x1e>

08004a1a <_malloc_usable_size_r>:
 8004a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1e:	1f18      	subs	r0, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bfbc      	itt	lt
 8004a24:	580b      	ldrlt	r3, [r1, r0]
 8004a26:	18c0      	addlt	r0, r0, r3
 8004a28:	4770      	bx	lr
	...

08004a2c <_init>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr

08004a38 <_fini>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr
