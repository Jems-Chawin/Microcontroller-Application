/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "rng.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "am2320.h"
#include "ILI9341_Touchscreen.h"
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include "shanpic.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
char ch,morse_alpha[10],send_buffer[100];
int idxMorse,idxBuffer;
uint8_t thai_string[] = {0xE0, 0xB8, 0xAA, 0xE0, 0xB8, 0xA7, 0xE0, 0xB8, 0xB1, 0xE0, 0xB8, 0xAA, 0xE0, 0xB9, 0x81, 0xE0, 0xB8, 0x84, 0xE0, 0xB8, 0x81, 0xE0, 0xB8, 0x84, 0xE0, 0xB8, 0x94};
// Function to convert Morse code to character
char morseToChar(char* morse) {
    if (strcmp(morse, "01") == 0) return 0xE0;
    else if (strcmp(morse, "1000") == 0) return 'B';
    else if (strcmp(morse, "1010") == 0) return 'C';
    else if (strcmp(morse, "100") == 0) return 'D';
    else if (strcmp(morse, "0") == 0) return 'E';
    else if (strcmp(morse, "0010") == 0) return 'F';
    else if (strcmp(morse, "110") == 0) return 'G';
    else if (strcmp(morse, "0000") == 0) return 'H';
    else if (strcmp(morse, "00") == 0) return 'I';
    else if (strcmp(morse, "0111") == 0) return 'J';
    else if (strcmp(morse, "101") == 0) return 'K';
    else if (strcmp(morse, "0100") == 0) return 'L';
    else if (strcmp(morse, "11") == 0) return 'M';
    else if (strcmp(morse, "10") == 0) return 'N';
    else if (strcmp(morse, "111") == 0) return 'O';
    else if (strcmp(morse, "0110") == 0) return 'P';
    else if (strcmp(morse, "1101") == 0) return 'Q';
    else if (strcmp(morse, "010") == 0) return 'R';
    else if (strcmp(morse, "000") == 0) return 'S';
    else if (strcmp(morse, "1") == 0) return 'T';
    else if (strcmp(morse, "001") == 0) return 'U';
    else if (strcmp(morse, "0001") == 0) return 'V';
    else if (strcmp(morse, "011") == 0) return 'W';
    else if (strcmp(morse, "1001") == 0) return 'X';
    else if (strcmp(morse, "1011") == 0) return 'Y';
    else if (strcmp(morse, "1100") == 0) return 'Z';
    else if (strcmp(morse, "11111") == 0) return '0';
    else if (strcmp(morse, "01111") == 0) return '1';
    else if (strcmp(morse, "00111") == 0) return '2';
    else if (strcmp(morse, "00011") == 0) return '3';
    else if (strcmp(morse, "00001") == 0) return '4';
    else if (strcmp(morse, "00000") == 0) return '5';
    else if (strcmp(morse, "10000") == 0) return '6';
    else if (strcmp(morse, "11000") == 0) return '7';
    else if (strcmp(morse, "11100") == 0) return '8';
    else if (strcmp(morse, "11110") == 0) return '9';
    else if (strcmp(morse,"2") == 0) return ' ';
    else return '?'; // Unknown Morse code symbol
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_SPI5_Init();
  MX_TIM1_Init();
  MX_RNG_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
  ILI9341_Fill_Screen(WHITE);
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */



  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart==&huart3){
		HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
		if(ch==32){
			HAL_UART_Transmit(&huart3,(uint8_t*)" ",1,1000);
			send_buffer[idxBuffer++]=morseToChar(morse_alpha);
			memset(morse_alpha,0,strlen(morse_alpha));
			idxMorse = 0;
		}
		else if(ch==13){
			send_buffer[idxBuffer++]=morseToChar(morse_alpha);
			memset(morse_alpha,0,strlen(morse_alpha));
			idxMorse = 0;
			ILI9341_Fill_Screen(WHITE);
			ILI9341_Draw_Text(send_buffer, 10, 120, BLACK, 2, WHITE);
			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,1000);
			HAL_UART_Transmit(&huart3,(uint8_t*)&send_buffer,strlen(send_buffer),1000);
			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,1000);
			memset(send_buffer,0,strlen(send_buffer));
			idxBuffer = 0;
		}
		else{
			HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,1000);
			morse_alpha[idxMorse++]=ch;
		}
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
