
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ecc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  080080d0  080080d0  000180d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800878c  0800878c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008794  08008794  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800879c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001d8  08008974  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08008974  00020508  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bbc  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c6  00000000  00000000  00032e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  000361d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e37  00000000  00000000  00037440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299e9  00000000  00000000  00038277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c20  00000000  00000000  00061c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100021  00000000  00000000  00079880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059ac  00000000  00000000  001798a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	080080b4 	.word	0x080080b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	080080b4 	.word	0x080080b4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	; 0x38
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000622:	4b8d      	ldr	r3, [pc, #564]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a8c      	ldr	r2, [pc, #560]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b8a      	ldr	r3, [pc, #552]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0310 	and.w	r3, r3, #16
 8000636:	623b      	str	r3, [r7, #32]
 8000638:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b87      	ldr	r3, [pc, #540]	; (8000858 <MX_GPIO_Init+0x24c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a86      	ldr	r2, [pc, #536]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b84      	ldr	r3, [pc, #528]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b81      	ldr	r3, [pc, #516]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a80      	ldr	r2, [pc, #512]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b7e      	ldr	r3, [pc, #504]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0320 	and.w	r3, r3, #32
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	4b7b      	ldr	r3, [pc, #492]	; (8000858 <MX_GPIO_Init+0x24c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a7a      	ldr	r2, [pc, #488]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b78      	ldr	r3, [pc, #480]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b75      	ldr	r3, [pc, #468]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a74      	ldr	r2, [pc, #464]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b72      	ldr	r3, [pc, #456]	; (8000858 <MX_GPIO_Init+0x24c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b6f      	ldr	r3, [pc, #444]	; (8000858 <MX_GPIO_Init+0x24c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a6e      	ldr	r2, [pc, #440]	; (8000858 <MX_GPIO_Init+0x24c>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b6c      	ldr	r3, [pc, #432]	; (8000858 <MX_GPIO_Init+0x24c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b69      	ldr	r3, [pc, #420]	; (8000858 <MX_GPIO_Init+0x24c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a68      	ldr	r2, [pc, #416]	; (8000858 <MX_GPIO_Init+0x24c>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b66      	ldr	r3, [pc, #408]	; (8000858 <MX_GPIO_Init+0x24c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ca:	4b63      	ldr	r3, [pc, #396]	; (8000858 <MX_GPIO_Init+0x24c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a62      	ldr	r2, [pc, #392]	; (8000858 <MX_GPIO_Init+0x24c>)
 80006d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b60      	ldr	r3, [pc, #384]	; (8000858 <MX_GPIO_Init+0x24c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2168      	movs	r1, #104	; 0x68
 80006e6:	485d      	ldr	r0, [pc, #372]	; (800085c <MX_GPIO_Init+0x250>)
 80006e8:	f002 f820 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006f2:	485b      	ldr	r0, [pc, #364]	; (8000860 <MX_GPIO_Init+0x254>)
 80006f4:	f002 f81a 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4859      	ldr	r0, [pc, #356]	; (8000864 <MX_GPIO_Init+0x258>)
 80006fe:	f002 f815 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000708:	4857      	ldr	r0, [pc, #348]	; (8000868 <MX_GPIO_Init+0x25c>)
 800070a:	f002 f80f 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800070e:	2314      	movs	r3, #20
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	4619      	mov	r1, r3
 8000720:	484e      	ldr	r0, [pc, #312]	; (800085c <MX_GPIO_Init+0x250>)
 8000722:	f001 fe57 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000726:	2368      	movs	r3, #104	; 0x68
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	4619      	mov	r1, r3
 800073c:	4847      	ldr	r0, [pc, #284]	; (800085c <MX_GPIO_Init+0x250>)
 800073e:	f001 fe49 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	4844      	ldr	r0, [pc, #272]	; (8000868 <MX_GPIO_Init+0x25c>)
 8000758:	f001 fe3c 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800075c:	2332      	movs	r3, #50	; 0x32
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076c:	230b      	movs	r3, #11
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	483c      	ldr	r0, [pc, #240]	; (8000868 <MX_GPIO_Init+0x25c>)
 8000778:	f001 fe2c 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800077c:	2386      	movs	r3, #134	; 0x86
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	4835      	ldr	r0, [pc, #212]	; (800086c <MX_GPIO_Init+0x260>)
 8000798:	f001 fe1c 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ae:	230b      	movs	r3, #11
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	4829      	ldr	r0, [pc, #164]	; (8000860 <MX_GPIO_Init+0x254>)
 80007ba:	f001 fe0b 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007be:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d4:	4619      	mov	r1, r3
 80007d6:	4822      	ldr	r0, [pc, #136]	; (8000860 <MX_GPIO_Init+0x254>)
 80007d8:	f001 fdfc 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	481c      	ldr	r0, [pc, #112]	; (8000864 <MX_GPIO_Init+0x258>)
 80007f4:	f001 fdee 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	4816      	ldr	r0, [pc, #88]	; (8000864 <MX_GPIO_Init+0x258>)
 800080c:	f001 fde2 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000810:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_GPIO_Init+0x25c>)
 800082a:	f001 fdd3 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800082e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000840:	230b      	movs	r3, #11
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_GPIO_Init+0x258>)
 800084c:	f001 fdc2 	bl	80023d4 <HAL_GPIO_Init>

}
 8000850:	bf00      	nop
 8000852:	3738      	adds	r7, #56	; 0x38
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40021000 	.word	0x40021000
 8000860:	40020400 	.word	0x40020400
 8000864:	40021800 	.word	0x40021800
 8000868:	40020800 	.word	0x40020800
 800086c:	40020000 	.word	0x40020000

08000870 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000874:	f3bf 8f4f 	dsb	sy
}
 8000878:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800087a:	f3bf 8f6f 	isb	sy
}
 800087e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <SCB_EnableICache+0x48>)
 8000882:	2200      	movs	r2, #0
 8000884:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000888:	f3bf 8f4f 	dsb	sy
}
 800088c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088e:	f3bf 8f6f 	isb	sy
}
 8000892:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <SCB_EnableICache+0x48>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <SCB_EnableICache+0x48>)
 800089a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008a0:	f3bf 8f4f 	dsb	sy
}
 80008a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008a6:	f3bf 8f6f 	isb	sy
}
 80008aa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <SCB_EnableDCache+0x84>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008ca:	f3bf 8f4f 	dsb	sy
}
 80008ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <SCB_EnableDCache+0x84>)
 80008d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008d6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0b5b      	lsrs	r3, r3, #13
 80008dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	015a      	lsls	r2, r3, #5
 80008f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008fa:	4911      	ldr	r1, [pc, #68]	; (8000940 <SCB_EnableDCache+0x84>)
 80008fc:	4313      	orrs	r3, r2
 80008fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	1e5a      	subs	r2, r3, #1
 8000906:	60ba      	str	r2, [r7, #8]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1ef      	bne.n	80008ec <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	1e5a      	subs	r2, r3, #1
 8000910:	60fa      	str	r2, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1e5      	bne.n	80008e2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000916:	f3bf 8f4f 	dsb	sy
}
 800091a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <SCB_EnableDCache+0x84>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <SCB_EnableDCache+0x84>)
 8000922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000928:	f3bf 8f4f 	dsb	sy
}
 800092c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800092e:	f3bf 8f6f 	isb	sy
}
 8000932:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <morseToChar>:
/* Private variables ---------------------------------------------------------*/
char ch,morse_alpha[10],send_buffer[100];
int idxMorse,idxBuffer;
// Function to convert Morse code to character
char thaiText[] = "สวัสดีครับ";
char morseToChar(char* morse) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
    if (strcmp(morse, "01") == 0) return 'A';
 800094c:	49a1      	ldr	r1, [pc, #644]	; (8000bd4 <morseToChar+0x290>)
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fc76 	bl	8000240 <strcmp>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <morseToChar+0x1a>
 800095a:	2341      	movs	r3, #65	; 0x41
 800095c:	e18c      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "1000") == 0) return 'B';
 800095e:	499e      	ldr	r1, [pc, #632]	; (8000bd8 <morseToChar+0x294>)
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fc6d 	bl	8000240 <strcmp>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d101      	bne.n	8000970 <morseToChar+0x2c>
 800096c:	2342      	movs	r3, #66	; 0x42
 800096e:	e183      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "1010") == 0) return 'C';
 8000970:	499a      	ldr	r1, [pc, #616]	; (8000bdc <morseToChar+0x298>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fc64 	bl	8000240 <strcmp>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <morseToChar+0x3e>
 800097e:	2343      	movs	r3, #67	; 0x43
 8000980:	e17a      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "100") == 0) return 'D';
 8000982:	4997      	ldr	r1, [pc, #604]	; (8000be0 <morseToChar+0x29c>)
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fc5b 	bl	8000240 <strcmp>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <morseToChar+0x50>
 8000990:	2344      	movs	r3, #68	; 0x44
 8000992:	e171      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "0") == 0) return 'E';
 8000994:	4993      	ldr	r1, [pc, #588]	; (8000be4 <morseToChar+0x2a0>)
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fc52 	bl	8000240 <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d101      	bne.n	80009a6 <morseToChar+0x62>
 80009a2:	2345      	movs	r3, #69	; 0x45
 80009a4:	e168      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "0010") == 0) return 'F';
 80009a6:	4990      	ldr	r1, [pc, #576]	; (8000be8 <morseToChar+0x2a4>)
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fc49 	bl	8000240 <strcmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <morseToChar+0x74>
 80009b4:	2346      	movs	r3, #70	; 0x46
 80009b6:	e15f      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "110") == 0) return 'G';
 80009b8:	498c      	ldr	r1, [pc, #560]	; (8000bec <morseToChar+0x2a8>)
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fc40 	bl	8000240 <strcmp>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <morseToChar+0x86>
 80009c6:	2347      	movs	r3, #71	; 0x47
 80009c8:	e156      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "0000") == 0) return 'H';
 80009ca:	4989      	ldr	r1, [pc, #548]	; (8000bf0 <morseToChar+0x2ac>)
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff fc37 	bl	8000240 <strcmp>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <morseToChar+0x98>
 80009d8:	2348      	movs	r3, #72	; 0x48
 80009da:	e14d      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "00") == 0) return 'I';
 80009dc:	4985      	ldr	r1, [pc, #532]	; (8000bf4 <morseToChar+0x2b0>)
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fc2e 	bl	8000240 <strcmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <morseToChar+0xaa>
 80009ea:	2349      	movs	r3, #73	; 0x49
 80009ec:	e144      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "0111") == 0) return 'J';
 80009ee:	4982      	ldr	r1, [pc, #520]	; (8000bf8 <morseToChar+0x2b4>)
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fc25 	bl	8000240 <strcmp>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <morseToChar+0xbc>
 80009fc:	234a      	movs	r3, #74	; 0x4a
 80009fe:	e13b      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "101") == 0) return 'K';
 8000a00:	497e      	ldr	r1, [pc, #504]	; (8000bfc <morseToChar+0x2b8>)
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fc1c 	bl	8000240 <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <morseToChar+0xce>
 8000a0e:	234b      	movs	r3, #75	; 0x4b
 8000a10:	e132      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "0100") == 0) return 'L';
 8000a12:	497b      	ldr	r1, [pc, #492]	; (8000c00 <morseToChar+0x2bc>)
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fc13 	bl	8000240 <strcmp>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <morseToChar+0xe0>
 8000a20:	234c      	movs	r3, #76	; 0x4c
 8000a22:	e129      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "11") == 0) return 'M';
 8000a24:	4977      	ldr	r1, [pc, #476]	; (8000c04 <morseToChar+0x2c0>)
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fc0a 	bl	8000240 <strcmp>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <morseToChar+0xf2>
 8000a32:	234d      	movs	r3, #77	; 0x4d
 8000a34:	e120      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "10") == 0) return 'N';
 8000a36:	4974      	ldr	r1, [pc, #464]	; (8000c08 <morseToChar+0x2c4>)
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fc01 	bl	8000240 <strcmp>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d101      	bne.n	8000a48 <morseToChar+0x104>
 8000a44:	234e      	movs	r3, #78	; 0x4e
 8000a46:	e117      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "111") == 0) return 'O';
 8000a48:	4970      	ldr	r1, [pc, #448]	; (8000c0c <morseToChar+0x2c8>)
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fbf8 	bl	8000240 <strcmp>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <morseToChar+0x116>
 8000a56:	234f      	movs	r3, #79	; 0x4f
 8000a58:	e10e      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "0110") == 0) return 'P';
 8000a5a:	496d      	ldr	r1, [pc, #436]	; (8000c10 <morseToChar+0x2cc>)
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff fbef 	bl	8000240 <strcmp>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <morseToChar+0x128>
 8000a68:	2350      	movs	r3, #80	; 0x50
 8000a6a:	e105      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "1101") == 0) return 'Q';
 8000a6c:	4969      	ldr	r1, [pc, #420]	; (8000c14 <morseToChar+0x2d0>)
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fbe6 	bl	8000240 <strcmp>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <morseToChar+0x13a>
 8000a7a:	2351      	movs	r3, #81	; 0x51
 8000a7c:	e0fc      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "010") == 0) return 'R';
 8000a7e:	4966      	ldr	r1, [pc, #408]	; (8000c18 <morseToChar+0x2d4>)
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fbdd 	bl	8000240 <strcmp>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d101      	bne.n	8000a90 <morseToChar+0x14c>
 8000a8c:	2352      	movs	r3, #82	; 0x52
 8000a8e:	e0f3      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "000") == 0) return 'S';
 8000a90:	4962      	ldr	r1, [pc, #392]	; (8000c1c <morseToChar+0x2d8>)
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fbd4 	bl	8000240 <strcmp>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <morseToChar+0x15e>
 8000a9e:	2353      	movs	r3, #83	; 0x53
 8000aa0:	e0ea      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "1") == 0) return 'T';
 8000aa2:	495f      	ldr	r1, [pc, #380]	; (8000c20 <morseToChar+0x2dc>)
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fbcb 	bl	8000240 <strcmp>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d101      	bne.n	8000ab4 <morseToChar+0x170>
 8000ab0:	2354      	movs	r3, #84	; 0x54
 8000ab2:	e0e1      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "001") == 0) return 'U';
 8000ab4:	495b      	ldr	r1, [pc, #364]	; (8000c24 <morseToChar+0x2e0>)
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fbc2 	bl	8000240 <strcmp>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <morseToChar+0x182>
 8000ac2:	2355      	movs	r3, #85	; 0x55
 8000ac4:	e0d8      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "0001") == 0) return 'V';
 8000ac6:	4958      	ldr	r1, [pc, #352]	; (8000c28 <morseToChar+0x2e4>)
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fbb9 	bl	8000240 <strcmp>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <morseToChar+0x194>
 8000ad4:	2356      	movs	r3, #86	; 0x56
 8000ad6:	e0cf      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "011") == 0) return 'W';
 8000ad8:	4954      	ldr	r1, [pc, #336]	; (8000c2c <morseToChar+0x2e8>)
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fbb0 	bl	8000240 <strcmp>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <morseToChar+0x1a6>
 8000ae6:	2357      	movs	r3, #87	; 0x57
 8000ae8:	e0c6      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "1001") == 0) return 'X';
 8000aea:	4951      	ldr	r1, [pc, #324]	; (8000c30 <morseToChar+0x2ec>)
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fba7 	bl	8000240 <strcmp>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <morseToChar+0x1b8>
 8000af8:	2358      	movs	r3, #88	; 0x58
 8000afa:	e0bd      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "1011") == 0) return 'Y';
 8000afc:	494d      	ldr	r1, [pc, #308]	; (8000c34 <morseToChar+0x2f0>)
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fb9e 	bl	8000240 <strcmp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <morseToChar+0x1ca>
 8000b0a:	2359      	movs	r3, #89	; 0x59
 8000b0c:	e0b4      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "1100") == 0) return 'Z';
 8000b0e:	494a      	ldr	r1, [pc, #296]	; (8000c38 <morseToChar+0x2f4>)
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fb95 	bl	8000240 <strcmp>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <morseToChar+0x1dc>
 8000b1c:	235a      	movs	r3, #90	; 0x5a
 8000b1e:	e0ab      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "11111") == 0) return '0';
 8000b20:	4946      	ldr	r1, [pc, #280]	; (8000c3c <morseToChar+0x2f8>)
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fb8c 	bl	8000240 <strcmp>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <morseToChar+0x1ee>
 8000b2e:	2330      	movs	r3, #48	; 0x30
 8000b30:	e0a2      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "01111") == 0) return '1';
 8000b32:	4943      	ldr	r1, [pc, #268]	; (8000c40 <morseToChar+0x2fc>)
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fb83 	bl	8000240 <strcmp>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <morseToChar+0x200>
 8000b40:	2331      	movs	r3, #49	; 0x31
 8000b42:	e099      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "00111") == 0) return '2';
 8000b44:	493f      	ldr	r1, [pc, #252]	; (8000c44 <morseToChar+0x300>)
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fb7a 	bl	8000240 <strcmp>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <morseToChar+0x212>
 8000b52:	2332      	movs	r3, #50	; 0x32
 8000b54:	e090      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "00011") == 0) return '3';
 8000b56:	493c      	ldr	r1, [pc, #240]	; (8000c48 <morseToChar+0x304>)
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fb71 	bl	8000240 <strcmp>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <morseToChar+0x224>
 8000b64:	2333      	movs	r3, #51	; 0x33
 8000b66:	e087      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "00001") == 0) return '4';
 8000b68:	4938      	ldr	r1, [pc, #224]	; (8000c4c <morseToChar+0x308>)
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fb68 	bl	8000240 <strcmp>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <morseToChar+0x236>
 8000b76:	2334      	movs	r3, #52	; 0x34
 8000b78:	e07e      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "00000") == 0) return '5';
 8000b7a:	4935      	ldr	r1, [pc, #212]	; (8000c50 <morseToChar+0x30c>)
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fb5f 	bl	8000240 <strcmp>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <morseToChar+0x248>
 8000b88:	2335      	movs	r3, #53	; 0x35
 8000b8a:	e075      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "10000") == 0) return '6';
 8000b8c:	4931      	ldr	r1, [pc, #196]	; (8000c54 <morseToChar+0x310>)
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fb56 	bl	8000240 <strcmp>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <morseToChar+0x25a>
 8000b9a:	2336      	movs	r3, #54	; 0x36
 8000b9c:	e06c      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "11000") == 0) return '7';
 8000b9e:	492e      	ldr	r1, [pc, #184]	; (8000c58 <morseToChar+0x314>)
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fb4d 	bl	8000240 <strcmp>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <morseToChar+0x26c>
 8000bac:	2337      	movs	r3, #55	; 0x37
 8000bae:	e063      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "11100") == 0) return '8';
 8000bb0:	492a      	ldr	r1, [pc, #168]	; (8000c5c <morseToChar+0x318>)
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fb44 	bl	8000240 <strcmp>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <morseToChar+0x27e>
 8000bbe:	2338      	movs	r3, #56	; 0x38
 8000bc0:	e05a      	b.n	8000c78 <morseToChar+0x334>
    else if (strcmp(morse, "11110") == 0) return '9';
 8000bc2:	4927      	ldr	r1, [pc, #156]	; (8000c60 <morseToChar+0x31c>)
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fb3b 	bl	8000240 <strcmp>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d149      	bne.n	8000c64 <morseToChar+0x320>
 8000bd0:	2339      	movs	r3, #57	; 0x39
 8000bd2:	e051      	b.n	8000c78 <morseToChar+0x334>
 8000bd4:	080080d0 	.word	0x080080d0
 8000bd8:	080080d4 	.word	0x080080d4
 8000bdc:	080080dc 	.word	0x080080dc
 8000be0:	080080e4 	.word	0x080080e4
 8000be4:	080080e8 	.word	0x080080e8
 8000be8:	080080ec 	.word	0x080080ec
 8000bec:	080080f4 	.word	0x080080f4
 8000bf0:	080080f8 	.word	0x080080f8
 8000bf4:	08008100 	.word	0x08008100
 8000bf8:	08008104 	.word	0x08008104
 8000bfc:	0800810c 	.word	0x0800810c
 8000c00:	08008110 	.word	0x08008110
 8000c04:	08008118 	.word	0x08008118
 8000c08:	0800811c 	.word	0x0800811c
 8000c0c:	08008120 	.word	0x08008120
 8000c10:	08008124 	.word	0x08008124
 8000c14:	0800812c 	.word	0x0800812c
 8000c18:	08008134 	.word	0x08008134
 8000c1c:	08008138 	.word	0x08008138
 8000c20:	0800813c 	.word	0x0800813c
 8000c24:	08008140 	.word	0x08008140
 8000c28:	08008144 	.word	0x08008144
 8000c2c:	0800814c 	.word	0x0800814c
 8000c30:	08008150 	.word	0x08008150
 8000c34:	08008158 	.word	0x08008158
 8000c38:	08008160 	.word	0x08008160
 8000c3c:	08008168 	.word	0x08008168
 8000c40:	08008170 	.word	0x08008170
 8000c44:	08008178 	.word	0x08008178
 8000c48:	08008180 	.word	0x08008180
 8000c4c:	08008188 	.word	0x08008188
 8000c50:	08008190 	.word	0x08008190
 8000c54:	08008198 	.word	0x08008198
 8000c58:	080081a0 	.word	0x080081a0
 8000c5c:	080081a8 	.word	0x080081a8
 8000c60:	080081b0 	.word	0x080081b0
    else if (strcmp(morse,"2") == 0) return ' ';
 8000c64:	4906      	ldr	r1, [pc, #24]	; (8000c80 <morseToChar+0x33c>)
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff faea 	bl	8000240 <strcmp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <morseToChar+0x332>
 8000c72:	2320      	movs	r3, #32
 8000c74:	e000      	b.n	8000c78 <morseToChar+0x334>
    else return '?'; // Unknown Morse code symbol
 8000c76:	233f      	movs	r3, #63	; 0x3f
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	080081b8 	.word	0x080081b8

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000c88:	f7ff fdf2 	bl	8000870 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000c8c:	f7ff fe16 	bl	80008bc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f001 f96c 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f81e 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f7ff fcb8 	bl	800060c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c9c:	f000 fbc0 	bl	8001420 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000ca0:	f000 f998 	bl	8000fd4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000ca4:	f000 fb48 	bl	8001338 <MX_TIM1_Init>
  MX_RNG_Init();
 8000ca8:	f000 f960 	bl	8000f6c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000cac:	f000 fe56 	bl	800195c <ILI9341_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4906      	ldr	r1, [pc, #24]	; (8000ccc <main+0x48>)
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <main+0x4c>)
 8000cb6:	f003 fe1a 	bl	80048ee <HAL_UART_Receive_IT>
  ILI9341_Fill_Screen(WHITE);
 8000cba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cbe:	f000 fff9 	bl	8001cb4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 fdec 	bl	80018a0 <ILI9341_Set_Rotation>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <main+0x44>
 8000cca:	bf00      	nop
 8000ccc:	200001f4 	.word	0x200001f4
 8000cd0:	20000334 	.word	0x20000334

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0b8      	sub	sp, #224	; 0xe0
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cde:	2234      	movs	r2, #52	; 0x34
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 fb1d 	bl	8006322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	2290      	movs	r2, #144	; 0x90
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f005 fb0e 	bl	8006322 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d06:	f001 fd2b 	bl	8002760 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <SystemClock_Config+0x124>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a3a      	ldr	r2, [pc, #232]	; (8000df8 <SystemClock_Config+0x124>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <SystemClock_Config+0x124>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d22:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <SystemClock_Config+0x128>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a35      	ldr	r2, [pc, #212]	; (8000dfc <SystemClock_Config+0x128>)
 8000d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <SystemClock_Config+0x128>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d56:	2304      	movs	r3, #4
 8000d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000d5c:	23c8      	movs	r3, #200	; 0xc8
 8000d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d68:	2309      	movs	r3, #9
 8000d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fd51 	bl	8002820 <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d84:	f000 f8ee 	bl	8000f64 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d88:	f001 fcfa 	bl	8002780 <HAL_PWREx_EnableOverDrive>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d92:	f000 f8e7 	bl	8000f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d96:	230f      	movs	r3, #15
 8000d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000db8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dbc:	2106      	movs	r1, #6
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 ffdc 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000dca:	f000 f8cb 	bl	8000f64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <SystemClock_Config+0x12c>)
 8000dd0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 f9f1 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000dec:	f000 f8ba 	bl	8000f64 <Error_Handler>
  }
}
 8000df0:	bf00      	nop
 8000df2:	37e0      	adds	r7, #224	; 0xe0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40007000 	.word	0x40007000
 8000e00:	00200100 	.word	0x00200100

08000e04 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	6078      	str	r0, [r7, #4]
	if(huart==&huart3){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_UART_RxCpltCallback+0x140>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	f040 8092 	bne.w	8000f3a <HAL_UART_RxCpltCallback+0x136>
		HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	494b      	ldr	r1, [pc, #300]	; (8000f48 <HAL_UART_RxCpltCallback+0x144>)
 8000e1a:	484a      	ldr	r0, [pc, #296]	; (8000f44 <HAL_UART_RxCpltCallback+0x140>)
 8000e1c:	f003 fd67 	bl	80048ee <HAL_UART_Receive_IT>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000e20:	bf00      	nop
 8000e22:	4b48      	ldr	r3, [pc, #288]	; (8000f44 <HAL_UART_RxCpltCallback+0x140>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2c:	2b40      	cmp	r3, #64	; 0x40
 8000e2e:	d1f8      	bne.n	8000e22 <HAL_UART_RxCpltCallback+0x1e>
		if(ch==32){
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <HAL_UART_RxCpltCallback+0x144>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b20      	cmp	r3, #32
 8000e36:	d11f      	bne.n	8000e78 <HAL_UART_RxCpltCallback+0x74>
			HAL_UART_Transmit(&huart3,(uint8_t*)" ",1,1000);
 8000e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4943      	ldr	r1, [pc, #268]	; (8000f4c <HAL_UART_RxCpltCallback+0x148>)
 8000e40:	4840      	ldr	r0, [pc, #256]	; (8000f44 <HAL_UART_RxCpltCallback+0x140>)
 8000e42:	f003 fcc1 	bl	80047c8 <HAL_UART_Transmit>
			send_buffer[idxBuffer++]=morseToChar(morse_alpha);
 8000e46:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <HAL_UART_RxCpltCallback+0x14c>)
 8000e48:	681c      	ldr	r4, [r3, #0]
 8000e4a:	1c63      	adds	r3, r4, #1
 8000e4c:	4a40      	ldr	r2, [pc, #256]	; (8000f50 <HAL_UART_RxCpltCallback+0x14c>)
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4840      	ldr	r0, [pc, #256]	; (8000f54 <HAL_UART_RxCpltCallback+0x150>)
 8000e52:	f7ff fd77 	bl	8000944 <morseToChar>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_UART_RxCpltCallback+0x154>)
 8000e5c:	551a      	strb	r2, [r3, r4]
			memset(morse_alpha,0,strlen(morse_alpha));
 8000e5e:	483d      	ldr	r0, [pc, #244]	; (8000f54 <HAL_UART_RxCpltCallback+0x150>)
 8000e60:	f7ff fa4e 	bl	8000300 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	483a      	ldr	r0, [pc, #232]	; (8000f54 <HAL_UART_RxCpltCallback+0x150>)
 8000e6c:	f005 fa59 	bl	8006322 <memset>
			idxMorse = 0;
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <HAL_UART_RxCpltCallback+0x158>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
		else{
			HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,1000);
			morse_alpha[idxMorse++]=ch;
		}
	}
}
 8000e76:	e060      	b.n	8000f3a <HAL_UART_RxCpltCallback+0x136>
		else if(ch==13){
 8000e78:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <HAL_UART_RxCpltCallback+0x144>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b0d      	cmp	r3, #13
 8000e7e:	d14c      	bne.n	8000f1a <HAL_UART_RxCpltCallback+0x116>
			send_buffer[idxBuffer++]=morseToChar(morse_alpha);
 8000e80:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_UART_RxCpltCallback+0x14c>)
 8000e82:	681c      	ldr	r4, [r3, #0]
 8000e84:	1c63      	adds	r3, r4, #1
 8000e86:	4a32      	ldr	r2, [pc, #200]	; (8000f50 <HAL_UART_RxCpltCallback+0x14c>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4832      	ldr	r0, [pc, #200]	; (8000f54 <HAL_UART_RxCpltCallback+0x150>)
 8000e8c:	f7ff fd5a 	bl	8000944 <morseToChar>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <HAL_UART_RxCpltCallback+0x154>)
 8000e96:	551a      	strb	r2, [r3, r4]
			memset(morse_alpha,0,strlen(morse_alpha));
 8000e98:	482e      	ldr	r0, [pc, #184]	; (8000f54 <HAL_UART_RxCpltCallback+0x150>)
 8000e9a:	f7ff fa31 	bl	8000300 <strlen>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	482b      	ldr	r0, [pc, #172]	; (8000f54 <HAL_UART_RxCpltCallback+0x150>)
 8000ea6:	f005 fa3c 	bl	8006322 <memset>
			idxMorse = 0;
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <HAL_UART_RxCpltCallback+0x158>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
			ILI9341_Fill_Screen(WHITE);
 8000eb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000eb4:	f000 fefe 	bl	8001cb4 <ILI9341_Fill_Screen>
			ILI9341_Draw_Text(send_buffer, 10, 120, BLACK, 2, WHITE);
 8000eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2278      	movs	r2, #120	; 0x78
 8000ec6:	210a      	movs	r1, #10
 8000ec8:	4823      	ldr	r0, [pc, #140]	; (8000f58 <HAL_UART_RxCpltCallback+0x154>)
 8000eca:	f000 fbe9 	bl	80016a0 <ILI9341_Draw_Text>
			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,1000);
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4922      	ldr	r1, [pc, #136]	; (8000f60 <HAL_UART_RxCpltCallback+0x15c>)
 8000ed6:	481b      	ldr	r0, [pc, #108]	; (8000f44 <HAL_UART_RxCpltCallback+0x140>)
 8000ed8:	f003 fc76 	bl	80047c8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,(uint8_t*)&send_buffer,strlen(send_buffer),1000);
 8000edc:	481e      	ldr	r0, [pc, #120]	; (8000f58 <HAL_UART_RxCpltCallback+0x154>)
 8000ede:	f7ff fa0f 	bl	8000300 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	491b      	ldr	r1, [pc, #108]	; (8000f58 <HAL_UART_RxCpltCallback+0x154>)
 8000eec:	4815      	ldr	r0, [pc, #84]	; (8000f44 <HAL_UART_RxCpltCallback+0x140>)
 8000eee:	f003 fc6b 	bl	80047c8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,1000);
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4919      	ldr	r1, [pc, #100]	; (8000f60 <HAL_UART_RxCpltCallback+0x15c>)
 8000efa:	4812      	ldr	r0, [pc, #72]	; (8000f44 <HAL_UART_RxCpltCallback+0x140>)
 8000efc:	f003 fc64 	bl	80047c8 <HAL_UART_Transmit>
			memset(send_buffer,0,strlen(send_buffer));
 8000f00:	4815      	ldr	r0, [pc, #84]	; (8000f58 <HAL_UART_RxCpltCallback+0x154>)
 8000f02:	f7ff f9fd 	bl	8000300 <strlen>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4812      	ldr	r0, [pc, #72]	; (8000f58 <HAL_UART_RxCpltCallback+0x154>)
 8000f0e:	f005 fa08 	bl	8006322 <memset>
			idxBuffer = 0;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_UART_RxCpltCallback+0x14c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	e00f      	b.n	8000f3a <HAL_UART_RxCpltCallback+0x136>
			HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,1000);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4909      	ldr	r1, [pc, #36]	; (8000f48 <HAL_UART_RxCpltCallback+0x144>)
 8000f22:	4808      	ldr	r0, [pc, #32]	; (8000f44 <HAL_UART_RxCpltCallback+0x140>)
 8000f24:	f003 fc50 	bl	80047c8 <HAL_UART_Transmit>
			morse_alpha[idxMorse++]=ch;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_UART_RxCpltCallback+0x158>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	490b      	ldr	r1, [pc, #44]	; (8000f5c <HAL_UART_RxCpltCallback+0x158>)
 8000f30:	600a      	str	r2, [r1, #0]
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_UART_RxCpltCallback+0x144>)
 8000f34:	7811      	ldrb	r1, [r2, #0]
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_UART_RxCpltCallback+0x150>)
 8000f38:	54d1      	strb	r1, [r2, r3]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000334 	.word	0x20000334
 8000f48:	200001f4 	.word	0x200001f4
 8000f4c:	080081bc 	.word	0x080081bc
 8000f50:	2000026c 	.word	0x2000026c
 8000f54:	200001f8 	.word	0x200001f8
 8000f58:	20000204 	.word	0x20000204
 8000f5c:	20000268 	.word	0x20000268
 8000f60:	080081c0 	.word	0x080081c0

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x4>
	...

08000f6c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_RNG_Init+0x20>)
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <MX_RNG_Init+0x24>)
 8000f74:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_RNG_Init+0x20>)
 8000f78:	f002 fd4e 	bl	8003a18 <HAL_RNG_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000f82:	f7ff ffef 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000270 	.word	0x20000270
 8000f90:	50060800 	.word	0x50060800

08000f94 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_RNG_MspInit+0x38>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10b      	bne.n	8000fbe <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_RNG_MspInit+0x3c>)
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_RNG_MspInit+0x3c>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	6353      	str	r3, [r2, #52]	; 0x34
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_RNG_MspInit+0x3c>)
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	50060800 	.word	0x50060800
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_SPI5_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_SPI5_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_SPI5_Init+0x74>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_SPI5_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_SPI5_Init+0x74>)
 8000fee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ff2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_SPI5_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_SPI5_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_SPI5_Init+0x74>)
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_SPI5_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_SPI5_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_SPI5_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_SPI5_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_SPI5_Init+0x74>)
 8001022:	2207      	movs	r2, #7
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_SPI5_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_SPI5_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_SPI5_Init+0x74>)
 8001034:	f002 fd1a 	bl	8003a6c <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800103e:	f7ff ff91 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000280 	.word	0x20000280
 800104c:	40015000 	.word	0x40015000

08001050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_SPI_MspInit+0x7c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d128      	bne.n	80010c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_SPI_MspInit+0x80>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010a2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80010b4:	2305      	movs	r3, #5
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_SPI_MspInit+0x84>)
 80010c0:	f001 f988 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40015000 	.word	0x40015000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40021400 	.word	0x40021400

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_MspInit+0x44>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_MspInit+0x44>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_MspInit+0x44>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x44>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x44>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x44>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 ff6e 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <USART3_IRQHandler+0x10>)
 8001132:	f003 fc19 	bl	8004968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000334 	.word	0x20000334

08001140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	return 1;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_kill>:

int _kill(int pid, int sig)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800115a:	f005 f935 	bl	80063c8 <__errno>
 800115e:	4603      	mov	r3, r0
 8001160:	2216      	movs	r2, #22
 8001162:	601a      	str	r2, [r3, #0]
	return -1;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_exit>:

void _exit (int status)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffe7 	bl	8001150 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001182:	e7fe      	b.n	8001182 <_exit+0x12>

08001184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e00a      	b.n	80011ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001196:	f3af 8000 	nop.w
 800119a:	4601      	mov	r1, r0
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	b2ca      	uxtb	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf0      	blt.n	8001196 <_read+0x12>
	}

return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e009      	b.n	80011e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	60ba      	str	r2, [r7, #8]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf1      	blt.n	80011d0 <_write+0x12>
	}
	return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_close>:

int _close(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	return -1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121e:	605a      	str	r2, [r3, #4]
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_isatty>:

int _isatty(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
	return 1;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f005 f89a 	bl	80063c8 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20080000 	.word	0x20080000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	200002e4 	.word	0x200002e4
 80012c8:	20000508 	.word	0x20000508

080012cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <SystemInit+0x5c>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a14      	ldr	r2, [pc, #80]	; (8001328 <SystemInit+0x5c>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <SystemInit+0x60>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <SystemInit+0x60>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <SystemInit+0x60>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <SystemInit+0x60>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <SystemInit+0x60>)
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <SystemInit+0x64>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <SystemInit+0x60>)
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <SystemInit+0x68>)
 8001302:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <SystemInit+0x60>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a08      	ldr	r2, [pc, #32]	; (800132c <SystemInit+0x60>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x60>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SystemInit+0x5c>)
 8001318:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800131c:	609a      	str	r2, [r3, #8]
#endif
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00
 800132c:	40023800 	.word	0x40023800
 8001330:	fef6ffff 	.word	0xfef6ffff
 8001334:	24003010 	.word	0x24003010

08001338 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <MX_TIM1_Init+0xa0>)
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <MX_TIM1_Init+0xa4>)
 800135a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_TIM1_Init+0xa0>)
 800135e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001362:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_TIM1_Init+0xa0>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_TIM1_Init+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_TIM1_Init+0xa0>)
 8001372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_TIM1_Init+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_TIM1_Init+0xa0>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <MX_TIM1_Init+0xa0>)
 8001386:	f002 feeb 	bl	8004160 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001390:	f7ff fde8 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_TIM1_Init+0xa0>)
 80013a2:	f002 ff35 	bl	8004210 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013ac:	f7ff fdda 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_TIM1_Init+0xa0>)
 80013c2:	f003 f925 	bl	8004610 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013cc:	f7ff fdca 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002e8 	.word	0x200002e8
 80013dc:	40010000 	.word	0x40010000

080013e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_TIM_Base_MspInit+0x38>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10b      	bne.n	800140a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_TIM_Base_MspInit+0x3c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_TIM_Base_MspInit+0x3c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_TIM_Base_MspInit+0x3c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40010000 	.word	0x40010000
 800141c:	40023800 	.word	0x40023800

08001420 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001426:	4a15      	ldr	r2, [pc, #84]	; (800147c <MX_USART3_UART_Init+0x5c>)
 8001428:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <MX_USART3_UART_Init+0x58>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_USART3_UART_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART3_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART3_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001464:	f003 f962 	bl	800472c <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800146e:	f7ff fd79 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000334 	.word	0x20000334
 800147c:	40004800 	.word	0x40004800

08001480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <HAL_UART_MspInit+0x8c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d130      	bne.n	8001504 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_UART_MspInit+0x90>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <HAL_UART_MspInit+0x90>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_UART_MspInit+0x90>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_UART_MspInit+0x90>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <HAL_UART_MspInit+0x90>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_UART_MspInit+0x90>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e4:	2307      	movs	r3, #7
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <HAL_UART_MspInit+0x94>)
 80014f0:	f000 ff70 	bl	80023d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2027      	movs	r0, #39	; 0x27
 80014fa:	f000 fea2 	bl	8002242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014fe:	2027      	movs	r0, #39	; 0x27
 8001500:	f000 febb 	bl	800227a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40004800 	.word	0x40004800
 8001510:	40023800 	.word	0x40023800
 8001514:	40020c00 	.word	0x40020c00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800151c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800151e:	e003      	b.n	8001528 <LoopCopyDataInit>

08001520 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001522:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001524:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001526:	3104      	adds	r1, #4

08001528 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800152c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001530:	d3f6      	bcc.n	8001520 <CopyDataInit>
  ldr  r2, =_sbss
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001534:	e002      	b.n	800153c <LoopFillZerobss>

08001536 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001536:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001538:	f842 3b04 	str.w	r3, [r2], #4

0800153c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800153e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001540:	d3f9      	bcc.n	8001536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001542:	f7ff fec3 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f004 ff45 	bl	80063d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff fb9b 	bl	8000c84 <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001550:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001554:	0800879c 	.word	0x0800879c
  ldr  r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800155c:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8001560:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001564:	20000508 	.word	0x20000508

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af02      	add	r7, sp, #8
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4623      	mov	r3, r4
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	4603      	mov	r3, r0
 8001580:	71bb      	strb	r3, [r7, #6]
 8001582:	460b      	mov	r3, r1
 8001584:	717b      	strb	r3, [r7, #5]
 8001586:	4613      	mov	r3, r2
 8001588:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b1f      	cmp	r3, #31
 8001592:	d802      	bhi.n	800159a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	e002      	b.n	80015a0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	3b20      	subs	r3, #32
 800159e:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	753b      	strb	r3, [r7, #20]
 80015a4:	e012      	b.n	80015cc <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80015a6:	7dfa      	ldrb	r2, [r7, #23]
 80015a8:	7d38      	ldrb	r0, [r7, #20]
 80015aa:	7d39      	ldrb	r1, [r7, #20]
 80015ac:	4c3b      	ldr	r4, [pc, #236]	; (800169c <ILI9341_Draw_Char+0x130>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4423      	add	r3, r4
 80015b8:	4403      	add	r3, r0
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	f101 0318 	add.w	r3, r1, #24
 80015c0:	443b      	add	r3, r7
 80015c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80015c6:	7d3b      	ldrb	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	753b      	strb	r3, [r7, #20]
 80015cc:	7d3b      	ldrb	r3, [r7, #20]
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d9e9      	bls.n	80015a6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	b298      	uxth	r0, r3
 80015d6:	797b      	ldrb	r3, [r7, #5]
 80015d8:	b299      	uxth	r1, r3
 80015da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015dc:	461a      	mov	r2, r3
 80015de:	0052      	lsls	r2, r2, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	b29c      	uxth	r4, r3
 80015ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4623      	mov	r3, r4
 80015f2:	f000 fc5f 	bl	8001eb4 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	757b      	strb	r3, [r7, #21]
 80015fa:	e047      	b.n	800168c <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	75bb      	strb	r3, [r7, #22]
 8001600:	e03e      	b.n	8001680 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001602:	7d7b      	ldrb	r3, [r7, #21]
 8001604:	3318      	adds	r3, #24
 8001606:	443b      	add	r3, r7
 8001608:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800160c:	461a      	mov	r2, r3
 800160e:	7dbb      	ldrb	r3, [r7, #22]
 8001610:	fa42 f303 	asr.w	r3, r2, r3
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02e      	beq.n	800167a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 800161c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800161e:	2b01      	cmp	r3, #1
 8001620:	d110      	bne.n	8001644 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	b29a      	uxth	r2, r3
 8001626:	7d7b      	ldrb	r3, [r7, #21]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b298      	uxth	r0, r3
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	b29a      	uxth	r2, r3
 8001632:	7dbb      	ldrb	r3, [r7, #22]
 8001634:	b29b      	uxth	r3, r3
 8001636:	4413      	add	r3, r2
 8001638:	b29b      	uxth	r3, r3
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	4619      	mov	r1, r3
 800163e:	f000 fb5f 	bl	8001d00 <ILI9341_Draw_Pixel>
 8001642:	e01a      	b.n	800167a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	b29a      	uxth	r2, r3
 8001648:	7d7b      	ldrb	r3, [r7, #21]
 800164a:	b29b      	uxth	r3, r3
 800164c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800164e:	fb11 f303 	smulbb	r3, r1, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	b298      	uxth	r0, r3
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	b29a      	uxth	r2, r3
 800165c:	7dbb      	ldrb	r3, [r7, #22]
 800165e:	b29b      	uxth	r3, r3
 8001660:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001662:	fb11 f303 	smulbb	r3, r1, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	4413      	add	r3, r2
 800166a:	b299      	uxth	r1, r3
 800166c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800166e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4623      	mov	r3, r4
 8001676:	f000 fc1d 	bl	8001eb4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800167a:	7dbb      	ldrb	r3, [r7, #22]
 800167c:	3301      	adds	r3, #1
 800167e:	75bb      	strb	r3, [r7, #22]
 8001680:	7dbb      	ldrb	r3, [r7, #22]
 8001682:	2b07      	cmp	r3, #7
 8001684:	d9bd      	bls.n	8001602 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001686:	7d7b      	ldrb	r3, [r7, #21]
 8001688:	3301      	adds	r3, #1
 800168a:	757b      	strb	r3, [r7, #21]
 800168c:	7d7b      	ldrb	r3, [r7, #21]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d9b4      	bls.n	80015fc <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	080081dc 	.word	0x080081dc

080016a0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	70fb      	strb	r3, [r7, #3]
 80016b2:	460b      	mov	r3, r1
 80016b4:	70bb      	strb	r3, [r7, #2]
 80016b6:	4613      	mov	r3, r2
 80016b8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80016ba:	e017      	b.n	80016ec <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	7818      	ldrb	r0, [r3, #0]
 80016c4:	883c      	ldrh	r4, [r7, #0]
 80016c6:	78ba      	ldrb	r2, [r7, #2]
 80016c8:	78f9      	ldrb	r1, [r7, #3]
 80016ca:	8bbb      	ldrh	r3, [r7, #28]
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	8b3b      	ldrh	r3, [r7, #24]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4623      	mov	r3, r4
 80016d4:	f7ff ff4a 	bl	800156c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80016d8:	8b3b      	ldrh	r3, [r7, #24]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	0052      	lsls	r2, r2, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	4413      	add	r3, r2
 80016ea:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e3      	bne.n	80016bc <ILI9341_Draw_Text+0x1c>
    }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}
	...

08001700 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8001704:	f7ff fc66 	bl	8000fd4 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001708:	f7fe ff80 	bl	800060c <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001712:	4802      	ldr	r0, [pc, #8]	; (800171c <ILI9341_SPI_Init+0x1c>)
 8001714:	f001 f80a 	bl	800272c <HAL_GPIO_WritePin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020800 	.word	0x40020800

08001720 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800172a:	1df9      	adds	r1, r7, #7
 800172c:	2301      	movs	r3, #1
 800172e:	2201      	movs	r2, #1
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <ILI9341_SPI_Send+0x20>)
 8001732:	f002 fa46 	bl	8003bc2 <HAL_SPI_Transmit>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000280 	.word	0x20000280

08001744 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <ILI9341_Write_Command+0x40>)
 8001756:	f000 ffe9 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <ILI9341_Write_Command+0x40>)
 8001762:	f000 ffe3 	bl	800272c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ffd9 	bl	8001720 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <ILI9341_Write_Command+0x40>)
 8001776:	f000 ffd9 	bl	800272c <HAL_GPIO_WritePin>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020800 	.word	0x40020800

08001788 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <ILI9341_Write_Data+0x40>)
 800179a:	f000 ffc7 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <ILI9341_Write_Data+0x40>)
 80017a6:	f000 ffc1 	bl	800272c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ffb7 	bl	8001720 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <ILI9341_Write_Data+0x40>)
 80017ba:	f000 ffb7 	bl	800272c <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40020800 	.word	0x40020800

080017cc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80017ea:	202a      	movs	r0, #42	; 0x2a
 80017ec:	f7ff ffaa 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ffc5 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ffc0 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	b29b      	uxth	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ffb9 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ffb4 	bl	8001788 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001820:	202b      	movs	r0, #43	; 0x2b
 8001822:	f7ff ff8f 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	b29b      	uxth	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ffaa 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ffa5 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800183e:	883b      	ldrh	r3, [r7, #0]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b29b      	uxth	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff9e 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800184c:	883b      	ldrh	r3, [r7, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff99 	bl	8001788 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001856:	202c      	movs	r0, #44	; 0x2c
 8001858:	f7ff ff74 	bl	8001744 <ILI9341_Write_Command>
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}

08001864 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800186e:	480b      	ldr	r0, [pc, #44]	; (800189c <ILI9341_Reset+0x38>)
 8001870:	f000 ff5c 	bl	800272c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001874:	20c8      	movs	r0, #200	; 0xc8
 8001876:	f000 fbe5 	bl	8002044 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001880:	4806      	ldr	r0, [pc, #24]	; (800189c <ILI9341_Reset+0x38>)
 8001882:	f000 ff53 	bl	800272c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001886:	20c8      	movs	r0, #200	; 0xc8
 8001888:	f000 fbdc 	bl	8002044 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001892:	4802      	ldr	r0, [pc, #8]	; (800189c <ILI9341_Reset+0x38>)
 8001894:	f000 ff4a 	bl	800272c <HAL_GPIO_WritePin>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40020800 	.word	0x40020800

080018a0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80018ae:	2036      	movs	r0, #54	; 0x36
 80018b0:	f7ff ff48 	bl	8001744 <ILI9341_Write_Command>
HAL_Delay(1);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f000 fbc5 	bl	8002044 <HAL_Delay>
	
switch(screen_rotation) 
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d837      	bhi.n	8001930 <ILI9341_Set_Rotation+0x90>
 80018c0:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <ILI9341_Set_Rotation+0x28>)
 80018c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c6:	bf00      	nop
 80018c8:	080018d9 	.word	0x080018d9
 80018cc:	080018ef 	.word	0x080018ef
 80018d0:	08001905 	.word	0x08001905
 80018d4:	0800191b 	.word	0x0800191b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80018d8:	2048      	movs	r0, #72	; 0x48
 80018da:	f7ff ff55 	bl	8001788 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <ILI9341_Set_Rotation+0x9c>)
 80018e0:	22f0      	movs	r2, #240	; 0xf0
 80018e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <ILI9341_Set_Rotation+0xa0>)
 80018e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018ea:	801a      	strh	r2, [r3, #0]
			break;
 80018ec:	e021      	b.n	8001932 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80018ee:	2028      	movs	r0, #40	; 0x28
 80018f0:	f7ff ff4a 	bl	8001788 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <ILI9341_Set_Rotation+0x9c>)
 80018f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <ILI9341_Set_Rotation+0xa0>)
 80018fe:	22f0      	movs	r2, #240	; 0xf0
 8001900:	801a      	strh	r2, [r3, #0]
			break;
 8001902:	e016      	b.n	8001932 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001904:	2088      	movs	r0, #136	; 0x88
 8001906:	f7ff ff3f 	bl	8001788 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <ILI9341_Set_Rotation+0x9c>)
 800190c:	22f0      	movs	r2, #240	; 0xf0
 800190e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <ILI9341_Set_Rotation+0xa0>)
 8001912:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001916:	801a      	strh	r2, [r3, #0]
			break;
 8001918:	e00b      	b.n	8001932 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800191a:	20e8      	movs	r0, #232	; 0xe8
 800191c:	f7ff ff34 	bl	8001788 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <ILI9341_Set_Rotation+0x9c>)
 8001922:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001926:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <ILI9341_Set_Rotation+0xa0>)
 800192a:	22f0      	movs	r2, #240	; 0xf0
 800192c:	801a      	strh	r2, [r3, #0]
			break;
 800192e:	e000      	b.n	8001932 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001930:	bf00      	nop
	}
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000006 	.word	0x20000006
 8001940:	20000004 	.word	0x20000004

08001944 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800194e:	4802      	ldr	r0, [pc, #8]	; (8001958 <ILI9341_Enable+0x14>)
 8001950:	f000 feec 	bl	800272c <HAL_GPIO_WritePin>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40020800 	.word	0x40020800

0800195c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001960:	f7ff fff0 	bl	8001944 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001964:	f7ff fecc 	bl	8001700 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001968:	f7ff ff7c 	bl	8001864 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff fee9 	bl	8001744 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001976:	f000 fb65 	bl	8002044 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800197a:	20cb      	movs	r0, #203	; 0xcb
 800197c:	f7ff fee2 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001980:	2039      	movs	r0, #57	; 0x39
 8001982:	f7ff ff01 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001986:	202c      	movs	r0, #44	; 0x2c
 8001988:	f7ff fefe 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fefb 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001992:	2034      	movs	r0, #52	; 0x34
 8001994:	f7ff fef8 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001998:	2002      	movs	r0, #2
 800199a:	f7ff fef5 	bl	8001788 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800199e:	20cf      	movs	r0, #207	; 0xcf
 80019a0:	f7ff fed0 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff feef 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80019aa:	20c1      	movs	r0, #193	; 0xc1
 80019ac:	f7ff feec 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80019b0:	2030      	movs	r0, #48	; 0x30
 80019b2:	f7ff fee9 	bl	8001788 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80019b6:	20e8      	movs	r0, #232	; 0xe8
 80019b8:	f7ff fec4 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80019bc:	2085      	movs	r0, #133	; 0x85
 80019be:	f7ff fee3 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fee0 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80019c8:	2078      	movs	r0, #120	; 0x78
 80019ca:	f7ff fedd 	bl	8001788 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80019ce:	20ea      	movs	r0, #234	; 0xea
 80019d0:	f7ff feb8 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fed7 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fed4 	bl	8001788 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80019e0:	20ed      	movs	r0, #237	; 0xed
 80019e2:	f7ff feaf 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80019e6:	2064      	movs	r0, #100	; 0x64
 80019e8:	f7ff fece 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f7ff fecb 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80019f2:	2012      	movs	r0, #18
 80019f4:	f7ff fec8 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80019f8:	2081      	movs	r0, #129	; 0x81
 80019fa:	f7ff fec5 	bl	8001788 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80019fe:	20f7      	movs	r0, #247	; 0xf7
 8001a00:	f7ff fea0 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001a04:	2020      	movs	r0, #32
 8001a06:	f7ff febf 	bl	8001788 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001a0a:	20c0      	movs	r0, #192	; 0xc0
 8001a0c:	f7ff fe9a 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001a10:	2023      	movs	r0, #35	; 0x23
 8001a12:	f7ff feb9 	bl	8001788 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001a16:	20c1      	movs	r0, #193	; 0xc1
 8001a18:	f7ff fe94 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001a1c:	2010      	movs	r0, #16
 8001a1e:	f7ff feb3 	bl	8001788 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001a22:	20c5      	movs	r0, #197	; 0xc5
 8001a24:	f7ff fe8e 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001a28:	203e      	movs	r0, #62	; 0x3e
 8001a2a:	f7ff fead 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001a2e:	2028      	movs	r0, #40	; 0x28
 8001a30:	f7ff feaa 	bl	8001788 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001a34:	20c7      	movs	r0, #199	; 0xc7
 8001a36:	f7ff fe85 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001a3a:	2086      	movs	r0, #134	; 0x86
 8001a3c:	f7ff fea4 	bl	8001788 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001a40:	2036      	movs	r0, #54	; 0x36
 8001a42:	f7ff fe7f 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001a46:	2048      	movs	r0, #72	; 0x48
 8001a48:	f7ff fe9e 	bl	8001788 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001a4c:	203a      	movs	r0, #58	; 0x3a
 8001a4e:	f7ff fe79 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001a52:	2055      	movs	r0, #85	; 0x55
 8001a54:	f7ff fe98 	bl	8001788 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001a58:	20b1      	movs	r0, #177	; 0xb1
 8001a5a:	f7ff fe73 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fe92 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001a64:	2018      	movs	r0, #24
 8001a66:	f7ff fe8f 	bl	8001788 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001a6a:	20b6      	movs	r0, #182	; 0xb6
 8001a6c:	f7ff fe6a 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001a70:	2008      	movs	r0, #8
 8001a72:	f7ff fe89 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001a76:	2082      	movs	r0, #130	; 0x82
 8001a78:	f7ff fe86 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001a7c:	2027      	movs	r0, #39	; 0x27
 8001a7e:	f7ff fe83 	bl	8001788 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001a82:	20f2      	movs	r0, #242	; 0xf2
 8001a84:	f7ff fe5e 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fe7d 	bl	8001788 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001a8e:	2026      	movs	r0, #38	; 0x26
 8001a90:	f7ff fe58 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fe77 	bl	8001788 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001a9a:	20e0      	movs	r0, #224	; 0xe0
 8001a9c:	f7ff fe52 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001aa0:	200f      	movs	r0, #15
 8001aa2:	f7ff fe71 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001aa6:	2031      	movs	r0, #49	; 0x31
 8001aa8:	f7ff fe6e 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001aac:	202b      	movs	r0, #43	; 0x2b
 8001aae:	f7ff fe6b 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001ab2:	200c      	movs	r0, #12
 8001ab4:	f7ff fe68 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001ab8:	200e      	movs	r0, #14
 8001aba:	f7ff fe65 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001abe:	2008      	movs	r0, #8
 8001ac0:	f7ff fe62 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001ac4:	204e      	movs	r0, #78	; 0x4e
 8001ac6:	f7ff fe5f 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001aca:	20f1      	movs	r0, #241	; 0xf1
 8001acc:	f7ff fe5c 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001ad0:	2037      	movs	r0, #55	; 0x37
 8001ad2:	f7ff fe59 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	f7ff fe56 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001adc:	2010      	movs	r0, #16
 8001ade:	f7ff fe53 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f7ff fe50 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001ae8:	200e      	movs	r0, #14
 8001aea:	f7ff fe4d 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001aee:	2009      	movs	r0, #9
 8001af0:	f7ff fe4a 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fe47 	bl	8001788 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001afa:	20e1      	movs	r0, #225	; 0xe1
 8001afc:	f7ff fe22 	bl	8001744 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fe41 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001b06:	200e      	movs	r0, #14
 8001b08:	f7ff fe3e 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001b0c:	2014      	movs	r0, #20
 8001b0e:	f7ff fe3b 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001b12:	2003      	movs	r0, #3
 8001b14:	f7ff fe38 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001b18:	2011      	movs	r0, #17
 8001b1a:	f7ff fe35 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001b1e:	2007      	movs	r0, #7
 8001b20:	f7ff fe32 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001b24:	2031      	movs	r0, #49	; 0x31
 8001b26:	f7ff fe2f 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001b2a:	20c1      	movs	r0, #193	; 0xc1
 8001b2c:	f7ff fe2c 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001b30:	2048      	movs	r0, #72	; 0x48
 8001b32:	f7ff fe29 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001b36:	2008      	movs	r0, #8
 8001b38:	f7ff fe26 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001b3c:	200f      	movs	r0, #15
 8001b3e:	f7ff fe23 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001b42:	200c      	movs	r0, #12
 8001b44:	f7ff fe20 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001b48:	2031      	movs	r0, #49	; 0x31
 8001b4a:	f7ff fe1d 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001b4e:	2036      	movs	r0, #54	; 0x36
 8001b50:	f7ff fe1a 	bl	8001788 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001b54:	200f      	movs	r0, #15
 8001b56:	f7ff fe17 	bl	8001788 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001b5a:	2011      	movs	r0, #17
 8001b5c:	f7ff fdf2 	bl	8001744 <ILI9341_Write_Command>
HAL_Delay(120);
 8001b60:	2078      	movs	r0, #120	; 0x78
 8001b62:	f000 fa6f 	bl	8002044 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001b66:	2029      	movs	r0, #41	; 0x29
 8001b68:	f7ff fdec 	bl	8001744 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff fe97 	bl	80018a0 <ILI9341_Set_Rotation>
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b7c:	b08d      	sub	sp, #52	; 0x34
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	6039      	str	r1, [r7, #0]
 8001b84:	80fb      	strh	r3, [r7, #6]
 8001b86:	466b      	mov	r3, sp
 8001b88:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b96:	d202      	bcs.n	8001b9e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b9c:	e002      	b.n	8001ba4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001b9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001baa:	4840      	ldr	r0, [pc, #256]	; (8001cac <ILI9341_Draw_Colour_Burst+0x134>)
 8001bac:	f000 fdbe 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb6:	483d      	ldr	r0, [pc, #244]	; (8001cac <ILI9341_Draw_Colour_Burst+0x134>)
 8001bb8:	f000 fdb8 	bl	800272c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bc8:	460b      	mov	r3, r1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	4688      	mov	r8, r1
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001be0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001be4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001be8:	2300      	movs	r3, #0
 8001bea:	460c      	mov	r4, r1
 8001bec:	461d      	mov	r5, r3
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	00eb      	lsls	r3, r5, #3
 8001bf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bfc:	00e2      	lsls	r2, r4, #3
 8001bfe:	1dcb      	adds	r3, r1, #7
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	ebad 0d03 	sub.w	sp, sp, r3
 8001c08:	466b      	mov	r3, sp
 8001c0a:	3300      	adds	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c12:	e00e      	b.n	8001c32 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	4413      	add	r3, r2
 8001c1a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c1e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	3301      	adds	r3, #1
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	b2d1      	uxtb	r1, r2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	3302      	adds	r3, #2
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3ec      	bcc.n	8001c14 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c54:	fb01 f202 	mul.w	r2, r1, r2
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	e009      	b.n	8001c7c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <ILI9341_Draw_Colour_Burst+0x138>)
 8001c72:	f001 ffa6 	bl	8003bc2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	3301      	adds	r3, #1
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3f1      	bcc.n	8001c68 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	230a      	movs	r3, #10
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	4808      	ldr	r0, [pc, #32]	; (8001cb0 <ILI9341_Draw_Colour_Burst+0x138>)
 8001c8e:	f001 ff98 	bl	8003bc2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <ILI9341_Draw_Colour_Burst+0x134>)
 8001c9a:	f000 fd47 	bl	800272c <HAL_GPIO_WritePin>
 8001c9e:	46b5      	mov	sp, r6
}
 8001ca0:	bf00      	nop
 8001ca2:	3734      	adds	r7, #52	; 0x34
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001caa:	bf00      	nop
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	20000280 	.word	0x20000280

08001cb4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <ILI9341_Fill_Screen+0x44>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <ILI9341_Fill_Screen+0x48>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7ff fd7d 	bl	80017cc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <ILI9341_Fill_Screen+0x44>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <ILI9341_Fill_Screen+0x48>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff44 	bl	8001b78 <ILI9341_Draw_Colour_Burst>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000006 	.word	0x20000006
 8001cfc:	20000004 	.word	0x20000004

08001d00 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	80bb      	strh	r3, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001d12:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <ILI9341_Draw_Pixel+0x1a4>)
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	88fa      	ldrh	r2, [r7, #6]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	f080 80be 	bcs.w	8001e9c <ILI9341_Draw_Pixel+0x19c>
 8001d20:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <ILI9341_Draw_Pixel+0x1a8>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	88ba      	ldrh	r2, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f080 80b7 	bcs.w	8001e9c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d34:	485d      	ldr	r0, [pc, #372]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001d36:	f000 fcf9 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d40:	485a      	ldr	r0, [pc, #360]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001d42:	f000 fcf3 	bl	800272c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001d46:	202a      	movs	r0, #42	; 0x2a
 8001d48:	f7ff fcea 	bl	8001720 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d52:	4856      	ldr	r0, [pc, #344]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001d54:	f000 fcea 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d5e:	4853      	ldr	r0, [pc, #332]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001d60:	f000 fce4 	bl	800272c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6a:	4850      	ldr	r0, [pc, #320]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001d6c:	f000 fcde 	bl	800272c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	753b      	strb	r3, [r7, #20]
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	757b      	strb	r3, [r7, #21]
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	3301      	adds	r3, #1
 8001d84:	121b      	asrs	r3, r3, #8
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	75bb      	strb	r3, [r7, #22]
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001d94:	f107 0114 	add.w	r1, r7, #20
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4844      	ldr	r0, [pc, #272]	; (8001eb0 <ILI9341_Draw_Pixel+0x1b0>)
 8001d9e:	f001 ff10 	bl	8003bc2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da8:	4840      	ldr	r0, [pc, #256]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001daa:	f000 fcbf 	bl	800272c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db4:	483d      	ldr	r0, [pc, #244]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001db6:	f000 fcb9 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc0:	483a      	ldr	r0, [pc, #232]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001dc2:	f000 fcb3 	bl	800272c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001dc6:	202b      	movs	r0, #43	; 0x2b
 8001dc8:	f7ff fcaa 	bl	8001720 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd2:	4836      	ldr	r0, [pc, #216]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001dd4:	f000 fcaa 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dde:	4833      	ldr	r0, [pc, #204]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001de0:	f000 fca4 	bl	800272c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dea:	4830      	ldr	r0, [pc, #192]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001dec:	f000 fc9e 	bl	800272c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001df0:	88bb      	ldrh	r3, [r7, #4]
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	743b      	strb	r3, [r7, #16]
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	747b      	strb	r3, [r7, #17]
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	3301      	adds	r3, #1
 8001e04:	121b      	asrs	r3, r3, #8
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	74bb      	strb	r3, [r7, #18]
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001e14:	f107 0110 	add.w	r1, r7, #16
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	4824      	ldr	r0, [pc, #144]	; (8001eb0 <ILI9341_Draw_Pixel+0x1b0>)
 8001e1e:	f001 fed0 	bl	8003bc2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e28:	4820      	ldr	r0, [pc, #128]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001e2a:	f000 fc7f 	bl	800272c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e34:	481d      	ldr	r0, [pc, #116]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001e36:	f000 fc79 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e40:	481a      	ldr	r0, [pc, #104]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001e42:	f000 fc73 	bl	800272c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001e46:	202c      	movs	r0, #44	; 0x2c
 8001e48:	f7ff fc6a 	bl	8001720 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e52:	4816      	ldr	r0, [pc, #88]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001e54:	f000 fc6a 	bl	800272c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5e:	4813      	ldr	r0, [pc, #76]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001e60:	f000 fc64 	bl	800272c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e6a:	4810      	ldr	r0, [pc, #64]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001e6c:	f000 fc5e 	bl	800272c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	733b      	strb	r3, [r7, #12]
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001e80:	f107 010c 	add.w	r1, r7, #12
 8001e84:	2301      	movs	r3, #1
 8001e86:	2202      	movs	r2, #2
 8001e88:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <ILI9341_Draw_Pixel+0x1b0>)
 8001e8a:	f001 fe9a 	bl	8003bc2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <ILI9341_Draw_Pixel+0x1ac>)
 8001e96:	f000 fc49 	bl	800272c <HAL_GPIO_WritePin>
 8001e9a:	e000      	b.n	8001e9e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001e9c:	bf00      	nop
	
}
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000006 	.word	0x20000006
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	20000280 	.word	0x20000280

08001eb4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4604      	mov	r4, r0
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	80fb      	strh	r3, [r7, #6]
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80bb      	strh	r3, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	807b      	strh	r3, [r7, #2]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <ILI9341_Draw_Rectangle+0xb0>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d23d      	bcs.n	8001f5a <ILI9341_Draw_Rectangle+0xa6>
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <ILI9341_Draw_Rectangle+0xb4>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	88ba      	ldrh	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d237      	bcs.n	8001f5a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001eea:	88fa      	ldrh	r2, [r7, #6]
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <ILI9341_Draw_Rectangle+0xb0>)
 8001ef2:	8812      	ldrh	r2, [r2, #0]
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	dd05      	ble.n	8001f06 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <ILI9341_Draw_Rectangle+0xb0>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001f06:	88ba      	ldrh	r2, [r7, #4]
 8001f08:	883b      	ldrh	r3, [r7, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <ILI9341_Draw_Rectangle+0xb4>)
 8001f0e:	8812      	ldrh	r2, [r2, #0]
 8001f10:	b292      	uxth	r2, r2
 8001f12:	4293      	cmp	r3, r2
 8001f14:	dd05      	ble.n	8001f22 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <ILI9341_Draw_Rectangle+0xb4>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	88bb      	ldrh	r3, [r7, #4]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4413      	add	r3, r2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29c      	uxth	r4, r3
 8001f2e:	88ba      	ldrh	r2, [r7, #4]
 8001f30:	883b      	ldrh	r3, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	88b9      	ldrh	r1, [r7, #4]
 8001f3c:	88f8      	ldrh	r0, [r7, #6]
 8001f3e:	4622      	mov	r2, r4
 8001f40:	f7ff fc44 	bl	80017cc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001f44:	883b      	ldrh	r3, [r7, #0]
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	8b3b      	ldrh	r3, [r7, #24]
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fe10 	bl	8001b78 <ILI9341_Draw_Colour_Burst>
 8001f58:	e000      	b.n	8001f5c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001f5a:	bf00      	nop
}
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000006 	.word	0x20000006
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_Init+0x34>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_Init+0x34>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_Init+0x34>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_Init+0x34>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f94f 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f000 f808 	bl	8001fa4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff f8a0 	bl	80010d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x54>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_InitTick+0x58>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f967 	bl	8002296 <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d80a      	bhi.n	8001fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f000 f92f 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	; (8002000 <HAL_InitTick+0x5c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	2000000c 	.word	0x2000000c
 8002000:	20000008 	.word	0x20000008

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2000000c 	.word	0x2000000c
 8002028:	200003b8 	.word	0x200003b8

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	200003b8 	.word	0x200003b8

08002044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff ffee 	bl	800202c <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d005      	beq.n	800206a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_Delay+0x44>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206a:	bf00      	nop
 800206c:	f7ff ffde 	bl	800202c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f7      	bhi.n	800206c <HAL_Delay+0x28>
  {
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000000c 	.word	0x2000000c

0800208c <__NVIC_SetPriorityGrouping>:
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <__NVIC_SetPriorityGrouping+0x40>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x40>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	05fa0000 	.word	0x05fa0000

080020d4 <__NVIC_GetPriorityGrouping>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_EnableIRQ>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db0b      	blt.n	800211a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <__NVIC_EnableIRQ+0x38>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	; (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff8e 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff29 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff3e 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff8e 	bl	8002180 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5d 	bl	800212c <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff31 	bl	80020f0 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa2 	bl	80021e8 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff feb6 	bl	800202c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d008      	beq.n	80022e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e052      	b.n	8002386 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0216 	bic.w	r2, r2, #22
 80022ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d103      	bne.n	8002310 <HAL_DMA_Abort+0x62>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0208 	bic.w	r2, r2, #8
 800231e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002330:	e013      	b.n	800235a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002332:	f7ff fe7b 	bl	800202c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b05      	cmp	r3, #5
 800233e:	d90c      	bls.n	800235a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e015      	b.n	8002386 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e4      	bne.n	8002332 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	223f      	movs	r2, #63	; 0x3f
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d004      	beq.n	80023ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e00c      	b.n	80023c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2205      	movs	r2, #5
 80023b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e175      	b.n	80026e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 8164 	bne.w	80026da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d00b      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002426:	2b11      	cmp	r3, #17
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b12      	cmp	r3, #18
 8002430:	d130      	bne.n	8002494 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 0201 	and.w	r2, r3, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x100>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b12      	cmp	r3, #18
 80024d2:	d123      	bne.n	800251c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80be 	beq.w	80026da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_GPIO_Init+0x324>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_GPIO_Init+0x324>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_GPIO_Init+0x324>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002576:	4a61      	ldr	r2, [pc, #388]	; (80026fc <HAL_GPIO_Init+0x328>)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_GPIO_Init+0x32c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d037      	beq.n	8002612 <HAL_GPIO_Init+0x23e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a57      	ldr	r2, [pc, #348]	; (8002704 <HAL_GPIO_Init+0x330>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d031      	beq.n	800260e <HAL_GPIO_Init+0x23a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a56      	ldr	r2, [pc, #344]	; (8002708 <HAL_GPIO_Init+0x334>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <HAL_GPIO_Init+0x236>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a55      	ldr	r2, [pc, #340]	; (800270c <HAL_GPIO_Init+0x338>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x232>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a54      	ldr	r2, [pc, #336]	; (8002710 <HAL_GPIO_Init+0x33c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x22e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a53      	ldr	r2, [pc, #332]	; (8002714 <HAL_GPIO_Init+0x340>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x22a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_GPIO_Init+0x344>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x226>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a51      	ldr	r2, [pc, #324]	; (800271c <HAL_GPIO_Init+0x348>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x222>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_GPIO_Init+0x34c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x21e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4f      	ldr	r2, [pc, #316]	; (8002724 <HAL_GPIO_Init+0x350>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x21a>
 80025ea:	2309      	movs	r3, #9
 80025ec:	e012      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025ee:	230a      	movs	r3, #10
 80025f0:	e010      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025f2:	2308      	movs	r3, #8
 80025f4:	e00e      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x240>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x240>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x240>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x240>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x240>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x328>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_GPIO_Init+0x354>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002656:	4a34      	ldr	r2, [pc, #208]	; (8002728 <HAL_GPIO_Init+0x354>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_GPIO_Init+0x354>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_GPIO_Init+0x354>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_GPIO_Init+0x354>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <HAL_GPIO_Init+0x354>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_GPIO_Init+0x354>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <HAL_GPIO_Init+0x354>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f ae86 	bls.w	80023f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40021800 	.word	0x40021800
 800271c:	40021c00 	.word	0x40021c00
 8002720:	40022000 	.word	0x40022000
 8002724:	40022400 	.word	0x40022400
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800276a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40007000 	.word	0x40007000

08002780 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_PWREx_EnableOverDrive+0x98>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a22      	ldr	r2, [pc, #136]	; (8002818 <HAL_PWREx_EnableOverDrive+0x98>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_PWREx_EnableOverDrive+0x98>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ae:	f7ff fc3d 	bl	800202c <HAL_GetTick>
 80027b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027b4:	e009      	b.n	80027ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027b6:	f7ff fc39 	bl	800202c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c4:	d901      	bls.n	80027ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e022      	b.n	8002810 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d6:	d1ee      	bne.n	80027b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0f      	ldr	r2, [pc, #60]	; (800281c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e4:	f7ff fc22 	bl	800202c <HAL_GetTick>
 80027e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027ea:	e009      	b.n	8002800 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027ec:	f7ff fc1e 	bl	800202c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027fa:	d901      	bls.n	8002800 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e007      	b.n	8002810 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800280c:	d1ee      	bne.n	80027ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000

08002820 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e29b      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8087 	beq.w	8002952 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002844:	4b96      	ldr	r3, [pc, #600]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b04      	cmp	r3, #4
 800284e:	d00c      	beq.n	800286a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002850:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d112      	bne.n	8002882 <HAL_RCC_OscConfig+0x62>
 800285c:	4b90      	ldr	r3, [pc, #576]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002868:	d10b      	bne.n	8002882 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286a:	4b8d      	ldr	r3, [pc, #564]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d06c      	beq.n	8002950 <HAL_RCC_OscConfig+0x130>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d168      	bne.n	8002950 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e275      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x7a>
 800288c:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a83      	ldr	r2, [pc, #524]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e02e      	b.n	80028f8 <HAL_RCC_OscConfig+0xd8>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x9c>
 80028a2:	4b7f      	ldr	r3, [pc, #508]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a7e      	ldr	r2, [pc, #504]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b7c      	ldr	r3, [pc, #496]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7b      	ldr	r2, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xd8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0xc0>
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a75      	ldr	r2, [pc, #468]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a72      	ldr	r2, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xd8>
 80028e0:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a6b      	ldr	r2, [pc, #428]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff fb94 	bl	800202c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff fb90 	bl	800202c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e229      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xe8>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff fb80 	bl	800202c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fb7c 	bl	800202c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e215      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x110>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d069      	beq.n	8002a32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295e:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b4d      	ldr	r3, [pc, #308]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x190>
 8002976:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x17a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1e9      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	493d      	ldr	r1, [pc, #244]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e040      	b.n	8002a32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a38      	ldr	r2, [pc, #224]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7ff fb32 	bl	800202c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029cc:	f7ff fb2e 	bl	800202c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1c7      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4929      	ldr	r1, [pc, #164]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
 80029fe:	e018      	b.n	8002a32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fb0e 	bl	800202c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a14:	f7ff fb0a 	bl	800202c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e1a3      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d038      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d019      	beq.n	8002a7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7ff faeb 	bl	800202c <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7ff fae7 	bl	800202c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e180      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x23a>
 8002a78:	e01a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <HAL_RCC_OscConfig+0x280>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7ff fad1 	bl	800202c <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7ff facd 	bl	800202c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d903      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e166      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
 8002aa0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	4b92      	ldr	r3, [pc, #584]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a4 	beq.w	8002c06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abe:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10d      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	4a88      	ldr	r2, [pc, #544]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad6:	4b86      	ldr	r3, [pc, #536]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae6:	4b83      	ldr	r3, [pc, #524]	; (8002cf4 <HAL_RCC_OscConfig+0x4d4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002af2:	4b80      	ldr	r3, [pc, #512]	; (8002cf4 <HAL_RCC_OscConfig+0x4d4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7f      	ldr	r2, [pc, #508]	; (8002cf4 <HAL_RCC_OscConfig+0x4d4>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afe:	f7ff fa95 	bl	800202c <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b06:	f7ff fa91 	bl	800202c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e12a      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b18:	4b76      	ldr	r3, [pc, #472]	; (8002cf4 <HAL_RCC_OscConfig+0x4d4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x31a>
 8002b2c:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a6f      	ldr	r2, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	e02d      	b.n	8002b96 <HAL_RCC_OscConfig+0x376>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x33c>
 8002b42:	4b6b      	ldr	r3, [pc, #428]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a6a      	ldr	r2, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4e:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a67      	ldr	r2, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCC_OscConfig+0x376>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x35e>
 8002b64:	4b62      	ldr	r3, [pc, #392]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a61      	ldr	r2, [pc, #388]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	4b5f      	ldr	r3, [pc, #380]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a5e      	ldr	r2, [pc, #376]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7c:	e00b      	b.n	8002b96 <HAL_RCC_OscConfig+0x376>
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a5b      	ldr	r2, [pc, #364]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7ff fa45 	bl	800202c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7ff fa41 	bl	800202c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0d8      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ee      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x386>
 8002bc8:	e014      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7ff fa2f 	bl	800202c <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7ff fa2b 	bl	800202c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0c2      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a3c      	ldr	r2, [pc, #240]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80ae 	beq.w	8002d6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d06d      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d14b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a31      	ldr	r2, [pc, #196]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff f9fc 	bl	800202c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7ff f9f8 	bl	800202c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e091      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	491b      	ldr	r1, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7ff f9ca 	bl	800202c <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7ff f9c6 	bl	800202c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e05f      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x47c>
 8002cba:	e057      	b.n	8002d6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7ff f9b0 	bl	800202c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7ff f9ac 	bl	800202c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e045      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCC_OscConfig+0x4d0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4b0>
 8002cee:	e03d      	b.n	8002d6c <HAL_RCC_OscConfig+0x54c>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_RCC_OscConfig+0x558>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d030      	beq.n	8002d68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d129      	bne.n	8002d68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d122      	bne.n	8002d68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d119      	bne.n	8002d68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d10f      	bne.n	8002d68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0d0      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d910      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b67      	ldr	r3, [pc, #412]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 020f 	bic.w	r2, r3, #15
 8002daa:	4965      	ldr	r1, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d040      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d115      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e073      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e06b      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5e:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 0203 	bic.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4936      	ldr	r1, [pc, #216]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e70:	f7ff f8dc 	bl	800202c <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7ff f8d8 	bl	800202c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e053      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1eb      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d210      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 020f 	bic.w	r2, r3, #15
 8002eb6:	4922      	ldr	r1, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1cc>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1d0>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1d4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f838 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	080081c4 	.word	0x080081c4
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000008 	.word	0x20000008

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b094      	sub	sp, #80	; 0x50
 8002f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f60:	2300      	movs	r3, #0
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f64:	2300      	movs	r3, #0
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6c:	4b79      	ldr	r3, [pc, #484]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	f200 80e1 	bhi.w	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x34>
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f86:	e0db      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f8c:	e0db      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f92:	e0d8      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	462b      	mov	r3, r5
 8002fca:	f04f 0000 	mov.w	r0, #0
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	0159      	lsls	r1, r3, #5
 8002fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd8:	0150      	lsls	r0, r2, #5
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4621      	mov	r1, r4
 8002fe0:	1a51      	subs	r1, r2, r1
 8002fe2:	6139      	str	r1, [r7, #16]
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	018b      	lsls	r3, r1, #6
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003002:	4651      	mov	r1, sl
 8003004:	018a      	lsls	r2, r1, #6
 8003006:	4651      	mov	r1, sl
 8003008:	ebb2 0801 	subs.w	r8, r2, r1
 800300c:	4659      	mov	r1, fp
 800300e:	eb63 0901 	sbc.w	r9, r3, r1
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003026:	4690      	mov	r8, r2
 8003028:	4699      	mov	r9, r3
 800302a:	4623      	mov	r3, r4
 800302c:	eb18 0303 	adds.w	r3, r8, r3
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	462b      	mov	r3, r5
 8003034:	eb49 0303 	adc.w	r3, r9, r3
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003046:	4629      	mov	r1, r5
 8003048:	024b      	lsls	r3, r1, #9
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003050:	4621      	mov	r1, r4
 8003052:	024a      	lsls	r2, r1, #9
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
 800305e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003064:	f7fd f954 	bl	8000310 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	e058      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	4618      	mov	r0, r3
 800307c:	4611      	mov	r1, r2
 800307e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
 8003088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800308c:	4642      	mov	r2, r8
 800308e:	464b      	mov	r3, r9
 8003090:	f04f 0000 	mov.w	r0, #0
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	0159      	lsls	r1, r3, #5
 800309a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309e:	0150      	lsls	r0, r2, #5
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4641      	mov	r1, r8
 80030a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030c4:	ebb2 040a 	subs.w	r4, r2, sl
 80030c8:	eb63 050b 	sbc.w	r5, r3, fp
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00eb      	lsls	r3, r5, #3
 80030d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	18e3      	adds	r3, r4, r3
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	464b      	mov	r3, r9
 80030e8:	eb45 0303 	adc.w	r3, r5, r3
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fa:	4629      	mov	r1, r5
 80030fc:	028b      	lsls	r3, r1, #10
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003104:	4621      	mov	r1, r4
 8003106:	028a      	lsls	r2, r1, #10
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	61fa      	str	r2, [r7, #28]
 8003114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003118:	f7fd f8fa 	bl	8000310 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003148:	4618      	mov	r0, r3
 800314a:	3750      	adds	r7, #80	; 0x50
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200

08003160 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_GetHCLKFreq+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000

08003178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800317c:	f7ff fff0 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK1Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	080081d4 	.word	0x080081d4

080031a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a4:	f7ff ffdc 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0b5b      	lsrs	r3, r3, #13
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	080081d4 	.word	0x080081d4

080031c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d012      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031f0:	4b69      	ldr	r3, [pc, #420]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a68      	ldr	r2, [pc, #416]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031fa:	6093      	str	r3, [r2, #8]
 80031fc:	4b66      	ldr	r3, [pc, #408]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	4964      	ldr	r1, [pc, #400]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d017      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	4959      	ldr	r1, [pc, #356]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003240:	d101      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003242:	2301      	movs	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800324e:	2301      	movs	r3, #1
 8003250:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d017      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800325e:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003264:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	494a      	ldr	r1, [pc, #296]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327c:	d101      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800327e:	2301      	movs	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800329a:	2301      	movs	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 808b 	beq.w	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	4a39      	ldr	r2, [pc, #228]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6413      	str	r3, [r2, #64]	; 0x40
 80032b8:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032c4:	4b35      	ldr	r3, [pc, #212]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a34      	ldr	r2, [pc, #208]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fe feac 	bl	800202c <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d8:	f7fe fea8 	bl	800202c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e38f      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032ea:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032f6:	4b28      	ldr	r3, [pc, #160]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d035      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	429a      	cmp	r2, r3
 8003312:	d02e      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003314:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003334:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003336:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d114      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fe70 	bl	800202c <HAL_GetTick>
 800334c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fe fe6c 	bl	800202c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e351      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0ee      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800337e:	d111      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800338e:	400b      	ands	r3, r1
 8003390:	4901      	ldr	r1, [pc, #4]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
 8003396:	e00b      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000
 80033a0:	0ffffcff 	.word	0x0ffffcff
 80033a4:	4bac      	ldr	r3, [pc, #688]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4aab      	ldr	r2, [pc, #684]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033ae:	6093      	str	r3, [r2, #8]
 80033b0:	4ba9      	ldr	r3, [pc, #676]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	49a6      	ldr	r1, [pc, #664]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d010      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ce:	4ba2      	ldr	r3, [pc, #648]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d4:	4aa0      	ldr	r2, [pc, #640]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033de:	4b9e      	ldr	r3, [pc, #632]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	499b      	ldr	r1, [pc, #620]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033fc:	4b96      	ldr	r3, [pc, #600]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340a:	4993      	ldr	r1, [pc, #588]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800341e:	4b8e      	ldr	r3, [pc, #568]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800342c:	498a      	ldr	r1, [pc, #552]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003440:	4b85      	ldr	r3, [pc, #532]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344e:	4982      	ldr	r1, [pc, #520]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003462:	4b7d      	ldr	r3, [pc, #500]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4979      	ldr	r1, [pc, #484]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003484:	4b74      	ldr	r3, [pc, #464]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4971      	ldr	r1, [pc, #452]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a6:	4b6c      	ldr	r3, [pc, #432]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f023 020c 	bic.w	r2, r3, #12
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	4968      	ldr	r1, [pc, #416]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c8:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	4960      	ldr	r1, [pc, #384]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ea:	4b5b      	ldr	r3, [pc, #364]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f8:	4957      	ldr	r1, [pc, #348]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350c:	4b52      	ldr	r3, [pc, #328]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	494f      	ldr	r1, [pc, #316]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800352e:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	4946      	ldr	r1, [pc, #280]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003550:	4b41      	ldr	r3, [pc, #260]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	493e      	ldr	r1, [pc, #248]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003572:	4b39      	ldr	r3, [pc, #228]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	4935      	ldr	r1, [pc, #212]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003594:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a2:	492d      	ldr	r1, [pc, #180]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d011      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c4:	4924      	ldr	r1, [pc, #144]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d4:	d101      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	4914      	ldr	r1, [pc, #80]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003628:	490b      	ldr	r1, [pc, #44]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00f      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364c:	4902      	ldr	r1, [pc, #8]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003654:	e002      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003668:	4b8a      	ldr	r3, [pc, #552]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800366a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	4986      	ldr	r1, [pc, #536]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00b      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800368c:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003692:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800369c:	497d      	ldr	r1, [pc, #500]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d006      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80d6 	beq.w	8003864 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036b8:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a75      	ldr	r2, [pc, #468]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c4:	f7fe fcb2 	bl	800202c <HAL_GetTick>
 80036c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036cc:	f7fe fcae 	bl	800202c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e195      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036de:	4b6d      	ldr	r3, [pc, #436]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d021      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11d      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800370c:	4b61      	ldr	r3, [pc, #388]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003712:	0e1b      	lsrs	r3, r3, #24
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	019a      	lsls	r2, r3, #6
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	071b      	lsls	r3, r3, #28
 8003732:	4958      	ldr	r1, [pc, #352]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02e      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003764:	d129      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003766:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003774:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377a:	0f1b      	lsrs	r3, r3, #28
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	019a      	lsls	r2, r3, #6
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	071b      	lsls	r3, r3, #28
 800379a:	493e      	ldr	r1, [pc, #248]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037a2:	4b3c      	ldr	r3, [pc, #240]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a8:	f023 021f 	bic.w	r2, r3, #31
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	3b01      	subs	r3, #1
 80037b2:	4938      	ldr	r1, [pc, #224]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01d      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037c6:	4b33      	ldr	r3, [pc, #204]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037cc:	0e1b      	lsrs	r3, r3, #24
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037d4:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037da:	0f1b      	lsrs	r3, r3, #28
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	019a      	lsls	r2, r3, #6
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	061b      	lsls	r3, r3, #24
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	071b      	lsls	r3, r3, #28
 80037fa:	4926      	ldr	r1, [pc, #152]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d011      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	019a      	lsls	r2, r3, #6
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	041b      	lsls	r3, r3, #16
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	071b      	lsls	r3, r3, #28
 800382a:	491a      	ldr	r1, [pc, #104]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003832:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a17      	ldr	r2, [pc, #92]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800383c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383e:	f7fe fbf5 	bl	800202c <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003846:	f7fe fbf1 	bl	800202c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b64      	cmp	r3, #100	; 0x64
 8003852:	d901      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0d8      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003858:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b01      	cmp	r3, #1
 8003868:	f040 80ce 	bne.w	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fe fbd8 	bl	800202c <HAL_GetTick>
 800387c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800387e:	e00b      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003880:	f7fe fbd4 	bl	800202c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d904      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0bb      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003898:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a4:	d0ec      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d02e      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d12a      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038ce:	4b51      	ldr	r3, [pc, #324]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038dc:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	0f1b      	lsrs	r3, r3, #28
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	019a      	lsls	r2, r3, #6
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	061b      	lsls	r3, r3, #24
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	071b      	lsls	r3, r3, #28
 8003902:	4944      	ldr	r1, [pc, #272]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800390a:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	493d      	ldr	r1, [pc, #244]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d022      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003938:	d11d      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800393a:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	0f1b      	lsrs	r3, r3, #28
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	019a      	lsls	r2, r3, #6
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	431a      	orrs	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	4929      	ldr	r1, [pc, #164]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d028      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	0e1b      	lsrs	r3, r3, #24
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003990:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	0c1b      	lsrs	r3, r3, #16
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	019a      	lsls	r2, r3, #6
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	431a      	orrs	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	071b      	lsls	r3, r3, #28
 80039b6:	4917      	ldr	r1, [pc, #92]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	4911      	ldr	r1, [pc, #68]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e0:	f7fe fb24 	bl	800202c <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039e8:	f7fe fb20 	bl	800202c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e007      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a06:	d1ef      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800

08003a18 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e01c      	b.n	8003a64 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	795b      	ldrb	r3, [r3, #5]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd faaa 	bl	8000f94 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0204 	orr.w	r2, r2, #4
 8003a54:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e09d      	b.n	8003bba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8e:	d009      	beq.n	8003aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
 8003a96:	e005      	b.n	8003aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fac6 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ada:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ae4:	d902      	bls.n	8003aec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e002      	b.n	8003af2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003afa:	d007      	beq.n	8003b0c <HAL_SPI_Init+0xa0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	ea42 0103 	orr.w	r1, r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	f003 0204 	and.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b88:	ea42 0103 	orr.w	r1, r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b088      	sub	sp, #32
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_SPI_Transmit+0x22>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e158      	b.n	8003e96 <HAL_SPI_Transmit+0x2d4>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bec:	f7fe fa1e 	bl	800202c <HAL_GetTick>
 8003bf0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c06:	e13d      	b.n	8003e84 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_SPI_Transmit+0x52>
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c18:	e134      	b.n	8003e84 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c64:	d10f      	bne.n	8003c86 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d007      	beq.n	8003ca4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cac:	d94b      	bls.n	8003d46 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_SPI_Transmit+0xfa>
 8003cb6:	8afb      	ldrh	r3, [r7, #22]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d13e      	bne.n	8003d3a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ce0:	e02b      	b.n	8003d3a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d112      	bne.n	8003d16 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	881a      	ldrh	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	1c9a      	adds	r2, r3, #2
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d14:	e011      	b.n	8003d3a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d16:	f7fe f989 	bl	800202c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d803      	bhi.n	8003d2e <HAL_SPI_Transmit+0x16c>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d102      	bne.n	8003d34 <HAL_SPI_Transmit+0x172>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d38:	e0a4      	b.n	8003e84 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ce      	bne.n	8003ce2 <HAL_SPI_Transmit+0x120>
 8003d44:	e07c      	b.n	8003e40 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_SPI_Transmit+0x192>
 8003d4e:	8afb      	ldrh	r3, [r7, #22]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d170      	bne.n	8003e36 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d912      	bls.n	8003d84 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b02      	subs	r3, #2
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d82:	e058      	b.n	8003e36 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	7812      	ldrb	r2, [r2, #0]
 8003d90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003daa:	e044      	b.n	8003e36 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d12b      	bne.n	8003e12 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d912      	bls.n	8003dea <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	1c9a      	adds	r2, r3, #2
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b02      	subs	r3, #2
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003de8:	e025      	b.n	8003e36 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e10:	e011      	b.n	8003e36 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e12:	f7fe f90b 	bl	800202c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d803      	bhi.n	8003e2a <HAL_SPI_Transmit+0x268>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d102      	bne.n	8003e30 <HAL_SPI_Transmit+0x26e>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e34:	e026      	b.n	8003e84 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1b5      	bne.n	8003dac <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f945 	bl	80040d4 <SPI_EndRxTxTransaction>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e000      	b.n	8003e84 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e94:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003eb0:	f7fe f8bc 	bl	800202c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ec0:	f7fe f8b4 	bl	800202c <HAL_GetTick>
 8003ec4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	015b      	lsls	r3, r3, #5
 8003ecc:	0d1b      	lsrs	r3, r3, #20
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	fb02 f303 	mul.w	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ed6:	e054      	b.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d050      	beq.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ee0:	f7fe f8a4 	bl	800202c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d902      	bls.n	8003ef6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d13d      	bne.n	8003f72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f0e:	d111      	bne.n	8003f34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f18:	d004      	beq.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f22:	d107      	bne.n	8003f34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3c:	d10f      	bne.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e017      	b.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d19b      	bne.n	8003ed8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3720      	adds	r7, #32
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000000 	.word	0x20000000

08003fb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fbe:	f7fe f835 	bl	800202c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	4413      	add	r3, r2
 8003fcc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fce:	f7fe f82d 	bl	800202c <HAL_GetTick>
 8003fd2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fd4:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00da      	lsls	r2, r3, #3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	0d1b      	lsrs	r3, r3, #20
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fec:	e062      	b.n	80040b4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ff4:	d109      	bne.n	800400a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004008:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d050      	beq.n	80040b4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004012:	f7fe f80b 	bl	800202c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	429a      	cmp	r2, r3
 8004020:	d902      	bls.n	8004028 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d13d      	bne.n	80040a4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004036:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004040:	d111      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404a:	d004      	beq.n	8004056 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004054:	d107      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004064:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406e:	d10f      	bne.n	8004090 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e010      	b.n	80040c6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d194      	bne.n	8003fee <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000000 	.word	0x20000000

080040d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff ff5f 	bl	8003fb0 <SPI_WaitFifoStateUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e027      	b.n	8004158 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff fec4 	bl	8003ea0 <SPI_WaitFlagStateUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e014      	b.n	8004158 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2200      	movs	r2, #0
 8004136:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff ff38 	bl	8003fb0 <SPI_WaitFifoStateUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e000      	b.n	8004158 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e049      	b.n	8004206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd f92a 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 f8fc 	bl	800439c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIM_ConfigClockSource+0x18>
 8004224:	2302      	movs	r3, #2
 8004226:	e0b3      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x180>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4b55      	ldr	r3, [pc, #340]	; (8004398 <HAL_TIM_ConfigClockSource+0x188>)
 8004244:	4013      	ands	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004260:	d03e      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0xd0>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	f200 8087 	bhi.w	8004378 <HAL_TIM_ConfigClockSource+0x168>
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	f000 8085 	beq.w	800437c <HAL_TIM_ConfigClockSource+0x16c>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d87f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004278:	2b70      	cmp	r3, #112	; 0x70
 800427a:	d01a      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0xa2>
 800427c:	2b70      	cmp	r3, #112	; 0x70
 800427e:	d87b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004280:	2b60      	cmp	r3, #96	; 0x60
 8004282:	d050      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x116>
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d877      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d03c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xf6>
 800428c:	2b50      	cmp	r3, #80	; 0x50
 800428e:	d873      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d058      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x136>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d86f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d064      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x156>
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d86b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d060      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x156>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d867      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05c      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x156>
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d05a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042b0:	e062      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6899      	ldr	r1, [r3, #8]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f000 f985 	bl	80045d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	609a      	str	r2, [r3, #8]
      break;
 80042de:	e04e      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f000 f96e 	bl	80045d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004302:	609a      	str	r2, [r3, #8]
      break;
 8004304:	e03b      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 f8e2 	bl	80044dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2150      	movs	r1, #80	; 0x50
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f93b 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 8004324:	e02b      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 f901 	bl	800453a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2160      	movs	r1, #96	; 0x60
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f92b 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 8004344:	e01b      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 f8c2 	bl	80044dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f91b 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 8004364:	e00b      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 f912 	bl	800459a <TIM_ITRx_SetConfig>
        break;
 8004376:	e002      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800437c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	fffeff88 	.word	0xfffeff88

0800439c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a40      	ldr	r2, [pc, #256]	; (80044b0 <TIM_Base_SetConfig+0x114>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d00f      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a3d      	ldr	r2, [pc, #244]	; (80044b4 <TIM_Base_SetConfig+0x118>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a3c      	ldr	r2, [pc, #240]	; (80044b8 <TIM_Base_SetConfig+0x11c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a3b      	ldr	r2, [pc, #236]	; (80044bc <TIM_Base_SetConfig+0x120>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a3a      	ldr	r2, [pc, #232]	; (80044c0 <TIM_Base_SetConfig+0x124>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2f      	ldr	r2, [pc, #188]	; (80044b0 <TIM_Base_SetConfig+0x114>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d02b      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fc:	d027      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2c      	ldr	r2, [pc, #176]	; (80044b4 <TIM_Base_SetConfig+0x118>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d023      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <TIM_Base_SetConfig+0x11c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01f      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <TIM_Base_SetConfig+0x120>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01b      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <TIM_Base_SetConfig+0x124>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d017      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a28      	ldr	r2, [pc, #160]	; (80044c4 <TIM_Base_SetConfig+0x128>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <TIM_Base_SetConfig+0x12c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00f      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a26      	ldr	r2, [pc, #152]	; (80044cc <TIM_Base_SetConfig+0x130>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <TIM_Base_SetConfig+0x134>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <TIM_Base_SetConfig+0x138>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a23      	ldr	r2, [pc, #140]	; (80044d8 <TIM_Base_SetConfig+0x13c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d108      	bne.n	8004460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0a      	ldr	r2, [pc, #40]	; (80044b0 <TIM_Base_SetConfig+0x114>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_Base_SetConfig+0xf8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <TIM_Base_SetConfig+0x124>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d103      	bne.n	800449c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	615a      	str	r2, [r3, #20]
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40010400 	.word	0x40010400
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40014800 	.word	0x40014800
 80044d0:	40001800 	.word	0x40001800
 80044d4:	40001c00 	.word	0x40001c00
 80044d8:	40002000 	.word	0x40002000

080044dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f023 030a 	bic.w	r3, r3, #10
 8004518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800453a:	b480      	push	{r7}
 800453c:	b087      	sub	sp, #28
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 0210 	bic.w	r2, r3, #16
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	031b      	lsls	r3, r3, #12
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004576:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f043 0307 	orr.w	r3, r3, #7
 80045bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	021a      	lsls	r2, r3, #8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004624:	2302      	movs	r3, #2
 8004626:	e06d      	b.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a30      	ldr	r2, [pc, #192]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d108      	bne.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a20      	ldr	r2, [pc, #128]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d022      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469a:	d01d      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d018      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1c      	ldr	r2, [pc, #112]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a15      	ldr	r2, [pc, #84]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d009      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a16      	ldr	r2, [pc, #88]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10c      	bne.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40010000 	.word	0x40010000
 8004714:	40010400 	.word	0x40010400
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40014000 	.word	0x40014000
 8004728:	40001800 	.word	0x40001800

0800472c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e040      	b.n	80047c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc fe96 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fb26 	bl	8004dbc <UART_SetConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e022      	b.n	80047c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fd7e 	bl	8005284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fe05 	bl	80053c8 <UART_CheckIdleState>
 80047be:	4603      	mov	r3, r0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047dc:	2b20      	cmp	r3, #32
 80047de:	f040 8081 	bne.w	80048e4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Transmit+0x26>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e079      	b.n	80048e6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Transmit+0x38>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e072      	b.n	80048e6 <HAL_UART_Transmit+0x11e>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2221      	movs	r2, #33	; 0x21
 8004814:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004816:	f7fd fc09 	bl	800202c <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004834:	d108      	bne.n	8004848 <HAL_UART_Transmit+0x80>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	e003      	b.n	8004850 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004858:	e02c      	b.n	80048b4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fdf8 	bl	800545a <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e038      	b.n	80048e6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004888:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	3302      	adds	r3, #2
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	e007      	b.n	80048a2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3301      	adds	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1cc      	bne.n	800485a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 fdc5 	bl	800545a <UART_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e005      	b.n	80048e6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	4613      	mov	r3, r2
 80048fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004900:	2b20      	cmp	r3, #32
 8004902:	d12c      	bne.n	800495e <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_UART_Receive_IT+0x22>
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e025      	b.n	8004960 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_UART_Receive_IT+0x34>
 800491e:	2302      	movs	r3, #2
 8004920:	e01e      	b.n	8004960 <HAL_UART_Receive_IT+0x72>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800494c:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	461a      	mov	r2, r3
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fdfd 	bl	8005554 <UART_Start_Receive_IT>
 800495a:	4603      	mov	r3, r0
 800495c:	e000      	b.n	8004960 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
  }
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	f640 030f 	movw	r3, #2063	; 0x80f
 800498e:	4013      	ands	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d113      	bne.n	80049c0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00e      	beq.n	80049c0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 81cd 	beq.w	8004d50 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
      }
      return;
 80049be:	e1c7      	b.n	8004d50 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80e8 	beq.w	8004b98 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4b6e      	ldr	r3, [pc, #440]	; (8004b90 <HAL_UART_IRQHandler+0x228>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80dd 	beq.w	8004b98 <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d010      	beq.n	8004a0a <HAL_UART_IRQHandler+0xa2>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2201      	movs	r2, #1
 80049f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a00:	f043 0201 	orr.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d010      	beq.n	8004a36 <HAL_UART_IRQHandler+0xce>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2202      	movs	r2, #2
 8004a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a2c:	f043 0204 	orr.w	r2, r3, #4
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d010      	beq.n	8004a62 <HAL_UART_IRQHandler+0xfa>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a58:	f043 0202 	orr.w	r2, r3, #2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2208      	movs	r2, #8
 8004a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a8e:	f043 0208 	orr.w	r2, r3, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d011      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x15e>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8141 	beq.w	8004d54 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004afc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d004      	beq.n	8004b16 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d031      	beq.n	8004b7a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fda4 	bl	8005664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d123      	bne.n	8004b72 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b38:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <HAL_UART_IRQHandler+0x22c>)
 8004b48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd fc1d 	bl	800238e <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00f      	b.n	8004b8a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f906 	bl	8004d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00b      	b.n	8004b8a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f902 	bl	8004d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e007      	b.n	8004b8a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8fe 	bl	8004d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004b88:	e0e4      	b.n	8004d54 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8a:	bf00      	nop
    return;
 8004b8c:	e0e2      	b.n	8004d54 <HAL_UART_IRQHandler+0x3ec>
 8004b8e:	bf00      	nop
 8004b90:	04000120 	.word	0x04000120
 8004b94:	080056c3 	.word	0x080056c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	f040 80a3 	bne.w	8004ce8 <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 809d 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8097 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2210      	movs	r2, #16
 8004bc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d152      	bne.n	8004c76 <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004bda:	893b      	ldrh	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80bb 	beq.w	8004d58 <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004be8:	893a      	ldrh	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	f080 80b4 	bcs.w	8004d58 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	893a      	ldrh	r2, [r7, #8]
 8004bf4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c02:	d02a      	beq.n	8004c5a <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c12:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c32:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0210 	bic.w	r2, r2, #16
 8004c4e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fd fb2a 	bl	80022ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f88e 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c74:	e070      	b.n	8004d58 <HAL_UART_IRQHandler+0x3f0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d063      	beq.n	8004d5c <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 8004c94:	897b      	ldrh	r3, [r7, #10]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d060      	beq.n	8004d5c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0210 	bic.w	r2, r2, #16
 8004cda:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cdc:	897b      	ldrh	r3, [r7, #10]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f855 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ce6:	e039      	b.n	8004d5c <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <HAL_UART_IRQHandler+0x3a6>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f84e 	bl	8004da8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d0c:	e029      	b.n	8004d62 <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00d      	beq.n	8004d34 <HAL_UART_IRQHandler+0x3cc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_UART_IRQHandler+0x3cc>
  {
    if (huart->TxISR != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01a      	beq.n	8004d60 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
    }
    return;
 8004d32:	e015      	b.n	8004d60 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d011      	beq.n	8004d62 <HAL_UART_IRQHandler+0x3fa>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00c      	beq.n	8004d62 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fcd0 	bl	80056ee <UART_EndTransmit_IT>
    return;
 8004d4e:	e008      	b.n	8004d62 <HAL_UART_IRQHandler+0x3fa>
      return;
 8004d50:	bf00      	nop
 8004d52:	e006      	b.n	8004d62 <HAL_UART_IRQHandler+0x3fa>
    return;
 8004d54:	bf00      	nop
 8004d56:	e004      	b.n	8004d62 <HAL_UART_IRQHandler+0x3fa>
      return;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <HAL_UART_IRQHandler+0x3fa>
      return;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <HAL_UART_IRQHandler+0x3fa>
    return;
 8004d60:	bf00      	nop
  }

}
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4ba6      	ldr	r3, [pc, #664]	; (8005080 <UART_SetConfig+0x2c4>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	6979      	ldr	r1, [r7, #20]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a94      	ldr	r2, [pc, #592]	; (8005084 <UART_SetConfig+0x2c8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d120      	bne.n	8004e7a <UART_SetConfig+0xbe>
 8004e38:	4b93      	ldr	r3, [pc, #588]	; (8005088 <UART_SetConfig+0x2cc>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d816      	bhi.n	8004e74 <UART_SetConfig+0xb8>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0x90>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e5d 	.word	0x08004e5d
 8004e50:	08004e69 	.word	0x08004e69
 8004e54:	08004e63 	.word	0x08004e63
 8004e58:	08004e6f 	.word	0x08004e6f
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e150      	b.n	8005104 <UART_SetConfig+0x348>
 8004e62:	2302      	movs	r3, #2
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e14d      	b.n	8005104 <UART_SetConfig+0x348>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e14a      	b.n	8005104 <UART_SetConfig+0x348>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e147      	b.n	8005104 <UART_SetConfig+0x348>
 8004e74:	2310      	movs	r3, #16
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e144      	b.n	8005104 <UART_SetConfig+0x348>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a83      	ldr	r2, [pc, #524]	; (800508c <UART_SetConfig+0x2d0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d132      	bne.n	8004eea <UART_SetConfig+0x12e>
 8004e84:	4b80      	ldr	r3, [pc, #512]	; (8005088 <UART_SetConfig+0x2cc>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b0c      	cmp	r3, #12
 8004e90:	d828      	bhi.n	8004ee4 <UART_SetConfig+0x128>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <UART_SetConfig+0xdc>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ecd 	.word	0x08004ecd
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004ee5 	.word	0x08004ee5
 8004ea4:	08004ee5 	.word	0x08004ee5
 8004ea8:	08004ed9 	.word	0x08004ed9
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004ed3 	.word	0x08004ed3
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004ee5 	.word	0x08004ee5
 8004ec8:	08004edf 	.word	0x08004edf
 8004ecc:	2300      	movs	r3, #0
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e118      	b.n	8005104 <UART_SetConfig+0x348>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e115      	b.n	8005104 <UART_SetConfig+0x348>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e112      	b.n	8005104 <UART_SetConfig+0x348>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e10f      	b.n	8005104 <UART_SetConfig+0x348>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e10c      	b.n	8005104 <UART_SetConfig+0x348>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a68      	ldr	r2, [pc, #416]	; (8005090 <UART_SetConfig+0x2d4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d120      	bne.n	8004f36 <UART_SetConfig+0x17a>
 8004ef4:	4b64      	ldr	r3, [pc, #400]	; (8005088 <UART_SetConfig+0x2cc>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004efe:	2b30      	cmp	r3, #48	; 0x30
 8004f00:	d013      	beq.n	8004f2a <UART_SetConfig+0x16e>
 8004f02:	2b30      	cmp	r3, #48	; 0x30
 8004f04:	d814      	bhi.n	8004f30 <UART_SetConfig+0x174>
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d009      	beq.n	8004f1e <UART_SetConfig+0x162>
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d810      	bhi.n	8004f30 <UART_SetConfig+0x174>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <UART_SetConfig+0x15c>
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d006      	beq.n	8004f24 <UART_SetConfig+0x168>
 8004f16:	e00b      	b.n	8004f30 <UART_SetConfig+0x174>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e0f2      	b.n	8005104 <UART_SetConfig+0x348>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e0ef      	b.n	8005104 <UART_SetConfig+0x348>
 8004f24:	2304      	movs	r3, #4
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e0ec      	b.n	8005104 <UART_SetConfig+0x348>
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e0e9      	b.n	8005104 <UART_SetConfig+0x348>
 8004f30:	2310      	movs	r3, #16
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e0e6      	b.n	8005104 <UART_SetConfig+0x348>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a56      	ldr	r2, [pc, #344]	; (8005094 <UART_SetConfig+0x2d8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d120      	bne.n	8004f82 <UART_SetConfig+0x1c6>
 8004f40:	4b51      	ldr	r3, [pc, #324]	; (8005088 <UART_SetConfig+0x2cc>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f4c:	d013      	beq.n	8004f76 <UART_SetConfig+0x1ba>
 8004f4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f50:	d814      	bhi.n	8004f7c <UART_SetConfig+0x1c0>
 8004f52:	2b80      	cmp	r3, #128	; 0x80
 8004f54:	d009      	beq.n	8004f6a <UART_SetConfig+0x1ae>
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d810      	bhi.n	8004f7c <UART_SetConfig+0x1c0>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <UART_SetConfig+0x1a8>
 8004f5e:	2b40      	cmp	r3, #64	; 0x40
 8004f60:	d006      	beq.n	8004f70 <UART_SetConfig+0x1b4>
 8004f62:	e00b      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004f64:	2300      	movs	r3, #0
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e0cc      	b.n	8005104 <UART_SetConfig+0x348>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e0c9      	b.n	8005104 <UART_SetConfig+0x348>
 8004f70:	2304      	movs	r3, #4
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e0c6      	b.n	8005104 <UART_SetConfig+0x348>
 8004f76:	2308      	movs	r3, #8
 8004f78:	77fb      	strb	r3, [r7, #31]
 8004f7a:	e0c3      	b.n	8005104 <UART_SetConfig+0x348>
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e0c0      	b.n	8005104 <UART_SetConfig+0x348>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a44      	ldr	r2, [pc, #272]	; (8005098 <UART_SetConfig+0x2dc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d125      	bne.n	8004fd8 <UART_SetConfig+0x21c>
 8004f8c:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <UART_SetConfig+0x2cc>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9a:	d017      	beq.n	8004fcc <UART_SetConfig+0x210>
 8004f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa0:	d817      	bhi.n	8004fd2 <UART_SetConfig+0x216>
 8004fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa6:	d00b      	beq.n	8004fc0 <UART_SetConfig+0x204>
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fac:	d811      	bhi.n	8004fd2 <UART_SetConfig+0x216>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <UART_SetConfig+0x1fe>
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb6:	d006      	beq.n	8004fc6 <UART_SetConfig+0x20a>
 8004fb8:	e00b      	b.n	8004fd2 <UART_SetConfig+0x216>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e0a1      	b.n	8005104 <UART_SetConfig+0x348>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e09e      	b.n	8005104 <UART_SetConfig+0x348>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e09b      	b.n	8005104 <UART_SetConfig+0x348>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e098      	b.n	8005104 <UART_SetConfig+0x348>
 8004fd2:	2310      	movs	r3, #16
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e095      	b.n	8005104 <UART_SetConfig+0x348>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <UART_SetConfig+0x2e0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d125      	bne.n	800502e <UART_SetConfig+0x272>
 8004fe2:	4b29      	ldr	r3, [pc, #164]	; (8005088 <UART_SetConfig+0x2cc>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff0:	d017      	beq.n	8005022 <UART_SetConfig+0x266>
 8004ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff6:	d817      	bhi.n	8005028 <UART_SetConfig+0x26c>
 8004ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffc:	d00b      	beq.n	8005016 <UART_SetConfig+0x25a>
 8004ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005002:	d811      	bhi.n	8005028 <UART_SetConfig+0x26c>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <UART_SetConfig+0x254>
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d006      	beq.n	800501c <UART_SetConfig+0x260>
 800500e:	e00b      	b.n	8005028 <UART_SetConfig+0x26c>
 8005010:	2301      	movs	r3, #1
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e076      	b.n	8005104 <UART_SetConfig+0x348>
 8005016:	2302      	movs	r3, #2
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e073      	b.n	8005104 <UART_SetConfig+0x348>
 800501c:	2304      	movs	r3, #4
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e070      	b.n	8005104 <UART_SetConfig+0x348>
 8005022:	2308      	movs	r3, #8
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e06d      	b.n	8005104 <UART_SetConfig+0x348>
 8005028:	2310      	movs	r3, #16
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e06a      	b.n	8005104 <UART_SetConfig+0x348>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <UART_SetConfig+0x2e4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d138      	bne.n	80050aa <UART_SetConfig+0x2ee>
 8005038:	4b13      	ldr	r3, [pc, #76]	; (8005088 <UART_SetConfig+0x2cc>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005042:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005046:	d017      	beq.n	8005078 <UART_SetConfig+0x2bc>
 8005048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800504c:	d82a      	bhi.n	80050a4 <UART_SetConfig+0x2e8>
 800504e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005052:	d00b      	beq.n	800506c <UART_SetConfig+0x2b0>
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005058:	d824      	bhi.n	80050a4 <UART_SetConfig+0x2e8>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <UART_SetConfig+0x2aa>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005062:	d006      	beq.n	8005072 <UART_SetConfig+0x2b6>
 8005064:	e01e      	b.n	80050a4 <UART_SetConfig+0x2e8>
 8005066:	2300      	movs	r3, #0
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e04b      	b.n	8005104 <UART_SetConfig+0x348>
 800506c:	2302      	movs	r3, #2
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e048      	b.n	8005104 <UART_SetConfig+0x348>
 8005072:	2304      	movs	r3, #4
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e045      	b.n	8005104 <UART_SetConfig+0x348>
 8005078:	2308      	movs	r3, #8
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e042      	b.n	8005104 <UART_SetConfig+0x348>
 800507e:	bf00      	nop
 8005080:	efff69f3 	.word	0xefff69f3
 8005084:	40011000 	.word	0x40011000
 8005088:	40023800 	.word	0x40023800
 800508c:	40004400 	.word	0x40004400
 8005090:	40004800 	.word	0x40004800
 8005094:	40004c00 	.word	0x40004c00
 8005098:	40005000 	.word	0x40005000
 800509c:	40011400 	.word	0x40011400
 80050a0:	40007800 	.word	0x40007800
 80050a4:	2310      	movs	r3, #16
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e02c      	b.n	8005104 <UART_SetConfig+0x348>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a72      	ldr	r2, [pc, #456]	; (8005278 <UART_SetConfig+0x4bc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d125      	bne.n	8005100 <UART_SetConfig+0x344>
 80050b4:	4b71      	ldr	r3, [pc, #452]	; (800527c <UART_SetConfig+0x4c0>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050c2:	d017      	beq.n	80050f4 <UART_SetConfig+0x338>
 80050c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050c8:	d817      	bhi.n	80050fa <UART_SetConfig+0x33e>
 80050ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ce:	d00b      	beq.n	80050e8 <UART_SetConfig+0x32c>
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d4:	d811      	bhi.n	80050fa <UART_SetConfig+0x33e>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <UART_SetConfig+0x326>
 80050da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050de:	d006      	beq.n	80050ee <UART_SetConfig+0x332>
 80050e0:	e00b      	b.n	80050fa <UART_SetConfig+0x33e>
 80050e2:	2300      	movs	r3, #0
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e00d      	b.n	8005104 <UART_SetConfig+0x348>
 80050e8:	2302      	movs	r3, #2
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e00a      	b.n	8005104 <UART_SetConfig+0x348>
 80050ee:	2304      	movs	r3, #4
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e007      	b.n	8005104 <UART_SetConfig+0x348>
 80050f4:	2308      	movs	r3, #8
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e004      	b.n	8005104 <UART_SetConfig+0x348>
 80050fa:	2310      	movs	r3, #16
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e001      	b.n	8005104 <UART_SetConfig+0x348>
 8005100:	2310      	movs	r3, #16
 8005102:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510c:	d15c      	bne.n	80051c8 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800510e:	7ffb      	ldrb	r3, [r7, #31]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d828      	bhi.n	8005166 <UART_SetConfig+0x3aa>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x360>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005141 	.word	0x08005141
 8005120:	08005149 	.word	0x08005149
 8005124:	08005151 	.word	0x08005151
 8005128:	08005167 	.word	0x08005167
 800512c:	08005157 	.word	0x08005157
 8005130:	08005167 	.word	0x08005167
 8005134:	08005167 	.word	0x08005167
 8005138:	08005167 	.word	0x08005167
 800513c:	0800515f 	.word	0x0800515f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005140:	f7fe f81a 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 8005144:	61b8      	str	r0, [r7, #24]
        break;
 8005146:	e013      	b.n	8005170 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7fe f82a 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 800514c:	61b8      	str	r0, [r7, #24]
        break;
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005150:	4b4b      	ldr	r3, [pc, #300]	; (8005280 <UART_SetConfig+0x4c4>)
 8005152:	61bb      	str	r3, [r7, #24]
        break;
 8005154:	e00c      	b.n	8005170 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005156:	f7fd fefd 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 800515a:	61b8      	str	r0, [r7, #24]
        break;
 800515c:	e008      	b.n	8005170 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	61bb      	str	r3, [r7, #24]
        break;
 8005164:	e004      	b.n	8005170 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	77bb      	strb	r3, [r7, #30]
        break;
 800516e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d074      	beq.n	8005260 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	005a      	lsls	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	b29b      	uxth	r3, r3
 800518c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b0f      	cmp	r3, #15
 8005192:	d916      	bls.n	80051c2 <UART_SetConfig+0x406>
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519a:	d212      	bcs.n	80051c2 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f023 030f 	bic.w	r3, r3, #15
 80051a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	89fb      	ldrh	r3, [r7, #14]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	89fa      	ldrh	r2, [r7, #14]
 80051be:	60da      	str	r2, [r3, #12]
 80051c0:	e04e      	b.n	8005260 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77bb      	strb	r3, [r7, #30]
 80051c6:	e04b      	b.n	8005260 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d827      	bhi.n	800521e <UART_SetConfig+0x462>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <UART_SetConfig+0x418>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	08005201 	.word	0x08005201
 80051dc:	08005209 	.word	0x08005209
 80051e0:	0800521f 	.word	0x0800521f
 80051e4:	0800520f 	.word	0x0800520f
 80051e8:	0800521f 	.word	0x0800521f
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	0800521f 	.word	0x0800521f
 80051f4:	08005217 	.word	0x08005217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f8:	f7fd ffbe 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 80051fc:	61b8      	str	r0, [r7, #24]
        break;
 80051fe:	e013      	b.n	8005228 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005200:	f7fd ffce 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8005204:	61b8      	str	r0, [r7, #24]
        break;
 8005206:	e00f      	b.n	8005228 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <UART_SetConfig+0x4c4>)
 800520a:	61bb      	str	r3, [r7, #24]
        break;
 800520c:	e00c      	b.n	8005228 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520e:	f7fd fea1 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8005212:	61b8      	str	r0, [r7, #24]
        break;
 8005214:	e008      	b.n	8005228 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521a:	61bb      	str	r3, [r7, #24]
        break;
 800521c:	e004      	b.n	8005228 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	77bb      	strb	r3, [r7, #30]
        break;
 8005226:	bf00      	nop
    }

    if (pclk != 0U)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	085a      	lsrs	r2, r3, #1
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	441a      	add	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	b29b      	uxth	r3, r3
 8005242:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b0f      	cmp	r3, #15
 8005248:	d908      	bls.n	800525c <UART_SetConfig+0x4a0>
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005250:	d204      	bcs.n	800525c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	e001      	b.n	8005260 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800526c:	7fbb      	ldrb	r3, [r7, #30]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40007c00 	.word	0x40007c00
 800527c:	40023800 	.word	0x40023800
 8005280:	00f42400 	.word	0x00f42400

08005284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01a      	beq.n	800539a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005382:	d10a      	bne.n	800539a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d8:	f7fc fe28 	bl	800202c <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d10e      	bne.n	800540a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f82d 	bl	800545a <UART_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e023      	b.n	8005452 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d10e      	bne.n	8005436 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f817 	bl	800545a <UART_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e00d      	b.n	8005452 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546a:	e05e      	b.n	800552a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d05a      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005474:	f7fc fdda 	bl	800202c <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <UART_WaitOnFlagUntilTimeout+0x30>
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11b      	bne.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005498:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e043      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02c      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054de:	d124      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e00f      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d091      	beq.n	800546c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	d10e      	bne.n	80055a6 <UART_Start_Receive_IT+0x52>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <UART_Start_Receive_IT+0x48>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005596:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800559a:	e02d      	b.n	80055f8 <UART_Start_Receive_IT+0xa4>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	22ff      	movs	r2, #255	; 0xff
 80055a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055a4:	e028      	b.n	80055f8 <UART_Start_Receive_IT+0xa4>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10d      	bne.n	80055ca <UART_Start_Receive_IT+0x76>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d104      	bne.n	80055c0 <UART_Start_Receive_IT+0x6c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	22ff      	movs	r2, #255	; 0xff
 80055ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055be:	e01b      	b.n	80055f8 <UART_Start_Receive_IT+0xa4>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	227f      	movs	r2, #127	; 0x7f
 80055c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055c8:	e016      	b.n	80055f8 <UART_Start_Receive_IT+0xa4>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d2:	d10d      	bne.n	80055f0 <UART_Start_Receive_IT+0x9c>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <UART_Start_Receive_IT+0x92>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	227f      	movs	r2, #127	; 0x7f
 80055e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055e4:	e008      	b.n	80055f8 <UART_Start_Receive_IT+0xa4>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	223f      	movs	r2, #63	; 0x3f
 80055ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ee:	e003      	b.n	80055f8 <UART_Start_Receive_IT+0xa4>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2222      	movs	r2, #34	; 0x22
 8005604:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0201 	orr.w	r2, r2, #1
 8005614:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561e:	d107      	bne.n	8005630 <UART_Start_Receive_IT+0xdc>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a0c      	ldr	r2, [pc, #48]	; (800565c <UART_Start_Receive_IT+0x108>)
 800562c:	665a      	str	r2, [r3, #100]	; 0x64
 800562e:	e002      	b.n	8005636 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <UART_Start_Receive_IT+0x10c>)
 8005634:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800564c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	080057f5 	.word	0x080057f5
 8005660:	08005721 	.word	0x08005721

08005664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800567a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005690:	2b01      	cmp	r3, #1
 8005692:	d107      	bne.n	80056a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0210 	bic.w	r2, r2, #16
 80056a2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff fb4b 	bl	8004d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005704:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff fb28 	bl	8004d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800572e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005734:	2b22      	cmp	r3, #34	; 0x22
 8005736:	d151      	bne.n	80057dc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005740:	89bb      	ldrh	r3, [r7, #12]
 8005742:	b2d9      	uxtb	r1, r3
 8005744:	89fb      	ldrh	r3, [r7, #14]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	400a      	ands	r2, r1
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d138      	bne.n	80057ec <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005788:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10f      	bne.n	80057ce <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0210 	bic.w	r2, r2, #16
 80057bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fae2 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
 80057cc:	e002      	b.n	80057d4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fb fb18 	bl	8000e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057da:	e007      	b.n	80057ec <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0208 	orr.w	r2, r2, #8
 80057ea:	619a      	str	r2, [r3, #24]
}
 80057ec:	bf00      	nop
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005802:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005808:	2b22      	cmp	r3, #34	; 0x22
 800580a:	d151      	bne.n	80058b0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800581a:	89ba      	ldrh	r2, [r7, #12]
 800581c:	89fb      	ldrh	r3, [r7, #14]
 800581e:	4013      	ands	r3, r2
 8005820:	b29a      	uxth	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582a:	1c9a      	adds	r2, r3, #2
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d138      	bne.n	80058c0 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800585c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587e:	2b01      	cmp	r3, #1
 8005880:	d10f      	bne.n	80058a2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0210 	bic.w	r2, r2, #16
 8005890:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fa78 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
 80058a0:	e002      	b.n	80058a8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fb faae 	bl	8000e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ae:	e007      	b.n	80058c0 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	619a      	str	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <__cvt>:
 80058c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ca:	ed2d 8b02 	vpush	{d8}
 80058ce:	eeb0 8b40 	vmov.f64	d8, d0
 80058d2:	b085      	sub	sp, #20
 80058d4:	4617      	mov	r7, r2
 80058d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80058d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80058da:	ee18 2a90 	vmov	r2, s17
 80058de:	f025 0520 	bic.w	r5, r5, #32
 80058e2:	2a00      	cmp	r2, #0
 80058e4:	bfb6      	itet	lt
 80058e6:	222d      	movlt	r2, #45	; 0x2d
 80058e8:	2200      	movge	r2, #0
 80058ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80058ee:	2d46      	cmp	r5, #70	; 0x46
 80058f0:	460c      	mov	r4, r1
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	d004      	beq.n	8005900 <__cvt+0x38>
 80058f6:	2d45      	cmp	r5, #69	; 0x45
 80058f8:	d100      	bne.n	80058fc <__cvt+0x34>
 80058fa:	3401      	adds	r4, #1
 80058fc:	2102      	movs	r1, #2
 80058fe:	e000      	b.n	8005902 <__cvt+0x3a>
 8005900:	2103      	movs	r1, #3
 8005902:	ab03      	add	r3, sp, #12
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	ab02      	add	r3, sp, #8
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	4622      	mov	r2, r4
 800590c:	4633      	mov	r3, r6
 800590e:	eeb0 0b48 	vmov.f64	d0, d8
 8005912:	f000 fe0d 	bl	8006530 <_dtoa_r>
 8005916:	2d47      	cmp	r5, #71	; 0x47
 8005918:	d101      	bne.n	800591e <__cvt+0x56>
 800591a:	07fb      	lsls	r3, r7, #31
 800591c:	d51a      	bpl.n	8005954 <__cvt+0x8c>
 800591e:	2d46      	cmp	r5, #70	; 0x46
 8005920:	eb00 0204 	add.w	r2, r0, r4
 8005924:	d10c      	bne.n	8005940 <__cvt+0x78>
 8005926:	7803      	ldrb	r3, [r0, #0]
 8005928:	2b30      	cmp	r3, #48	; 0x30
 800592a:	d107      	bne.n	800593c <__cvt+0x74>
 800592c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005934:	bf1c      	itt	ne
 8005936:	f1c4 0401 	rsbne	r4, r4, #1
 800593a:	6034      	strne	r4, [r6, #0]
 800593c:	6833      	ldr	r3, [r6, #0]
 800593e:	441a      	add	r2, r3
 8005940:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005948:	bf08      	it	eq
 800594a:	9203      	streq	r2, [sp, #12]
 800594c:	2130      	movs	r1, #48	; 0x30
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	4293      	cmp	r3, r2
 8005952:	d307      	bcc.n	8005964 <__cvt+0x9c>
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005958:	1a1b      	subs	r3, r3, r0
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	b005      	add	sp, #20
 800595e:	ecbd 8b02 	vpop	{d8}
 8005962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005964:	1c5c      	adds	r4, r3, #1
 8005966:	9403      	str	r4, [sp, #12]
 8005968:	7019      	strb	r1, [r3, #0]
 800596a:	e7f0      	b.n	800594e <__cvt+0x86>

0800596c <__exponent>:
 800596c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800596e:	4603      	mov	r3, r0
 8005970:	2900      	cmp	r1, #0
 8005972:	bfb8      	it	lt
 8005974:	4249      	neglt	r1, r1
 8005976:	f803 2b02 	strb.w	r2, [r3], #2
 800597a:	bfb4      	ite	lt
 800597c:	222d      	movlt	r2, #45	; 0x2d
 800597e:	222b      	movge	r2, #43	; 0x2b
 8005980:	2909      	cmp	r1, #9
 8005982:	7042      	strb	r2, [r0, #1]
 8005984:	dd2a      	ble.n	80059dc <__exponent+0x70>
 8005986:	f10d 0207 	add.w	r2, sp, #7
 800598a:	4617      	mov	r7, r2
 800598c:	260a      	movs	r6, #10
 800598e:	4694      	mov	ip, r2
 8005990:	fb91 f5f6 	sdiv	r5, r1, r6
 8005994:	fb06 1415 	mls	r4, r6, r5, r1
 8005998:	3430      	adds	r4, #48	; 0x30
 800599a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800599e:	460c      	mov	r4, r1
 80059a0:	2c63      	cmp	r4, #99	; 0x63
 80059a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80059a6:	4629      	mov	r1, r5
 80059a8:	dcf1      	bgt.n	800598e <__exponent+0x22>
 80059aa:	3130      	adds	r1, #48	; 0x30
 80059ac:	f1ac 0402 	sub.w	r4, ip, #2
 80059b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059b4:	1c41      	adds	r1, r0, #1
 80059b6:	4622      	mov	r2, r4
 80059b8:	42ba      	cmp	r2, r7
 80059ba:	d30a      	bcc.n	80059d2 <__exponent+0x66>
 80059bc:	f10d 0209 	add.w	r2, sp, #9
 80059c0:	eba2 020c 	sub.w	r2, r2, ip
 80059c4:	42bc      	cmp	r4, r7
 80059c6:	bf88      	it	hi
 80059c8:	2200      	movhi	r2, #0
 80059ca:	4413      	add	r3, r2
 80059cc:	1a18      	subs	r0, r3, r0
 80059ce:	b003      	add	sp, #12
 80059d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80059d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80059da:	e7ed      	b.n	80059b8 <__exponent+0x4c>
 80059dc:	2330      	movs	r3, #48	; 0x30
 80059de:	3130      	adds	r1, #48	; 0x30
 80059e0:	7083      	strb	r3, [r0, #2]
 80059e2:	70c1      	strb	r1, [r0, #3]
 80059e4:	1d03      	adds	r3, r0, #4
 80059e6:	e7f1      	b.n	80059cc <__exponent+0x60>

080059e8 <_printf_float>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	b08b      	sub	sp, #44	; 0x2c
 80059ee:	460c      	mov	r4, r1
 80059f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80059f4:	4616      	mov	r6, r2
 80059f6:	461f      	mov	r7, r3
 80059f8:	4605      	mov	r5, r0
 80059fa:	f000 fc9b 	bl	8006334 <_localeconv_r>
 80059fe:	f8d0 b000 	ldr.w	fp, [r0]
 8005a02:	4658      	mov	r0, fp
 8005a04:	f7fa fc7c 	bl	8000300 <strlen>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9308      	str	r3, [sp, #32]
 8005a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a14:	6822      	ldr	r2, [r4, #0]
 8005a16:	3307      	adds	r3, #7
 8005a18:	f023 0307 	bic.w	r3, r3, #7
 8005a1c:	f103 0108 	add.w	r1, r3, #8
 8005a20:	f8c8 1000 	str.w	r1, [r8]
 8005a24:	ed93 0b00 	vldr	d0, [r3]
 8005a28:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8005c88 <_printf_float+0x2a0>
 8005a2c:	eeb0 7bc0 	vabs.f64	d7, d0
 8005a30:	eeb4 7b46 	vcmp.f64	d7, d6
 8005a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a38:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8005a3c:	4682      	mov	sl, r0
 8005a3e:	dd24      	ble.n	8005a8a <_printf_float+0xa2>
 8005a40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a48:	d502      	bpl.n	8005a50 <_printf_float+0x68>
 8005a4a:	232d      	movs	r3, #45	; 0x2d
 8005a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a50:	498f      	ldr	r1, [pc, #572]	; (8005c90 <_printf_float+0x2a8>)
 8005a52:	4b90      	ldr	r3, [pc, #576]	; (8005c94 <_printf_float+0x2ac>)
 8005a54:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a58:	bf94      	ite	ls
 8005a5a:	4688      	movls	r8, r1
 8005a5c:	4698      	movhi	r8, r3
 8005a5e:	2303      	movs	r3, #3
 8005a60:	6123      	str	r3, [r4, #16]
 8005a62:	f022 0204 	bic.w	r2, r2, #4
 8005a66:	2300      	movs	r3, #0
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	9304      	str	r3, [sp, #16]
 8005a6c:	9700      	str	r7, [sp, #0]
 8005a6e:	4633      	mov	r3, r6
 8005a70:	aa09      	add	r2, sp, #36	; 0x24
 8005a72:	4621      	mov	r1, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	f000 f9d1 	bl	8005e1c <_printf_common>
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	f040 808a 	bne.w	8005b94 <_printf_float+0x1ac>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	b00b      	add	sp, #44	; 0x2c
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	eeb4 0b40 	vcmp.f64	d0, d0
 8005a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a92:	d709      	bvc.n	8005aa8 <_printf_float+0xc0>
 8005a94:	ee10 3a90 	vmov	r3, s1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfbc      	itt	lt
 8005a9c:	232d      	movlt	r3, #45	; 0x2d
 8005a9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005aa2:	497d      	ldr	r1, [pc, #500]	; (8005c98 <_printf_float+0x2b0>)
 8005aa4:	4b7d      	ldr	r3, [pc, #500]	; (8005c9c <_printf_float+0x2b4>)
 8005aa6:	e7d5      	b.n	8005a54 <_printf_float+0x6c>
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005aae:	9104      	str	r1, [sp, #16]
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	d13c      	bne.n	8005b2e <_printf_float+0x146>
 8005ab4:	2306      	movs	r3, #6
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	ab08      	add	r3, sp, #32
 8005abe:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ac6:	ab07      	add	r3, sp, #28
 8005ac8:	6861      	ldr	r1, [r4, #4]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	f10d 031b 	add.w	r3, sp, #27
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f7ff fef8 	bl	80058c8 <__cvt>
 8005ad8:	9b04      	ldr	r3, [sp, #16]
 8005ada:	9907      	ldr	r1, [sp, #28]
 8005adc:	2b47      	cmp	r3, #71	; 0x47
 8005ade:	4680      	mov	r8, r0
 8005ae0:	d108      	bne.n	8005af4 <_printf_float+0x10c>
 8005ae2:	1cc8      	adds	r0, r1, #3
 8005ae4:	db02      	blt.n	8005aec <_printf_float+0x104>
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	dd41      	ble.n	8005b70 <_printf_float+0x188>
 8005aec:	f1a9 0902 	sub.w	r9, r9, #2
 8005af0:	fa5f f989 	uxtb.w	r9, r9
 8005af4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005af8:	d820      	bhi.n	8005b3c <_printf_float+0x154>
 8005afa:	3901      	subs	r1, #1
 8005afc:	464a      	mov	r2, r9
 8005afe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b02:	9107      	str	r1, [sp, #28]
 8005b04:	f7ff ff32 	bl	800596c <__exponent>
 8005b08:	9a08      	ldr	r2, [sp, #32]
 8005b0a:	9004      	str	r0, [sp, #16]
 8005b0c:	1813      	adds	r3, r2, r0
 8005b0e:	2a01      	cmp	r2, #1
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	dc02      	bgt.n	8005b1a <_printf_float+0x132>
 8005b14:	6822      	ldr	r2, [r4, #0]
 8005b16:	07d2      	lsls	r2, r2, #31
 8005b18:	d501      	bpl.n	8005b1e <_printf_float+0x136>
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0a2      	beq.n	8005a6c <_printf_float+0x84>
 8005b26:	232d      	movs	r3, #45	; 0x2d
 8005b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2c:	e79e      	b.n	8005a6c <_printf_float+0x84>
 8005b2e:	9904      	ldr	r1, [sp, #16]
 8005b30:	2947      	cmp	r1, #71	; 0x47
 8005b32:	d1c1      	bne.n	8005ab8 <_printf_float+0xd0>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1bf      	bne.n	8005ab8 <_printf_float+0xd0>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e7bc      	b.n	8005ab6 <_printf_float+0xce>
 8005b3c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b40:	d118      	bne.n	8005b74 <_printf_float+0x18c>
 8005b42:	2900      	cmp	r1, #0
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	dd0b      	ble.n	8005b60 <_printf_float+0x178>
 8005b48:	6121      	str	r1, [r4, #16]
 8005b4a:	b913      	cbnz	r3, 8005b52 <_printf_float+0x16a>
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	07d0      	lsls	r0, r2, #31
 8005b50:	d502      	bpl.n	8005b58 <_printf_float+0x170>
 8005b52:	3301      	adds	r3, #1
 8005b54:	440b      	add	r3, r1
 8005b56:	6123      	str	r3, [r4, #16]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	e7de      	b.n	8005b1e <_printf_float+0x136>
 8005b60:	b913      	cbnz	r3, 8005b68 <_printf_float+0x180>
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	07d2      	lsls	r2, r2, #31
 8005b66:	d501      	bpl.n	8005b6c <_printf_float+0x184>
 8005b68:	3302      	adds	r3, #2
 8005b6a:	e7f4      	b.n	8005b56 <_printf_float+0x16e>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e7f2      	b.n	8005b56 <_printf_float+0x16e>
 8005b70:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b74:	9b08      	ldr	r3, [sp, #32]
 8005b76:	4299      	cmp	r1, r3
 8005b78:	db05      	blt.n	8005b86 <_printf_float+0x19e>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	6121      	str	r1, [r4, #16]
 8005b7e:	07d8      	lsls	r0, r3, #31
 8005b80:	d5ea      	bpl.n	8005b58 <_printf_float+0x170>
 8005b82:	1c4b      	adds	r3, r1, #1
 8005b84:	e7e7      	b.n	8005b56 <_printf_float+0x16e>
 8005b86:	2900      	cmp	r1, #0
 8005b88:	bfd4      	ite	le
 8005b8a:	f1c1 0202 	rsble	r2, r1, #2
 8005b8e:	2201      	movgt	r2, #1
 8005b90:	4413      	add	r3, r2
 8005b92:	e7e0      	b.n	8005b56 <_printf_float+0x16e>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	055a      	lsls	r2, r3, #21
 8005b98:	d407      	bmi.n	8005baa <_printf_float+0x1c2>
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d12a      	bne.n	8005bfe <_printf_float+0x216>
 8005ba8:	e76a      	b.n	8005a80 <_printf_float+0x98>
 8005baa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005bae:	f240 80e0 	bls.w	8005d72 <_printf_float+0x38a>
 8005bb2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005bb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	d133      	bne.n	8005c28 <_printf_float+0x240>
 8005bc0:	4a37      	ldr	r2, [pc, #220]	; (8005ca0 <_printf_float+0x2b8>)
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af58 	beq.w	8005a80 <_printf_float+0x98>
 8005bd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	db02      	blt.n	8005bde <_printf_float+0x1f6>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	07d8      	lsls	r0, r3, #31
 8005bdc:	d50f      	bpl.n	8005bfe <_printf_float+0x216>
 8005bde:	4653      	mov	r3, sl
 8005be0:	465a      	mov	r2, fp
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	f43f af49 	beq.w	8005a80 <_printf_float+0x98>
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	f104 091a 	add.w	r9, r4, #26
 8005bf6:	9b08      	ldr	r3, [sp, #32]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	4543      	cmp	r3, r8
 8005bfc:	dc09      	bgt.n	8005c12 <_printf_float+0x22a>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	079b      	lsls	r3, r3, #30
 8005c02:	f100 8106 	bmi.w	8005e12 <_printf_float+0x42a>
 8005c06:	68e0      	ldr	r0, [r4, #12]
 8005c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	bfb8      	it	lt
 8005c0e:	4618      	movlt	r0, r3
 8005c10:	e738      	b.n	8005a84 <_printf_float+0x9c>
 8005c12:	2301      	movs	r3, #1
 8005c14:	464a      	mov	r2, r9
 8005c16:	4631      	mov	r1, r6
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b8      	blx	r7
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	f43f af2f 	beq.w	8005a80 <_printf_float+0x98>
 8005c22:	f108 0801 	add.w	r8, r8, #1
 8005c26:	e7e6      	b.n	8005bf6 <_printf_float+0x20e>
 8005c28:	9b07      	ldr	r3, [sp, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dc3a      	bgt.n	8005ca4 <_printf_float+0x2bc>
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <_printf_float+0x2b8>)
 8005c30:	2301      	movs	r3, #1
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f43f af21 	beq.w	8005a80 <_printf_float+0x98>
 8005c3e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	d102      	bne.n	8005c4c <_printf_float+0x264>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	07d9      	lsls	r1, r3, #31
 8005c4a:	d5d8      	bpl.n	8005bfe <_printf_float+0x216>
 8005c4c:	4653      	mov	r3, sl
 8005c4e:	465a      	mov	r2, fp
 8005c50:	4631      	mov	r1, r6
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b8      	blx	r7
 8005c56:	3001      	adds	r0, #1
 8005c58:	f43f af12 	beq.w	8005a80 <_printf_float+0x98>
 8005c5c:	f04f 0900 	mov.w	r9, #0
 8005c60:	f104 0a1a 	add.w	sl, r4, #26
 8005c64:	9b07      	ldr	r3, [sp, #28]
 8005c66:	425b      	negs	r3, r3
 8005c68:	454b      	cmp	r3, r9
 8005c6a:	dc01      	bgt.n	8005c70 <_printf_float+0x288>
 8005c6c:	9b08      	ldr	r3, [sp, #32]
 8005c6e:	e795      	b.n	8005b9c <_printf_float+0x1b4>
 8005c70:	2301      	movs	r3, #1
 8005c72:	4652      	mov	r2, sl
 8005c74:	4631      	mov	r1, r6
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	f43f af00 	beq.w	8005a80 <_printf_float+0x98>
 8005c80:	f109 0901 	add.w	r9, r9, #1
 8005c84:	e7ee      	b.n	8005c64 <_printf_float+0x27c>
 8005c86:	bf00      	nop
 8005c88:	ffffffff 	.word	0xffffffff
 8005c8c:	7fefffff 	.word	0x7fefffff
 8005c90:	0800841c 	.word	0x0800841c
 8005c94:	08008420 	.word	0x08008420
 8005c98:	08008424 	.word	0x08008424
 8005c9c:	08008428 	.word	0x08008428
 8005ca0:	0800842c 	.word	0x0800842c
 8005ca4:	9a08      	ldr	r2, [sp, #32]
 8005ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bfa8      	it	ge
 8005cac:	461a      	movge	r2, r3
 8005cae:	2a00      	cmp	r2, #0
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	dc38      	bgt.n	8005d26 <_printf_float+0x33e>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cbc:	f104 021a 	add.w	r2, r4, #26
 8005cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cc2:	9905      	ldr	r1, [sp, #20]
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	eba3 0309 	sub.w	r3, r3, r9
 8005cca:	428b      	cmp	r3, r1
 8005ccc:	dc33      	bgt.n	8005d36 <_printf_float+0x34e>
 8005cce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	db3c      	blt.n	8005d50 <_printf_float+0x368>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	07da      	lsls	r2, r3, #31
 8005cda:	d439      	bmi.n	8005d50 <_printf_float+0x368>
 8005cdc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005ce0:	eba2 0903 	sub.w	r9, r2, r3
 8005ce4:	9b04      	ldr	r3, [sp, #16]
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	4591      	cmp	r9, r2
 8005cea:	bfa8      	it	ge
 8005cec:	4691      	movge	r9, r2
 8005cee:	f1b9 0f00 	cmp.w	r9, #0
 8005cf2:	dc35      	bgt.n	8005d60 <_printf_float+0x378>
 8005cf4:	f04f 0800 	mov.w	r8, #0
 8005cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cfc:	f104 0a1a 	add.w	sl, r4, #26
 8005d00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	eba3 0309 	sub.w	r3, r3, r9
 8005d0a:	4543      	cmp	r3, r8
 8005d0c:	f77f af77 	ble.w	8005bfe <_printf_float+0x216>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4652      	mov	r2, sl
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f aeb0 	beq.w	8005a80 <_printf_float+0x98>
 8005d20:	f108 0801 	add.w	r8, r8, #1
 8005d24:	e7ec      	b.n	8005d00 <_printf_float+0x318>
 8005d26:	4613      	mov	r3, r2
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	d1bf      	bne.n	8005cb4 <_printf_float+0x2cc>
 8005d34:	e6a4      	b.n	8005a80 <_printf_float+0x98>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	9204      	str	r2, [sp, #16]
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	f43f ae9d 	beq.w	8005a80 <_printf_float+0x98>
 8005d46:	9b05      	ldr	r3, [sp, #20]
 8005d48:	9a04      	ldr	r2, [sp, #16]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	9305      	str	r3, [sp, #20]
 8005d4e:	e7b7      	b.n	8005cc0 <_printf_float+0x2d8>
 8005d50:	4653      	mov	r3, sl
 8005d52:	465a      	mov	r2, fp
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d1be      	bne.n	8005cdc <_printf_float+0x2f4>
 8005d5e:	e68f      	b.n	8005a80 <_printf_float+0x98>
 8005d60:	9a04      	ldr	r2, [sp, #16]
 8005d62:	464b      	mov	r3, r9
 8005d64:	4442      	add	r2, r8
 8005d66:	4631      	mov	r1, r6
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b8      	blx	r7
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d1c1      	bne.n	8005cf4 <_printf_float+0x30c>
 8005d70:	e686      	b.n	8005a80 <_printf_float+0x98>
 8005d72:	9a08      	ldr	r2, [sp, #32]
 8005d74:	2a01      	cmp	r2, #1
 8005d76:	dc01      	bgt.n	8005d7c <_printf_float+0x394>
 8005d78:	07db      	lsls	r3, r3, #31
 8005d7a:	d537      	bpl.n	8005dec <_printf_float+0x404>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4642      	mov	r2, r8
 8005d80:	4631      	mov	r1, r6
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b8      	blx	r7
 8005d86:	3001      	adds	r0, #1
 8005d88:	f43f ae7a 	beq.w	8005a80 <_printf_float+0x98>
 8005d8c:	4653      	mov	r3, sl
 8005d8e:	465a      	mov	r2, fp
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f ae72 	beq.w	8005a80 <_printf_float+0x98>
 8005d9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005da0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da8:	9b08      	ldr	r3, [sp, #32]
 8005daa:	d01a      	beq.n	8005de2 <_printf_float+0x3fa>
 8005dac:	3b01      	subs	r3, #1
 8005dae:	f108 0201 	add.w	r2, r8, #1
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	d10e      	bne.n	8005dda <_printf_float+0x3f2>
 8005dbc:	e660      	b.n	8005a80 <_printf_float+0x98>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	464a      	mov	r2, r9
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	47b8      	blx	r7
 8005dc8:	3001      	adds	r0, #1
 8005dca:	f43f ae59 	beq.w	8005a80 <_printf_float+0x98>
 8005dce:	f108 0801 	add.w	r8, r8, #1
 8005dd2:	9b08      	ldr	r3, [sp, #32]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	4543      	cmp	r3, r8
 8005dd8:	dcf1      	bgt.n	8005dbe <_printf_float+0x3d6>
 8005dda:	9b04      	ldr	r3, [sp, #16]
 8005ddc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005de0:	e6dd      	b.n	8005b9e <_printf_float+0x1b6>
 8005de2:	f04f 0800 	mov.w	r8, #0
 8005de6:	f104 091a 	add.w	r9, r4, #26
 8005dea:	e7f2      	b.n	8005dd2 <_printf_float+0x3ea>
 8005dec:	2301      	movs	r3, #1
 8005dee:	4642      	mov	r2, r8
 8005df0:	e7df      	b.n	8005db2 <_printf_float+0x3ca>
 8005df2:	2301      	movs	r3, #1
 8005df4:	464a      	mov	r2, r9
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f ae3f 	beq.w	8005a80 <_printf_float+0x98>
 8005e02:	f108 0801 	add.w	r8, r8, #1
 8005e06:	68e3      	ldr	r3, [r4, #12]
 8005e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e0a:	1a5b      	subs	r3, r3, r1
 8005e0c:	4543      	cmp	r3, r8
 8005e0e:	dcf0      	bgt.n	8005df2 <_printf_float+0x40a>
 8005e10:	e6f9      	b.n	8005c06 <_printf_float+0x21e>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	f104 0919 	add.w	r9, r4, #25
 8005e1a:	e7f4      	b.n	8005e06 <_printf_float+0x41e>

08005e1c <_printf_common>:
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	4616      	mov	r6, r2
 8005e22:	4699      	mov	r9, r3
 8005e24:	688a      	ldr	r2, [r1, #8]
 8005e26:	690b      	ldr	r3, [r1, #16]
 8005e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	bfb8      	it	lt
 8005e30:	4613      	movlt	r3, r2
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b10a      	cbz	r2, 8005e42 <_printf_common+0x26>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	0699      	lsls	r1, r3, #26
 8005e46:	bf42      	ittt	mi
 8005e48:	6833      	ldrmi	r3, [r6, #0]
 8005e4a:	3302      	addmi	r3, #2
 8005e4c:	6033      	strmi	r3, [r6, #0]
 8005e4e:	6825      	ldr	r5, [r4, #0]
 8005e50:	f015 0506 	ands.w	r5, r5, #6
 8005e54:	d106      	bne.n	8005e64 <_printf_common+0x48>
 8005e56:	f104 0a19 	add.w	sl, r4, #25
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	6832      	ldr	r2, [r6, #0]
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dc26      	bgt.n	8005eb2 <_printf_common+0x96>
 8005e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e68:	1e13      	subs	r3, r2, #0
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	bf18      	it	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	0692      	lsls	r2, r2, #26
 8005e72:	d42b      	bmi.n	8005ecc <_printf_common+0xb0>
 8005e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c0      	blx	r8
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d01e      	beq.n	8005ec0 <_printf_common+0xa4>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	6922      	ldr	r2, [r4, #16]
 8005e86:	f003 0306 	and.w	r3, r3, #6
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	bf02      	ittt	eq
 8005e8e:	68e5      	ldreq	r5, [r4, #12]
 8005e90:	6833      	ldreq	r3, [r6, #0]
 8005e92:	1aed      	subeq	r5, r5, r3
 8005e94:	68a3      	ldr	r3, [r4, #8]
 8005e96:	bf0c      	ite	eq
 8005e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e9c:	2500      	movne	r5, #0
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bfc4      	itt	gt
 8005ea2:	1a9b      	subgt	r3, r3, r2
 8005ea4:	18ed      	addgt	r5, r5, r3
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	341a      	adds	r4, #26
 8005eaa:	42b5      	cmp	r5, r6
 8005eac:	d11a      	bne.n	8005ee4 <_printf_common+0xc8>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e008      	b.n	8005ec4 <_printf_common+0xa8>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	4638      	mov	r0, r7
 8005eba:	47c0      	blx	r8
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d103      	bne.n	8005ec8 <_printf_common+0xac>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	3501      	adds	r5, #1
 8005eca:	e7c6      	b.n	8005e5a <_printf_common+0x3e>
 8005ecc:	18e1      	adds	r1, r4, r3
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	2030      	movs	r0, #48	; 0x30
 8005ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ed6:	4422      	add	r2, r4
 8005ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	e7c7      	b.n	8005e74 <_printf_common+0x58>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4638      	mov	r0, r7
 8005eec:	47c0      	blx	r8
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d0e6      	beq.n	8005ec0 <_printf_common+0xa4>
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7d9      	b.n	8005eaa <_printf_common+0x8e>
	...

08005ef8 <_printf_i>:
 8005ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	7e0f      	ldrb	r7, [r1, #24]
 8005efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f00:	2f78      	cmp	r7, #120	; 0x78
 8005f02:	4691      	mov	r9, r2
 8005f04:	4680      	mov	r8, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	469a      	mov	sl, r3
 8005f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f0e:	d807      	bhi.n	8005f20 <_printf_i+0x28>
 8005f10:	2f62      	cmp	r7, #98	; 0x62
 8005f12:	d80a      	bhi.n	8005f2a <_printf_i+0x32>
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	f000 80d4 	beq.w	80060c2 <_printf_i+0x1ca>
 8005f1a:	2f58      	cmp	r7, #88	; 0x58
 8005f1c:	f000 80c0 	beq.w	80060a0 <_printf_i+0x1a8>
 8005f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f28:	e03a      	b.n	8005fa0 <_printf_i+0xa8>
 8005f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f2e:	2b15      	cmp	r3, #21
 8005f30:	d8f6      	bhi.n	8005f20 <_printf_i+0x28>
 8005f32:	a101      	add	r1, pc, #4	; (adr r1, 8005f38 <_printf_i+0x40>)
 8005f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f38:	08005f91 	.word	0x08005f91
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08005f21 	.word	0x08005f21
 8005f44:	08005f21 	.word	0x08005f21
 8005f48:	08005f21 	.word	0x08005f21
 8005f4c:	08005f21 	.word	0x08005f21
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	08005f21 	.word	0x08005f21
 8005f58:	08005f21 	.word	0x08005f21
 8005f5c:	08005f21 	.word	0x08005f21
 8005f60:	08005f21 	.word	0x08005f21
 8005f64:	080060a9 	.word	0x080060a9
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08006063 	.word	0x08006063
 8005f70:	08005f21 	.word	0x08005f21
 8005f74:	08005f21 	.word	0x08005f21
 8005f78:	080060cb 	.word	0x080060cb
 8005f7c:	08005f21 	.word	0x08005f21
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005f21 	.word	0x08005f21
 8005f88:	08005f21 	.word	0x08005f21
 8005f8c:	0800606b 	.word	0x0800606b
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	602a      	str	r2, [r5, #0]
 8005f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e09f      	b.n	80060e4 <_printf_i+0x1ec>
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	682b      	ldr	r3, [r5, #0]
 8005fa8:	0607      	lsls	r7, r0, #24
 8005faa:	f103 0104 	add.w	r1, r3, #4
 8005fae:	6029      	str	r1, [r5, #0]
 8005fb0:	d501      	bpl.n	8005fb6 <_printf_i+0xbe>
 8005fb2:	681e      	ldr	r6, [r3, #0]
 8005fb4:	e003      	b.n	8005fbe <_printf_i+0xc6>
 8005fb6:	0646      	lsls	r6, r0, #25
 8005fb8:	d5fb      	bpl.n	8005fb2 <_printf_i+0xba>
 8005fba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	da03      	bge.n	8005fca <_printf_i+0xd2>
 8005fc2:	232d      	movs	r3, #45	; 0x2d
 8005fc4:	4276      	negs	r6, r6
 8005fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fca:	485a      	ldr	r0, [pc, #360]	; (8006134 <_printf_i+0x23c>)
 8005fcc:	230a      	movs	r3, #10
 8005fce:	e012      	b.n	8005ff6 <_printf_i+0xfe>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	6820      	ldr	r0, [r4, #0]
 8005fd4:	1d19      	adds	r1, r3, #4
 8005fd6:	6029      	str	r1, [r5, #0]
 8005fd8:	0605      	lsls	r5, r0, #24
 8005fda:	d501      	bpl.n	8005fe0 <_printf_i+0xe8>
 8005fdc:	681e      	ldr	r6, [r3, #0]
 8005fde:	e002      	b.n	8005fe6 <_printf_i+0xee>
 8005fe0:	0641      	lsls	r1, r0, #25
 8005fe2:	d5fb      	bpl.n	8005fdc <_printf_i+0xe4>
 8005fe4:	881e      	ldrh	r6, [r3, #0]
 8005fe6:	4853      	ldr	r0, [pc, #332]	; (8006134 <_printf_i+0x23c>)
 8005fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8005fea:	bf0c      	ite	eq
 8005fec:	2308      	moveq	r3, #8
 8005fee:	230a      	movne	r3, #10
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ff6:	6865      	ldr	r5, [r4, #4]
 8005ff8:	60a5      	str	r5, [r4, #8]
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	bfa2      	ittt	ge
 8005ffe:	6821      	ldrge	r1, [r4, #0]
 8006000:	f021 0104 	bicge.w	r1, r1, #4
 8006004:	6021      	strge	r1, [r4, #0]
 8006006:	b90e      	cbnz	r6, 800600c <_printf_i+0x114>
 8006008:	2d00      	cmp	r5, #0
 800600a:	d04b      	beq.n	80060a4 <_printf_i+0x1ac>
 800600c:	4615      	mov	r5, r2
 800600e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006012:	fb03 6711 	mls	r7, r3, r1, r6
 8006016:	5dc7      	ldrb	r7, [r0, r7]
 8006018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800601c:	4637      	mov	r7, r6
 800601e:	42bb      	cmp	r3, r7
 8006020:	460e      	mov	r6, r1
 8006022:	d9f4      	bls.n	800600e <_printf_i+0x116>
 8006024:	2b08      	cmp	r3, #8
 8006026:	d10b      	bne.n	8006040 <_printf_i+0x148>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	07de      	lsls	r6, r3, #31
 800602c:	d508      	bpl.n	8006040 <_printf_i+0x148>
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	6861      	ldr	r1, [r4, #4]
 8006032:	4299      	cmp	r1, r3
 8006034:	bfde      	ittt	le
 8006036:	2330      	movle	r3, #48	; 0x30
 8006038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800603c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006040:	1b52      	subs	r2, r2, r5
 8006042:	6122      	str	r2, [r4, #16]
 8006044:	f8cd a000 	str.w	sl, [sp]
 8006048:	464b      	mov	r3, r9
 800604a:	aa03      	add	r2, sp, #12
 800604c:	4621      	mov	r1, r4
 800604e:	4640      	mov	r0, r8
 8006050:	f7ff fee4 	bl	8005e1c <_printf_common>
 8006054:	3001      	adds	r0, #1
 8006056:	d14a      	bne.n	80060ee <_printf_i+0x1f6>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	b004      	add	sp, #16
 800605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	f043 0320 	orr.w	r3, r3, #32
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	4833      	ldr	r0, [pc, #204]	; (8006138 <_printf_i+0x240>)
 800606c:	2778      	movs	r7, #120	; 0x78
 800606e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	6829      	ldr	r1, [r5, #0]
 8006076:	061f      	lsls	r7, r3, #24
 8006078:	f851 6b04 	ldr.w	r6, [r1], #4
 800607c:	d402      	bmi.n	8006084 <_printf_i+0x18c>
 800607e:	065f      	lsls	r7, r3, #25
 8006080:	bf48      	it	mi
 8006082:	b2b6      	uxthmi	r6, r6
 8006084:	07df      	lsls	r7, r3, #31
 8006086:	bf48      	it	mi
 8006088:	f043 0320 	orrmi.w	r3, r3, #32
 800608c:	6029      	str	r1, [r5, #0]
 800608e:	bf48      	it	mi
 8006090:	6023      	strmi	r3, [r4, #0]
 8006092:	b91e      	cbnz	r6, 800609c <_printf_i+0x1a4>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	f023 0320 	bic.w	r3, r3, #32
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	2310      	movs	r3, #16
 800609e:	e7a7      	b.n	8005ff0 <_printf_i+0xf8>
 80060a0:	4824      	ldr	r0, [pc, #144]	; (8006134 <_printf_i+0x23c>)
 80060a2:	e7e4      	b.n	800606e <_printf_i+0x176>
 80060a4:	4615      	mov	r5, r2
 80060a6:	e7bd      	b.n	8006024 <_printf_i+0x12c>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	6826      	ldr	r6, [r4, #0]
 80060ac:	6961      	ldr	r1, [r4, #20]
 80060ae:	1d18      	adds	r0, r3, #4
 80060b0:	6028      	str	r0, [r5, #0]
 80060b2:	0635      	lsls	r5, r6, #24
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	d501      	bpl.n	80060bc <_printf_i+0x1c4>
 80060b8:	6019      	str	r1, [r3, #0]
 80060ba:	e002      	b.n	80060c2 <_printf_i+0x1ca>
 80060bc:	0670      	lsls	r0, r6, #25
 80060be:	d5fb      	bpl.n	80060b8 <_printf_i+0x1c0>
 80060c0:	8019      	strh	r1, [r3, #0]
 80060c2:	2300      	movs	r3, #0
 80060c4:	6123      	str	r3, [r4, #16]
 80060c6:	4615      	mov	r5, r2
 80060c8:	e7bc      	b.n	8006044 <_printf_i+0x14c>
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	1d1a      	adds	r2, r3, #4
 80060ce:	602a      	str	r2, [r5, #0]
 80060d0:	681d      	ldr	r5, [r3, #0]
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	2100      	movs	r1, #0
 80060d6:	4628      	mov	r0, r5
 80060d8:	f7fa f8c2 	bl	8000260 <memchr>
 80060dc:	b108      	cbz	r0, 80060e2 <_printf_i+0x1ea>
 80060de:	1b40      	subs	r0, r0, r5
 80060e0:	6060      	str	r0, [r4, #4]
 80060e2:	6863      	ldr	r3, [r4, #4]
 80060e4:	6123      	str	r3, [r4, #16]
 80060e6:	2300      	movs	r3, #0
 80060e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ec:	e7aa      	b.n	8006044 <_printf_i+0x14c>
 80060ee:	6923      	ldr	r3, [r4, #16]
 80060f0:	462a      	mov	r2, r5
 80060f2:	4649      	mov	r1, r9
 80060f4:	4640      	mov	r0, r8
 80060f6:	47d0      	blx	sl
 80060f8:	3001      	adds	r0, #1
 80060fa:	d0ad      	beq.n	8006058 <_printf_i+0x160>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	079b      	lsls	r3, r3, #30
 8006100:	d413      	bmi.n	800612a <_printf_i+0x232>
 8006102:	68e0      	ldr	r0, [r4, #12]
 8006104:	9b03      	ldr	r3, [sp, #12]
 8006106:	4298      	cmp	r0, r3
 8006108:	bfb8      	it	lt
 800610a:	4618      	movlt	r0, r3
 800610c:	e7a6      	b.n	800605c <_printf_i+0x164>
 800610e:	2301      	movs	r3, #1
 8006110:	4632      	mov	r2, r6
 8006112:	4649      	mov	r1, r9
 8006114:	4640      	mov	r0, r8
 8006116:	47d0      	blx	sl
 8006118:	3001      	adds	r0, #1
 800611a:	d09d      	beq.n	8006058 <_printf_i+0x160>
 800611c:	3501      	adds	r5, #1
 800611e:	68e3      	ldr	r3, [r4, #12]
 8006120:	9903      	ldr	r1, [sp, #12]
 8006122:	1a5b      	subs	r3, r3, r1
 8006124:	42ab      	cmp	r3, r5
 8006126:	dcf2      	bgt.n	800610e <_printf_i+0x216>
 8006128:	e7eb      	b.n	8006102 <_printf_i+0x20a>
 800612a:	2500      	movs	r5, #0
 800612c:	f104 0619 	add.w	r6, r4, #25
 8006130:	e7f5      	b.n	800611e <_printf_i+0x226>
 8006132:	bf00      	nop
 8006134:	0800842e 	.word	0x0800842e
 8006138:	0800843f 	.word	0x0800843f

0800613c <std>:
 800613c:	2300      	movs	r3, #0
 800613e:	b510      	push	{r4, lr}
 8006140:	4604      	mov	r4, r0
 8006142:	e9c0 3300 	strd	r3, r3, [r0]
 8006146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800614a:	6083      	str	r3, [r0, #8]
 800614c:	8181      	strh	r1, [r0, #12]
 800614e:	6643      	str	r3, [r0, #100]	; 0x64
 8006150:	81c2      	strh	r2, [r0, #14]
 8006152:	6183      	str	r3, [r0, #24]
 8006154:	4619      	mov	r1, r3
 8006156:	2208      	movs	r2, #8
 8006158:	305c      	adds	r0, #92	; 0x5c
 800615a:	f000 f8e2 	bl	8006322 <memset>
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <std+0x38>)
 8006160:	6263      	str	r3, [r4, #36]	; 0x24
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x3c>)
 8006164:	62a3      	str	r3, [r4, #40]	; 0x28
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <std+0x40>)
 8006168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <std+0x44>)
 800616c:	6224      	str	r4, [r4, #32]
 800616e:	6323      	str	r3, [r4, #48]	; 0x30
 8006170:	bd10      	pop	{r4, pc}
 8006172:	bf00      	nop
 8006174:	0800629d 	.word	0x0800629d
 8006178:	080062bf 	.word	0x080062bf
 800617c:	080062f7 	.word	0x080062f7
 8006180:	0800631b 	.word	0x0800631b

08006184 <stdio_exit_handler>:
 8006184:	4a02      	ldr	r2, [pc, #8]	; (8006190 <stdio_exit_handler+0xc>)
 8006186:	4903      	ldr	r1, [pc, #12]	; (8006194 <stdio_exit_handler+0x10>)
 8006188:	4803      	ldr	r0, [pc, #12]	; (8006198 <stdio_exit_handler+0x14>)
 800618a:	f000 b869 	b.w	8006260 <_fwalk_sglue>
 800618e:	bf00      	nop
 8006190:	20000010 	.word	0x20000010
 8006194:	08007a0d 	.word	0x08007a0d
 8006198:	2000001c 	.word	0x2000001c

0800619c <cleanup_stdio>:
 800619c:	6841      	ldr	r1, [r0, #4]
 800619e:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <cleanup_stdio+0x34>)
 80061a0:	4299      	cmp	r1, r3
 80061a2:	b510      	push	{r4, lr}
 80061a4:	4604      	mov	r4, r0
 80061a6:	d001      	beq.n	80061ac <cleanup_stdio+0x10>
 80061a8:	f001 fc30 	bl	8007a0c <_fflush_r>
 80061ac:	68a1      	ldr	r1, [r4, #8]
 80061ae:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <cleanup_stdio+0x38>)
 80061b0:	4299      	cmp	r1, r3
 80061b2:	d002      	beq.n	80061ba <cleanup_stdio+0x1e>
 80061b4:	4620      	mov	r0, r4
 80061b6:	f001 fc29 	bl	8007a0c <_fflush_r>
 80061ba:	68e1      	ldr	r1, [r4, #12]
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <cleanup_stdio+0x3c>)
 80061be:	4299      	cmp	r1, r3
 80061c0:	d004      	beq.n	80061cc <cleanup_stdio+0x30>
 80061c2:	4620      	mov	r0, r4
 80061c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c8:	f001 bc20 	b.w	8007a0c <_fflush_r>
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	bf00      	nop
 80061d0:	200003bc 	.word	0x200003bc
 80061d4:	20000424 	.word	0x20000424
 80061d8:	2000048c 	.word	0x2000048c

080061dc <global_stdio_init.part.0>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	4b0b      	ldr	r3, [pc, #44]	; (800620c <global_stdio_init.part.0+0x30>)
 80061e0:	4c0b      	ldr	r4, [pc, #44]	; (8006210 <global_stdio_init.part.0+0x34>)
 80061e2:	4a0c      	ldr	r2, [pc, #48]	; (8006214 <global_stdio_init.part.0+0x38>)
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	4620      	mov	r0, r4
 80061e8:	2200      	movs	r2, #0
 80061ea:	2104      	movs	r1, #4
 80061ec:	f7ff ffa6 	bl	800613c <std>
 80061f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061f4:	2201      	movs	r2, #1
 80061f6:	2109      	movs	r1, #9
 80061f8:	f7ff ffa0 	bl	800613c <std>
 80061fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006200:	2202      	movs	r2, #2
 8006202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006206:	2112      	movs	r1, #18
 8006208:	f7ff bf98 	b.w	800613c <std>
 800620c:	200004f4 	.word	0x200004f4
 8006210:	200003bc 	.word	0x200003bc
 8006214:	08006185 	.word	0x08006185

08006218 <__sfp_lock_acquire>:
 8006218:	4801      	ldr	r0, [pc, #4]	; (8006220 <__sfp_lock_acquire+0x8>)
 800621a:	f000 b8ff 	b.w	800641c <__retarget_lock_acquire_recursive>
 800621e:	bf00      	nop
 8006220:	200004fd 	.word	0x200004fd

08006224 <__sfp_lock_release>:
 8006224:	4801      	ldr	r0, [pc, #4]	; (800622c <__sfp_lock_release+0x8>)
 8006226:	f000 b8fa 	b.w	800641e <__retarget_lock_release_recursive>
 800622a:	bf00      	nop
 800622c:	200004fd 	.word	0x200004fd

08006230 <__sinit>:
 8006230:	b510      	push	{r4, lr}
 8006232:	4604      	mov	r4, r0
 8006234:	f7ff fff0 	bl	8006218 <__sfp_lock_acquire>
 8006238:	6a23      	ldr	r3, [r4, #32]
 800623a:	b11b      	cbz	r3, 8006244 <__sinit+0x14>
 800623c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006240:	f7ff bff0 	b.w	8006224 <__sfp_lock_release>
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <__sinit+0x28>)
 8006246:	6223      	str	r3, [r4, #32]
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <__sinit+0x2c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f5      	bne.n	800623c <__sinit+0xc>
 8006250:	f7ff ffc4 	bl	80061dc <global_stdio_init.part.0>
 8006254:	e7f2      	b.n	800623c <__sinit+0xc>
 8006256:	bf00      	nop
 8006258:	0800619d 	.word	0x0800619d
 800625c:	200004f4 	.word	0x200004f4

08006260 <_fwalk_sglue>:
 8006260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006264:	4607      	mov	r7, r0
 8006266:	4688      	mov	r8, r1
 8006268:	4614      	mov	r4, r2
 800626a:	2600      	movs	r6, #0
 800626c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006270:	f1b9 0901 	subs.w	r9, r9, #1
 8006274:	d505      	bpl.n	8006282 <_fwalk_sglue+0x22>
 8006276:	6824      	ldr	r4, [r4, #0]
 8006278:	2c00      	cmp	r4, #0
 800627a:	d1f7      	bne.n	800626c <_fwalk_sglue+0xc>
 800627c:	4630      	mov	r0, r6
 800627e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006282:	89ab      	ldrh	r3, [r5, #12]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d907      	bls.n	8006298 <_fwalk_sglue+0x38>
 8006288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800628c:	3301      	adds	r3, #1
 800628e:	d003      	beq.n	8006298 <_fwalk_sglue+0x38>
 8006290:	4629      	mov	r1, r5
 8006292:	4638      	mov	r0, r7
 8006294:	47c0      	blx	r8
 8006296:	4306      	orrs	r6, r0
 8006298:	3568      	adds	r5, #104	; 0x68
 800629a:	e7e9      	b.n	8006270 <_fwalk_sglue+0x10>

0800629c <__sread>:
 800629c:	b510      	push	{r4, lr}
 800629e:	460c      	mov	r4, r1
 80062a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a4:	f000 f86c 	bl	8006380 <_read_r>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	bfab      	itete	ge
 80062ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062ae:	89a3      	ldrhlt	r3, [r4, #12]
 80062b0:	181b      	addge	r3, r3, r0
 80062b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062b6:	bfac      	ite	ge
 80062b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80062ba:	81a3      	strhlt	r3, [r4, #12]
 80062bc:	bd10      	pop	{r4, pc}

080062be <__swrite>:
 80062be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c2:	461f      	mov	r7, r3
 80062c4:	898b      	ldrh	r3, [r1, #12]
 80062c6:	05db      	lsls	r3, r3, #23
 80062c8:	4605      	mov	r5, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	4616      	mov	r6, r2
 80062ce:	d505      	bpl.n	80062dc <__swrite+0x1e>
 80062d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d4:	2302      	movs	r3, #2
 80062d6:	2200      	movs	r2, #0
 80062d8:	f000 f840 	bl	800635c <_lseek_r>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	4632      	mov	r2, r6
 80062ea:	463b      	mov	r3, r7
 80062ec:	4628      	mov	r0, r5
 80062ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f2:	f000 b857 	b.w	80063a4 <_write_r>

080062f6 <__sseek>:
 80062f6:	b510      	push	{r4, lr}
 80062f8:	460c      	mov	r4, r1
 80062fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fe:	f000 f82d 	bl	800635c <_lseek_r>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	bf15      	itete	ne
 8006308:	6560      	strne	r0, [r4, #84]	; 0x54
 800630a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800630e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006312:	81a3      	strheq	r3, [r4, #12]
 8006314:	bf18      	it	ne
 8006316:	81a3      	strhne	r3, [r4, #12]
 8006318:	bd10      	pop	{r4, pc}

0800631a <__sclose>:
 800631a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631e:	f000 b80d 	b.w	800633c <_close_r>

08006322 <memset>:
 8006322:	4402      	add	r2, r0
 8006324:	4603      	mov	r3, r0
 8006326:	4293      	cmp	r3, r2
 8006328:	d100      	bne.n	800632c <memset+0xa>
 800632a:	4770      	bx	lr
 800632c:	f803 1b01 	strb.w	r1, [r3], #1
 8006330:	e7f9      	b.n	8006326 <memset+0x4>
	...

08006334 <_localeconv_r>:
 8006334:	4800      	ldr	r0, [pc, #0]	; (8006338 <_localeconv_r+0x4>)
 8006336:	4770      	bx	lr
 8006338:	2000015c 	.word	0x2000015c

0800633c <_close_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4d06      	ldr	r5, [pc, #24]	; (8006358 <_close_r+0x1c>)
 8006340:	2300      	movs	r3, #0
 8006342:	4604      	mov	r4, r0
 8006344:	4608      	mov	r0, r1
 8006346:	602b      	str	r3, [r5, #0]
 8006348:	f7fa ff55 	bl	80011f6 <_close>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_close_r+0x1a>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_close_r+0x1a>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	200004f8 	.word	0x200004f8

0800635c <_lseek_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d07      	ldr	r5, [pc, #28]	; (800637c <_lseek_r+0x20>)
 8006360:	4604      	mov	r4, r0
 8006362:	4608      	mov	r0, r1
 8006364:	4611      	mov	r1, r2
 8006366:	2200      	movs	r2, #0
 8006368:	602a      	str	r2, [r5, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f7fa ff6a 	bl	8001244 <_lseek>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_lseek_r+0x1e>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_lseek_r+0x1e>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	200004f8 	.word	0x200004f8

08006380 <_read_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d07      	ldr	r5, [pc, #28]	; (80063a0 <_read_r+0x20>)
 8006384:	4604      	mov	r4, r0
 8006386:	4608      	mov	r0, r1
 8006388:	4611      	mov	r1, r2
 800638a:	2200      	movs	r2, #0
 800638c:	602a      	str	r2, [r5, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	f7fa fef8 	bl	8001184 <_read>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_read_r+0x1e>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_read_r+0x1e>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	200004f8 	.word	0x200004f8

080063a4 <_write_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d07      	ldr	r5, [pc, #28]	; (80063c4 <_write_r+0x20>)
 80063a8:	4604      	mov	r4, r0
 80063aa:	4608      	mov	r0, r1
 80063ac:	4611      	mov	r1, r2
 80063ae:	2200      	movs	r2, #0
 80063b0:	602a      	str	r2, [r5, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f7fa ff03 	bl	80011be <_write>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <_write_r+0x1e>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	b103      	cbz	r3, 80063c2 <_write_r+0x1e>
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	200004f8 	.word	0x200004f8

080063c8 <__errno>:
 80063c8:	4b01      	ldr	r3, [pc, #4]	; (80063d0 <__errno+0x8>)
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20000068 	.word	0x20000068

080063d4 <__libc_init_array>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	4d0d      	ldr	r5, [pc, #52]	; (800640c <__libc_init_array+0x38>)
 80063d8:	4c0d      	ldr	r4, [pc, #52]	; (8006410 <__libc_init_array+0x3c>)
 80063da:	1b64      	subs	r4, r4, r5
 80063dc:	10a4      	asrs	r4, r4, #2
 80063de:	2600      	movs	r6, #0
 80063e0:	42a6      	cmp	r6, r4
 80063e2:	d109      	bne.n	80063f8 <__libc_init_array+0x24>
 80063e4:	4d0b      	ldr	r5, [pc, #44]	; (8006414 <__libc_init_array+0x40>)
 80063e6:	4c0c      	ldr	r4, [pc, #48]	; (8006418 <__libc_init_array+0x44>)
 80063e8:	f001 fe64 	bl	80080b4 <_init>
 80063ec:	1b64      	subs	r4, r4, r5
 80063ee:	10a4      	asrs	r4, r4, #2
 80063f0:	2600      	movs	r6, #0
 80063f2:	42a6      	cmp	r6, r4
 80063f4:	d105      	bne.n	8006402 <__libc_init_array+0x2e>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fc:	4798      	blx	r3
 80063fe:	3601      	adds	r6, #1
 8006400:	e7ee      	b.n	80063e0 <__libc_init_array+0xc>
 8006402:	f855 3b04 	ldr.w	r3, [r5], #4
 8006406:	4798      	blx	r3
 8006408:	3601      	adds	r6, #1
 800640a:	e7f2      	b.n	80063f2 <__libc_init_array+0x1e>
 800640c:	08008794 	.word	0x08008794
 8006410:	08008794 	.word	0x08008794
 8006414:	08008794 	.word	0x08008794
 8006418:	08008798 	.word	0x08008798

0800641c <__retarget_lock_acquire_recursive>:
 800641c:	4770      	bx	lr

0800641e <__retarget_lock_release_recursive>:
 800641e:	4770      	bx	lr

08006420 <quorem>:
 8006420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	6903      	ldr	r3, [r0, #16]
 8006426:	690c      	ldr	r4, [r1, #16]
 8006428:	42a3      	cmp	r3, r4
 800642a:	4607      	mov	r7, r0
 800642c:	db7e      	blt.n	800652c <quorem+0x10c>
 800642e:	3c01      	subs	r4, #1
 8006430:	f101 0814 	add.w	r8, r1, #20
 8006434:	f100 0514 	add.w	r5, r0, #20
 8006438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006446:	3301      	adds	r3, #1
 8006448:	429a      	cmp	r2, r3
 800644a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800644e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006452:	fbb2 f6f3 	udiv	r6, r2, r3
 8006456:	d331      	bcc.n	80064bc <quorem+0x9c>
 8006458:	f04f 0e00 	mov.w	lr, #0
 800645c:	4640      	mov	r0, r8
 800645e:	46ac      	mov	ip, r5
 8006460:	46f2      	mov	sl, lr
 8006462:	f850 2b04 	ldr.w	r2, [r0], #4
 8006466:	b293      	uxth	r3, r2
 8006468:	fb06 e303 	mla	r3, r6, r3, lr
 800646c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006470:	0c1a      	lsrs	r2, r3, #16
 8006472:	b29b      	uxth	r3, r3
 8006474:	ebaa 0303 	sub.w	r3, sl, r3
 8006478:	f8dc a000 	ldr.w	sl, [ip]
 800647c:	fa13 f38a 	uxtah	r3, r3, sl
 8006480:	fb06 220e 	mla	r2, r6, lr, r2
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	9b00      	ldr	r3, [sp, #0]
 8006488:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800648c:	b292      	uxth	r2, r2
 800648e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006492:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006496:	f8bd 3000 	ldrh.w	r3, [sp]
 800649a:	4581      	cmp	r9, r0
 800649c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064a0:	f84c 3b04 	str.w	r3, [ip], #4
 80064a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064a8:	d2db      	bcs.n	8006462 <quorem+0x42>
 80064aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80064ae:	b92b      	cbnz	r3, 80064bc <quorem+0x9c>
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	3b04      	subs	r3, #4
 80064b4:	429d      	cmp	r5, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	d32c      	bcc.n	8006514 <quorem+0xf4>
 80064ba:	613c      	str	r4, [r7, #16]
 80064bc:	4638      	mov	r0, r7
 80064be:	f001 f91f 	bl	8007700 <__mcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	db22      	blt.n	800650c <quorem+0xec>
 80064c6:	3601      	adds	r6, #1
 80064c8:	4629      	mov	r1, r5
 80064ca:	2000      	movs	r0, #0
 80064cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80064d0:	f8d1 c000 	ldr.w	ip, [r1]
 80064d4:	b293      	uxth	r3, r2
 80064d6:	1ac3      	subs	r3, r0, r3
 80064d8:	0c12      	lsrs	r2, r2, #16
 80064da:	fa13 f38c 	uxtah	r3, r3, ip
 80064de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80064e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064ec:	45c1      	cmp	r9, r8
 80064ee:	f841 3b04 	str.w	r3, [r1], #4
 80064f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064f6:	d2e9      	bcs.n	80064cc <quorem+0xac>
 80064f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006500:	b922      	cbnz	r2, 800650c <quorem+0xec>
 8006502:	3b04      	subs	r3, #4
 8006504:	429d      	cmp	r5, r3
 8006506:	461a      	mov	r2, r3
 8006508:	d30a      	bcc.n	8006520 <quorem+0x100>
 800650a:	613c      	str	r4, [r7, #16]
 800650c:	4630      	mov	r0, r6
 800650e:	b003      	add	sp, #12
 8006510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	3b04      	subs	r3, #4
 8006518:	2a00      	cmp	r2, #0
 800651a:	d1ce      	bne.n	80064ba <quorem+0x9a>
 800651c:	3c01      	subs	r4, #1
 800651e:	e7c9      	b.n	80064b4 <quorem+0x94>
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	3b04      	subs	r3, #4
 8006524:	2a00      	cmp	r2, #0
 8006526:	d1f0      	bne.n	800650a <quorem+0xea>
 8006528:	3c01      	subs	r4, #1
 800652a:	e7eb      	b.n	8006504 <quorem+0xe4>
 800652c:	2000      	movs	r0, #0
 800652e:	e7ee      	b.n	800650e <quorem+0xee>

08006530 <_dtoa_r>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	ed2d 8b02 	vpush	{d8}
 8006538:	69c5      	ldr	r5, [r0, #28]
 800653a:	b091      	sub	sp, #68	; 0x44
 800653c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006540:	ec59 8b10 	vmov	r8, r9, d0
 8006544:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006546:	9106      	str	r1, [sp, #24]
 8006548:	4606      	mov	r6, r0
 800654a:	9208      	str	r2, [sp, #32]
 800654c:	930c      	str	r3, [sp, #48]	; 0x30
 800654e:	b975      	cbnz	r5, 800656e <_dtoa_r+0x3e>
 8006550:	2010      	movs	r0, #16
 8006552:	f000 fda5 	bl	80070a0 <malloc>
 8006556:	4602      	mov	r2, r0
 8006558:	61f0      	str	r0, [r6, #28]
 800655a:	b920      	cbnz	r0, 8006566 <_dtoa_r+0x36>
 800655c:	4ba6      	ldr	r3, [pc, #664]	; (80067f8 <_dtoa_r+0x2c8>)
 800655e:	21ef      	movs	r1, #239	; 0xef
 8006560:	48a6      	ldr	r0, [pc, #664]	; (80067fc <_dtoa_r+0x2cc>)
 8006562:	f001 fa99 	bl	8007a98 <__assert_func>
 8006566:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800656a:	6005      	str	r5, [r0, #0]
 800656c:	60c5      	str	r5, [r0, #12]
 800656e:	69f3      	ldr	r3, [r6, #28]
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	b151      	cbz	r1, 800658a <_dtoa_r+0x5a>
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	604a      	str	r2, [r1, #4]
 8006578:	2301      	movs	r3, #1
 800657a:	4093      	lsls	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
 800657e:	4630      	mov	r0, r6
 8006580:	f000 fe82 	bl	8007288 <_Bfree>
 8006584:	69f3      	ldr	r3, [r6, #28]
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	f1b9 0300 	subs.w	r3, r9, #0
 800658e:	bfbb      	ittet	lt
 8006590:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006594:	9303      	strlt	r3, [sp, #12]
 8006596:	2300      	movge	r3, #0
 8006598:	2201      	movlt	r2, #1
 800659a:	bfac      	ite	ge
 800659c:	6023      	strge	r3, [r4, #0]
 800659e:	6022      	strlt	r2, [r4, #0]
 80065a0:	4b97      	ldr	r3, [pc, #604]	; (8006800 <_dtoa_r+0x2d0>)
 80065a2:	9c03      	ldr	r4, [sp, #12]
 80065a4:	43a3      	bics	r3, r4
 80065a6:	d11c      	bne.n	80065e2 <_dtoa_r+0xb2>
 80065a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80065b4:	ea53 0308 	orrs.w	r3, r3, r8
 80065b8:	f000 84fb 	beq.w	8006fb2 <_dtoa_r+0xa82>
 80065bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065be:	b963      	cbnz	r3, 80065da <_dtoa_r+0xaa>
 80065c0:	4b90      	ldr	r3, [pc, #576]	; (8006804 <_dtoa_r+0x2d4>)
 80065c2:	e020      	b.n	8006606 <_dtoa_r+0xd6>
 80065c4:	4b90      	ldr	r3, [pc, #576]	; (8006808 <_dtoa_r+0x2d8>)
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	3308      	adds	r3, #8
 80065ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	9801      	ldr	r0, [sp, #4]
 80065d0:	b011      	add	sp, #68	; 0x44
 80065d2:	ecbd 8b02 	vpop	{d8}
 80065d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065da:	4b8a      	ldr	r3, [pc, #552]	; (8006804 <_dtoa_r+0x2d4>)
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	3303      	adds	r3, #3
 80065e0:	e7f3      	b.n	80065ca <_dtoa_r+0x9a>
 80065e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80065e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80065ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ee:	d10c      	bne.n	800660a <_dtoa_r+0xda>
 80065f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065f2:	2301      	movs	r3, #1
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 84d7 	beq.w	8006fac <_dtoa_r+0xa7c>
 80065fe:	4b83      	ldr	r3, [pc, #524]	; (800680c <_dtoa_r+0x2dc>)
 8006600:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	3b01      	subs	r3, #1
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	e7e1      	b.n	80065ce <_dtoa_r+0x9e>
 800660a:	aa0e      	add	r2, sp, #56	; 0x38
 800660c:	a90f      	add	r1, sp, #60	; 0x3c
 800660e:	4630      	mov	r0, r6
 8006610:	eeb0 0b48 	vmov.f64	d0, d8
 8006614:	f001 f91a 	bl	800784c <__d2b>
 8006618:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800661c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800661e:	4605      	mov	r5, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d046      	beq.n	80066b2 <_dtoa_r+0x182>
 8006624:	eeb0 7b48 	vmov.f64	d7, d8
 8006628:	ee18 1a90 	vmov	r1, s17
 800662c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006630:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006634:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006638:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800663c:	2000      	movs	r0, #0
 800663e:	ee07 1a90 	vmov	s15, r1
 8006642:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8006646:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80067e0 <_dtoa_r+0x2b0>
 800664a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800664e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80067e8 <_dtoa_r+0x2b8>
 8006652:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006656:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80067f0 <_dtoa_r+0x2c0>
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006662:	eeb0 7b46 	vmov.f64	d7, d6
 8006666:	eea4 7b05 	vfma.f64	d7, d4, d5
 800666a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800666e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006676:	ee16 ba90 	vmov	fp, s13
 800667a:	9009      	str	r0, [sp, #36]	; 0x24
 800667c:	d508      	bpl.n	8006690 <_dtoa_r+0x160>
 800667e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006682:	eeb4 6b47 	vcmp.f64	d6, d7
 8006686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668a:	bf18      	it	ne
 800668c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006690:	f1bb 0f16 	cmp.w	fp, #22
 8006694:	d82b      	bhi.n	80066ee <_dtoa_r+0x1be>
 8006696:	495e      	ldr	r1, [pc, #376]	; (8006810 <_dtoa_r+0x2e0>)
 8006698:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800669c:	ed91 7b00 	vldr	d7, [r1]
 80066a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80066a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a8:	d501      	bpl.n	80066ae <_dtoa_r+0x17e>
 80066aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066ae:	2100      	movs	r1, #0
 80066b0:	e01e      	b.n	80066f0 <_dtoa_r+0x1c0>
 80066b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066b4:	4413      	add	r3, r2
 80066b6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80066ba:	2920      	cmp	r1, #32
 80066bc:	bfc1      	itttt	gt
 80066be:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80066c2:	408c      	lslgt	r4, r1
 80066c4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80066c8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80066cc:	bfd6      	itet	le
 80066ce:	f1c1 0120 	rsble	r1, r1, #32
 80066d2:	4321      	orrgt	r1, r4
 80066d4:	fa08 f101 	lslle.w	r1, r8, r1
 80066d8:	ee07 1a90 	vmov	s15, r1
 80066dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80066e0:	3b01      	subs	r3, #1
 80066e2:	ee17 1a90 	vmov	r1, s15
 80066e6:	2001      	movs	r0, #1
 80066e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80066ec:	e7a7      	b.n	800663e <_dtoa_r+0x10e>
 80066ee:	2101      	movs	r1, #1
 80066f0:	1ad2      	subs	r2, r2, r3
 80066f2:	1e53      	subs	r3, r2, #1
 80066f4:	9305      	str	r3, [sp, #20]
 80066f6:	bf45      	ittet	mi
 80066f8:	f1c2 0301 	rsbmi	r3, r2, #1
 80066fc:	9304      	strmi	r3, [sp, #16]
 80066fe:	2300      	movpl	r3, #0
 8006700:	2300      	movmi	r3, #0
 8006702:	bf4c      	ite	mi
 8006704:	9305      	strmi	r3, [sp, #20]
 8006706:	9304      	strpl	r3, [sp, #16]
 8006708:	f1bb 0f00 	cmp.w	fp, #0
 800670c:	910b      	str	r1, [sp, #44]	; 0x2c
 800670e:	db18      	blt.n	8006742 <_dtoa_r+0x212>
 8006710:	9b05      	ldr	r3, [sp, #20]
 8006712:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006716:	445b      	add	r3, fp
 8006718:	9305      	str	r3, [sp, #20]
 800671a:	2300      	movs	r3, #0
 800671c:	9a06      	ldr	r2, [sp, #24]
 800671e:	2a09      	cmp	r2, #9
 8006720:	d848      	bhi.n	80067b4 <_dtoa_r+0x284>
 8006722:	2a05      	cmp	r2, #5
 8006724:	bfc4      	itt	gt
 8006726:	3a04      	subgt	r2, #4
 8006728:	9206      	strgt	r2, [sp, #24]
 800672a:	9a06      	ldr	r2, [sp, #24]
 800672c:	f1a2 0202 	sub.w	r2, r2, #2
 8006730:	bfcc      	ite	gt
 8006732:	2400      	movgt	r4, #0
 8006734:	2401      	movle	r4, #1
 8006736:	2a03      	cmp	r2, #3
 8006738:	d847      	bhi.n	80067ca <_dtoa_r+0x29a>
 800673a:	e8df f002 	tbb	[pc, r2]
 800673e:	2d0b      	.short	0x2d0b
 8006740:	392b      	.short	0x392b
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	2200      	movs	r2, #0
 8006746:	eba3 030b 	sub.w	r3, r3, fp
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	920a      	str	r2, [sp, #40]	; 0x28
 800674e:	f1cb 0300 	rsb	r3, fp, #0
 8006752:	e7e3      	b.n	800671c <_dtoa_r+0x1ec>
 8006754:	2200      	movs	r2, #0
 8006756:	9207      	str	r2, [sp, #28]
 8006758:	9a08      	ldr	r2, [sp, #32]
 800675a:	2a00      	cmp	r2, #0
 800675c:	dc38      	bgt.n	80067d0 <_dtoa_r+0x2a0>
 800675e:	f04f 0a01 	mov.w	sl, #1
 8006762:	46d1      	mov	r9, sl
 8006764:	4652      	mov	r2, sl
 8006766:	f8cd a020 	str.w	sl, [sp, #32]
 800676a:	69f7      	ldr	r7, [r6, #28]
 800676c:	2100      	movs	r1, #0
 800676e:	2004      	movs	r0, #4
 8006770:	f100 0c14 	add.w	ip, r0, #20
 8006774:	4594      	cmp	ip, r2
 8006776:	d930      	bls.n	80067da <_dtoa_r+0x2aa>
 8006778:	6079      	str	r1, [r7, #4]
 800677a:	4630      	mov	r0, r6
 800677c:	930d      	str	r3, [sp, #52]	; 0x34
 800677e:	f000 fd43 	bl	8007208 <_Balloc>
 8006782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006784:	9001      	str	r0, [sp, #4]
 8006786:	4602      	mov	r2, r0
 8006788:	2800      	cmp	r0, #0
 800678a:	d145      	bne.n	8006818 <_dtoa_r+0x2e8>
 800678c:	4b21      	ldr	r3, [pc, #132]	; (8006814 <_dtoa_r+0x2e4>)
 800678e:	f240 11af 	movw	r1, #431	; 0x1af
 8006792:	e6e5      	b.n	8006560 <_dtoa_r+0x30>
 8006794:	2201      	movs	r2, #1
 8006796:	e7de      	b.n	8006756 <_dtoa_r+0x226>
 8006798:	2200      	movs	r2, #0
 800679a:	9207      	str	r2, [sp, #28]
 800679c:	9a08      	ldr	r2, [sp, #32]
 800679e:	eb0b 0a02 	add.w	sl, fp, r2
 80067a2:	f10a 0901 	add.w	r9, sl, #1
 80067a6:	464a      	mov	r2, r9
 80067a8:	2a01      	cmp	r2, #1
 80067aa:	bfb8      	it	lt
 80067ac:	2201      	movlt	r2, #1
 80067ae:	e7dc      	b.n	800676a <_dtoa_r+0x23a>
 80067b0:	2201      	movs	r2, #1
 80067b2:	e7f2      	b.n	800679a <_dtoa_r+0x26a>
 80067b4:	2401      	movs	r4, #1
 80067b6:	2200      	movs	r2, #0
 80067b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80067bc:	f04f 3aff 	mov.w	sl, #4294967295
 80067c0:	2100      	movs	r1, #0
 80067c2:	46d1      	mov	r9, sl
 80067c4:	2212      	movs	r2, #18
 80067c6:	9108      	str	r1, [sp, #32]
 80067c8:	e7cf      	b.n	800676a <_dtoa_r+0x23a>
 80067ca:	2201      	movs	r2, #1
 80067cc:	9207      	str	r2, [sp, #28]
 80067ce:	e7f5      	b.n	80067bc <_dtoa_r+0x28c>
 80067d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80067d4:	46d1      	mov	r9, sl
 80067d6:	4652      	mov	r2, sl
 80067d8:	e7c7      	b.n	800676a <_dtoa_r+0x23a>
 80067da:	3101      	adds	r1, #1
 80067dc:	0040      	lsls	r0, r0, #1
 80067de:	e7c7      	b.n	8006770 <_dtoa_r+0x240>
 80067e0:	636f4361 	.word	0x636f4361
 80067e4:	3fd287a7 	.word	0x3fd287a7
 80067e8:	8b60c8b3 	.word	0x8b60c8b3
 80067ec:	3fc68a28 	.word	0x3fc68a28
 80067f0:	509f79fb 	.word	0x509f79fb
 80067f4:	3fd34413 	.word	0x3fd34413
 80067f8:	0800845d 	.word	0x0800845d
 80067fc:	08008474 	.word	0x08008474
 8006800:	7ff00000 	.word	0x7ff00000
 8006804:	08008459 	.word	0x08008459
 8006808:	08008450 	.word	0x08008450
 800680c:	0800842d 	.word	0x0800842d
 8006810:	08008560 	.word	0x08008560
 8006814:	080084cc 	.word	0x080084cc
 8006818:	69f2      	ldr	r2, [r6, #28]
 800681a:	9901      	ldr	r1, [sp, #4]
 800681c:	6011      	str	r1, [r2, #0]
 800681e:	f1b9 0f0e 	cmp.w	r9, #14
 8006822:	d86c      	bhi.n	80068fe <_dtoa_r+0x3ce>
 8006824:	2c00      	cmp	r4, #0
 8006826:	d06a      	beq.n	80068fe <_dtoa_r+0x3ce>
 8006828:	f1bb 0f00 	cmp.w	fp, #0
 800682c:	f340 80a0 	ble.w	8006970 <_dtoa_r+0x440>
 8006830:	4ac1      	ldr	r2, [pc, #772]	; (8006b38 <_dtoa_r+0x608>)
 8006832:	f00b 010f 	and.w	r1, fp, #15
 8006836:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800683a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800683e:	ed92 7b00 	vldr	d7, [r2]
 8006842:	ea4f 122b 	mov.w	r2, fp, asr #4
 8006846:	f000 8087 	beq.w	8006958 <_dtoa_r+0x428>
 800684a:	49bc      	ldr	r1, [pc, #752]	; (8006b3c <_dtoa_r+0x60c>)
 800684c:	ed91 6b08 	vldr	d6, [r1, #32]
 8006850:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006854:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006858:	f002 020f 	and.w	r2, r2, #15
 800685c:	2103      	movs	r1, #3
 800685e:	48b7      	ldr	r0, [pc, #732]	; (8006b3c <_dtoa_r+0x60c>)
 8006860:	2a00      	cmp	r2, #0
 8006862:	d17b      	bne.n	800695c <_dtoa_r+0x42c>
 8006864:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006868:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800686c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006872:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006876:	2a00      	cmp	r2, #0
 8006878:	f000 80a0 	beq.w	80069bc <_dtoa_r+0x48c>
 800687c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006880:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006888:	f140 8098 	bpl.w	80069bc <_dtoa_r+0x48c>
 800688c:	f1b9 0f00 	cmp.w	r9, #0
 8006890:	f000 8094 	beq.w	80069bc <_dtoa_r+0x48c>
 8006894:	f1ba 0f00 	cmp.w	sl, #0
 8006898:	dd2f      	ble.n	80068fa <_dtoa_r+0x3ca>
 800689a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800689e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80068a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068a6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80068aa:	3101      	adds	r1, #1
 80068ac:	4654      	mov	r4, sl
 80068ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80068b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80068b6:	ee07 1a90 	vmov	s15, r1
 80068ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80068be:	eea7 5b06 	vfma.f64	d5, d7, d6
 80068c2:	ee15 7a90 	vmov	r7, s11
 80068c6:	ec51 0b15 	vmov	r0, r1, d5
 80068ca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80068ce:	2c00      	cmp	r4, #0
 80068d0:	d177      	bne.n	80069c2 <_dtoa_r+0x492>
 80068d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80068d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80068da:	ec41 0b17 	vmov	d7, r0, r1
 80068de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e6:	f300 826a 	bgt.w	8006dbe <_dtoa_r+0x88e>
 80068ea:	eeb1 7b47 	vneg.f64	d7, d7
 80068ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f6:	f100 8260 	bmi.w	8006dba <_dtoa_r+0x88a>
 80068fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80068fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006900:	2a00      	cmp	r2, #0
 8006902:	f2c0 811d 	blt.w	8006b40 <_dtoa_r+0x610>
 8006906:	f1bb 0f0e 	cmp.w	fp, #14
 800690a:	f300 8119 	bgt.w	8006b40 <_dtoa_r+0x610>
 800690e:	4b8a      	ldr	r3, [pc, #552]	; (8006b38 <_dtoa_r+0x608>)
 8006910:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006914:	ed93 6b00 	vldr	d6, [r3]
 8006918:	9b08      	ldr	r3, [sp, #32]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f280 80b7 	bge.w	8006a8e <_dtoa_r+0x55e>
 8006920:	f1b9 0f00 	cmp.w	r9, #0
 8006924:	f300 80b3 	bgt.w	8006a8e <_dtoa_r+0x55e>
 8006928:	f040 8246 	bne.w	8006db8 <_dtoa_r+0x888>
 800692c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006930:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006934:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006938:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800693c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006940:	464c      	mov	r4, r9
 8006942:	464f      	mov	r7, r9
 8006944:	f280 821c 	bge.w	8006d80 <_dtoa_r+0x850>
 8006948:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800694c:	2331      	movs	r3, #49	; 0x31
 800694e:	f808 3b01 	strb.w	r3, [r8], #1
 8006952:	f10b 0b01 	add.w	fp, fp, #1
 8006956:	e218      	b.n	8006d8a <_dtoa_r+0x85a>
 8006958:	2102      	movs	r1, #2
 800695a:	e780      	b.n	800685e <_dtoa_r+0x32e>
 800695c:	07d4      	lsls	r4, r2, #31
 800695e:	d504      	bpl.n	800696a <_dtoa_r+0x43a>
 8006960:	ed90 6b00 	vldr	d6, [r0]
 8006964:	3101      	adds	r1, #1
 8006966:	ee27 7b06 	vmul.f64	d7, d7, d6
 800696a:	1052      	asrs	r2, r2, #1
 800696c:	3008      	adds	r0, #8
 800696e:	e777      	b.n	8006860 <_dtoa_r+0x330>
 8006970:	d022      	beq.n	80069b8 <_dtoa_r+0x488>
 8006972:	f1cb 0200 	rsb	r2, fp, #0
 8006976:	4970      	ldr	r1, [pc, #448]	; (8006b38 <_dtoa_r+0x608>)
 8006978:	f002 000f 	and.w	r0, r2, #15
 800697c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006980:	ed91 7b00 	vldr	d7, [r1]
 8006984:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006988:	ed8d 7b02 	vstr	d7, [sp, #8]
 800698c:	486b      	ldr	r0, [pc, #428]	; (8006b3c <_dtoa_r+0x60c>)
 800698e:	1112      	asrs	r2, r2, #4
 8006990:	2400      	movs	r4, #0
 8006992:	2102      	movs	r1, #2
 8006994:	b92a      	cbnz	r2, 80069a2 <_dtoa_r+0x472>
 8006996:	2c00      	cmp	r4, #0
 8006998:	f43f af6a 	beq.w	8006870 <_dtoa_r+0x340>
 800699c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069a0:	e766      	b.n	8006870 <_dtoa_r+0x340>
 80069a2:	07d7      	lsls	r7, r2, #31
 80069a4:	d505      	bpl.n	80069b2 <_dtoa_r+0x482>
 80069a6:	ed90 6b00 	vldr	d6, [r0]
 80069aa:	3101      	adds	r1, #1
 80069ac:	2401      	movs	r4, #1
 80069ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069b2:	1052      	asrs	r2, r2, #1
 80069b4:	3008      	adds	r0, #8
 80069b6:	e7ed      	b.n	8006994 <_dtoa_r+0x464>
 80069b8:	2102      	movs	r1, #2
 80069ba:	e759      	b.n	8006870 <_dtoa_r+0x340>
 80069bc:	465a      	mov	r2, fp
 80069be:	464c      	mov	r4, r9
 80069c0:	e775      	b.n	80068ae <_dtoa_r+0x37e>
 80069c2:	ec41 0b17 	vmov	d7, r0, r1
 80069c6:	495c      	ldr	r1, [pc, #368]	; (8006b38 <_dtoa_r+0x608>)
 80069c8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80069cc:	ed11 4b02 	vldr	d4, [r1, #-8]
 80069d0:	9901      	ldr	r1, [sp, #4]
 80069d2:	440c      	add	r4, r1
 80069d4:	9907      	ldr	r1, [sp, #28]
 80069d6:	b351      	cbz	r1, 8006a2e <_dtoa_r+0x4fe>
 80069d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80069dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80069e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80069e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80069e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80069ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80069f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80069f4:	ee14 1a90 	vmov	r1, s9
 80069f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80069fc:	3130      	adds	r1, #48	; 0x30
 80069fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006a02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0a:	f808 1b01 	strb.w	r1, [r8], #1
 8006a0e:	d439      	bmi.n	8006a84 <_dtoa_r+0x554>
 8006a10:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006a14:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a1c:	d472      	bmi.n	8006b04 <_dtoa_r+0x5d4>
 8006a1e:	45a0      	cmp	r8, r4
 8006a20:	f43f af6b 	beq.w	80068fa <_dtoa_r+0x3ca>
 8006a24:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006a28:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006a2c:	e7e0      	b.n	80069f0 <_dtoa_r+0x4c0>
 8006a2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a32:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006a36:	4620      	mov	r0, r4
 8006a38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006a3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006a40:	ee14 1a90 	vmov	r1, s9
 8006a44:	3130      	adds	r1, #48	; 0x30
 8006a46:	f808 1b01 	strb.w	r1, [r8], #1
 8006a4a:	45a0      	cmp	r8, r4
 8006a4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006a50:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006a54:	d118      	bne.n	8006a88 <_dtoa_r+0x558>
 8006a56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006a5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006a5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a66:	dc4d      	bgt.n	8006b04 <_dtoa_r+0x5d4>
 8006a68:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006a6c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a74:	f57f af41 	bpl.w	80068fa <_dtoa_r+0x3ca>
 8006a78:	4680      	mov	r8, r0
 8006a7a:	3801      	subs	r0, #1
 8006a7c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006a80:	2b30      	cmp	r3, #48	; 0x30
 8006a82:	d0f9      	beq.n	8006a78 <_dtoa_r+0x548>
 8006a84:	4693      	mov	fp, r2
 8006a86:	e02a      	b.n	8006ade <_dtoa_r+0x5ae>
 8006a88:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006a8c:	e7d6      	b.n	8006a3c <_dtoa_r+0x50c>
 8006a8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a92:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006a96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a9a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006a9e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006aa2:	ee15 3a10 	vmov	r3, s10
 8006aa6:	3330      	adds	r3, #48	; 0x30
 8006aa8:	f808 3b01 	strb.w	r3, [r8], #1
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	eba8 0303 	sub.w	r3, r8, r3
 8006ab2:	4599      	cmp	r9, r3
 8006ab4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006ab8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006abc:	d133      	bne.n	8006b26 <_dtoa_r+0x5f6>
 8006abe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006ac2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aca:	dc1a      	bgt.n	8006b02 <_dtoa_r+0x5d2>
 8006acc:	eeb4 7b46 	vcmp.f64	d7, d6
 8006ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad4:	d103      	bne.n	8006ade <_dtoa_r+0x5ae>
 8006ad6:	ee15 3a10 	vmov	r3, s10
 8006ada:	07d9      	lsls	r1, r3, #31
 8006adc:	d411      	bmi.n	8006b02 <_dtoa_r+0x5d2>
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 fbd1 	bl	8007288 <_Bfree>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aea:	f888 3000 	strb.w	r3, [r8]
 8006aee:	f10b 0301 	add.w	r3, fp, #1
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f43f ad69 	beq.w	80065ce <_dtoa_r+0x9e>
 8006afc:	f8c3 8000 	str.w	r8, [r3]
 8006b00:	e565      	b.n	80065ce <_dtoa_r+0x9e>
 8006b02:	465a      	mov	r2, fp
 8006b04:	4643      	mov	r3, r8
 8006b06:	4698      	mov	r8, r3
 8006b08:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006b0c:	2939      	cmp	r1, #57	; 0x39
 8006b0e:	d106      	bne.n	8006b1e <_dtoa_r+0x5ee>
 8006b10:	9901      	ldr	r1, [sp, #4]
 8006b12:	4299      	cmp	r1, r3
 8006b14:	d1f7      	bne.n	8006b06 <_dtoa_r+0x5d6>
 8006b16:	9801      	ldr	r0, [sp, #4]
 8006b18:	2130      	movs	r1, #48	; 0x30
 8006b1a:	3201      	adds	r2, #1
 8006b1c:	7001      	strb	r1, [r0, #0]
 8006b1e:	7819      	ldrb	r1, [r3, #0]
 8006b20:	3101      	adds	r1, #1
 8006b22:	7019      	strb	r1, [r3, #0]
 8006b24:	e7ae      	b.n	8006a84 <_dtoa_r+0x554>
 8006b26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006b2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b32:	d1b2      	bne.n	8006a9a <_dtoa_r+0x56a>
 8006b34:	e7d3      	b.n	8006ade <_dtoa_r+0x5ae>
 8006b36:	bf00      	nop
 8006b38:	08008560 	.word	0x08008560
 8006b3c:	08008538 	.word	0x08008538
 8006b40:	9907      	ldr	r1, [sp, #28]
 8006b42:	2900      	cmp	r1, #0
 8006b44:	f000 80d0 	beq.w	8006ce8 <_dtoa_r+0x7b8>
 8006b48:	9906      	ldr	r1, [sp, #24]
 8006b4a:	2901      	cmp	r1, #1
 8006b4c:	f300 80b4 	bgt.w	8006cb8 <_dtoa_r+0x788>
 8006b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b52:	2900      	cmp	r1, #0
 8006b54:	f000 80ac 	beq.w	8006cb0 <_dtoa_r+0x780>
 8006b58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006b60:	461c      	mov	r4, r3
 8006b62:	9309      	str	r3, [sp, #36]	; 0x24
 8006b64:	9b04      	ldr	r3, [sp, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	9304      	str	r3, [sp, #16]
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4413      	add	r3, r2
 8006b70:	4630      	mov	r0, r6
 8006b72:	9305      	str	r3, [sp, #20]
 8006b74:	f000 fc3e 	bl	80073f4 <__i2b>
 8006b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	f1b8 0f00 	cmp.w	r8, #0
 8006b80:	d00d      	beq.n	8006b9e <_dtoa_r+0x66e>
 8006b82:	9a05      	ldr	r2, [sp, #20]
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	dd0a      	ble.n	8006b9e <_dtoa_r+0x66e>
 8006b88:	4542      	cmp	r2, r8
 8006b8a:	9904      	ldr	r1, [sp, #16]
 8006b8c:	bfa8      	it	ge
 8006b8e:	4642      	movge	r2, r8
 8006b90:	1a89      	subs	r1, r1, r2
 8006b92:	9104      	str	r1, [sp, #16]
 8006b94:	9905      	ldr	r1, [sp, #20]
 8006b96:	eba8 0802 	sub.w	r8, r8, r2
 8006b9a:	1a8a      	subs	r2, r1, r2
 8006b9c:	9205      	str	r2, [sp, #20]
 8006b9e:	b303      	cbz	r3, 8006be2 <_dtoa_r+0x6b2>
 8006ba0:	9a07      	ldr	r2, [sp, #28]
 8006ba2:	2a00      	cmp	r2, #0
 8006ba4:	f000 80a5 	beq.w	8006cf2 <_dtoa_r+0x7c2>
 8006ba8:	2c00      	cmp	r4, #0
 8006baa:	dd13      	ble.n	8006bd4 <_dtoa_r+0x6a4>
 8006bac:	4639      	mov	r1, r7
 8006bae:	4622      	mov	r2, r4
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8006bb4:	f000 fcde 	bl	8007574 <__pow5mult>
 8006bb8:	462a      	mov	r2, r5
 8006bba:	4601      	mov	r1, r0
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 fc2e 	bl	8007420 <__multiply>
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	9009      	str	r0, [sp, #36]	; 0x24
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 fb5d 	bl	8007288 <_Bfree>
 8006bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd2:	4615      	mov	r5, r2
 8006bd4:	1b1a      	subs	r2, r3, r4
 8006bd6:	d004      	beq.n	8006be2 <_dtoa_r+0x6b2>
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f000 fcca 	bl	8007574 <__pow5mult>
 8006be0:	4605      	mov	r5, r0
 8006be2:	2101      	movs	r1, #1
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 fc05 	bl	80073f4 <__i2b>
 8006bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	f340 8081 	ble.w	8006cf6 <_dtoa_r+0x7c6>
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 fcbb 	bl	8007574 <__pow5mult>
 8006bfe:	9b06      	ldr	r3, [sp, #24]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	4604      	mov	r4, r0
 8006c04:	dd7a      	ble.n	8006cfc <_dtoa_r+0x7cc>
 8006c06:	2300      	movs	r3, #0
 8006c08:	9309      	str	r3, [sp, #36]	; 0x24
 8006c0a:	6922      	ldr	r2, [r4, #16]
 8006c0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006c10:	6910      	ldr	r0, [r2, #16]
 8006c12:	f000 fba1 	bl	8007358 <__hi0bits>
 8006c16:	f1c0 0020 	rsb	r0, r0, #32
 8006c1a:	9b05      	ldr	r3, [sp, #20]
 8006c1c:	4418      	add	r0, r3
 8006c1e:	f010 001f 	ands.w	r0, r0, #31
 8006c22:	f000 8093 	beq.w	8006d4c <_dtoa_r+0x81c>
 8006c26:	f1c0 0220 	rsb	r2, r0, #32
 8006c2a:	2a04      	cmp	r2, #4
 8006c2c:	f340 8085 	ble.w	8006d3a <_dtoa_r+0x80a>
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	f1c0 001c 	rsb	r0, r0, #28
 8006c36:	4403      	add	r3, r0
 8006c38:	9304      	str	r3, [sp, #16]
 8006c3a:	9b05      	ldr	r3, [sp, #20]
 8006c3c:	4480      	add	r8, r0
 8006c3e:	4403      	add	r3, r0
 8006c40:	9305      	str	r3, [sp, #20]
 8006c42:	9b04      	ldr	r3, [sp, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dd05      	ble.n	8006c54 <_dtoa_r+0x724>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f000 fceb 	bl	8007628 <__lshift>
 8006c52:	4605      	mov	r5, r0
 8006c54:	9b05      	ldr	r3, [sp, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dd05      	ble.n	8006c66 <_dtoa_r+0x736>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f000 fce2 	bl	8007628 <__lshift>
 8006c64:	4604      	mov	r4, r0
 8006c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d071      	beq.n	8006d50 <_dtoa_r+0x820>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fd46 	bl	8007700 <__mcmp>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	da6b      	bge.n	8006d50 <_dtoa_r+0x820>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	220a      	movs	r2, #10
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f000 fb24 	bl	80072cc <__multadd>
 8006c84:	9b07      	ldr	r3, [sp, #28]
 8006c86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8197 	beq.w	8006fc0 <_dtoa_r+0xa90>
 8006c92:	4639      	mov	r1, r7
 8006c94:	2300      	movs	r3, #0
 8006c96:	220a      	movs	r2, #10
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f000 fb17 	bl	80072cc <__multadd>
 8006c9e:	f1ba 0f00 	cmp.w	sl, #0
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	f300 8093 	bgt.w	8006dce <_dtoa_r+0x89e>
 8006ca8:	9b06      	ldr	r3, [sp, #24]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	dc57      	bgt.n	8006d5e <_dtoa_r+0x82e>
 8006cae:	e08e      	b.n	8006dce <_dtoa_r+0x89e>
 8006cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006cb6:	e751      	b.n	8006b5c <_dtoa_r+0x62c>
 8006cb8:	f109 34ff 	add.w	r4, r9, #4294967295
 8006cbc:	42a3      	cmp	r3, r4
 8006cbe:	bfbf      	itttt	lt
 8006cc0:	1ae2      	sublt	r2, r4, r3
 8006cc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cc4:	189b      	addlt	r3, r3, r2
 8006cc6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006cc8:	bfae      	itee	ge
 8006cca:	1b1c      	subge	r4, r3, r4
 8006ccc:	4623      	movlt	r3, r4
 8006cce:	2400      	movlt	r4, #0
 8006cd0:	f1b9 0f00 	cmp.w	r9, #0
 8006cd4:	bfb5      	itete	lt
 8006cd6:	9a04      	ldrlt	r2, [sp, #16]
 8006cd8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006cdc:	eba2 0809 	sublt.w	r8, r2, r9
 8006ce0:	464a      	movge	r2, r9
 8006ce2:	bfb8      	it	lt
 8006ce4:	2200      	movlt	r2, #0
 8006ce6:	e73c      	b.n	8006b62 <_dtoa_r+0x632>
 8006ce8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006cec:	9f07      	ldr	r7, [sp, #28]
 8006cee:	461c      	mov	r4, r3
 8006cf0:	e744      	b.n	8006b7c <_dtoa_r+0x64c>
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	e770      	b.n	8006bd8 <_dtoa_r+0x6a8>
 8006cf6:	9b06      	ldr	r3, [sp, #24]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	dc18      	bgt.n	8006d2e <_dtoa_r+0x7fe>
 8006cfc:	9b02      	ldr	r3, [sp, #8]
 8006cfe:	b9b3      	cbnz	r3, 8006d2e <_dtoa_r+0x7fe>
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006d06:	b9a2      	cbnz	r2, 8006d32 <_dtoa_r+0x802>
 8006d08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d0c:	0d12      	lsrs	r2, r2, #20
 8006d0e:	0512      	lsls	r2, r2, #20
 8006d10:	b18a      	cbz	r2, 8006d36 <_dtoa_r+0x806>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	3301      	adds	r3, #1
 8006d16:	9304      	str	r3, [sp, #16]
 8006d18:	9b05      	ldr	r3, [sp, #20]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	2301      	movs	r3, #1
 8006d20:	9309      	str	r3, [sp, #36]	; 0x24
 8006d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f47f af70 	bne.w	8006c0a <_dtoa_r+0x6da>
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	e775      	b.n	8006c1a <_dtoa_r+0x6ea>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e7f6      	b.n	8006d20 <_dtoa_r+0x7f0>
 8006d32:	9b02      	ldr	r3, [sp, #8]
 8006d34:	e7f4      	b.n	8006d20 <_dtoa_r+0x7f0>
 8006d36:	9209      	str	r2, [sp, #36]	; 0x24
 8006d38:	e7f3      	b.n	8006d22 <_dtoa_r+0x7f2>
 8006d3a:	d082      	beq.n	8006c42 <_dtoa_r+0x712>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	321c      	adds	r2, #28
 8006d40:	4413      	add	r3, r2
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	9b05      	ldr	r3, [sp, #20]
 8006d46:	4490      	add	r8, r2
 8006d48:	4413      	add	r3, r2
 8006d4a:	e779      	b.n	8006c40 <_dtoa_r+0x710>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	e7f5      	b.n	8006d3c <_dtoa_r+0x80c>
 8006d50:	f1b9 0f00 	cmp.w	r9, #0
 8006d54:	dc36      	bgt.n	8006dc4 <_dtoa_r+0x894>
 8006d56:	9b06      	ldr	r3, [sp, #24]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	dd33      	ble.n	8006dc4 <_dtoa_r+0x894>
 8006d5c:	46ca      	mov	sl, r9
 8006d5e:	f1ba 0f00 	cmp.w	sl, #0
 8006d62:	d10d      	bne.n	8006d80 <_dtoa_r+0x850>
 8006d64:	4621      	mov	r1, r4
 8006d66:	4653      	mov	r3, sl
 8006d68:	2205      	movs	r2, #5
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 faae 	bl	80072cc <__multadd>
 8006d70:	4601      	mov	r1, r0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 fcc3 	bl	8007700 <__mcmp>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f73f ade4 	bgt.w	8006948 <_dtoa_r+0x418>
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d86:	ea6f 0b03 	mvn.w	fp, r3
 8006d8a:	f04f 0900 	mov.w	r9, #0
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 fa79 	bl	8007288 <_Bfree>
 8006d96:	2f00      	cmp	r7, #0
 8006d98:	f43f aea1 	beq.w	8006ade <_dtoa_r+0x5ae>
 8006d9c:	f1b9 0f00 	cmp.w	r9, #0
 8006da0:	d005      	beq.n	8006dae <_dtoa_r+0x87e>
 8006da2:	45b9      	cmp	r9, r7
 8006da4:	d003      	beq.n	8006dae <_dtoa_r+0x87e>
 8006da6:	4649      	mov	r1, r9
 8006da8:	4630      	mov	r0, r6
 8006daa:	f000 fa6d 	bl	8007288 <_Bfree>
 8006dae:	4639      	mov	r1, r7
 8006db0:	4630      	mov	r0, r6
 8006db2:	f000 fa69 	bl	8007288 <_Bfree>
 8006db6:	e692      	b.n	8006ade <_dtoa_r+0x5ae>
 8006db8:	2400      	movs	r4, #0
 8006dba:	4627      	mov	r7, r4
 8006dbc:	e7e0      	b.n	8006d80 <_dtoa_r+0x850>
 8006dbe:	4693      	mov	fp, r2
 8006dc0:	4627      	mov	r7, r4
 8006dc2:	e5c1      	b.n	8006948 <_dtoa_r+0x418>
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	46ca      	mov	sl, r9
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8100 	beq.w	8006fce <_dtoa_r+0xa9e>
 8006dce:	f1b8 0f00 	cmp.w	r8, #0
 8006dd2:	dd05      	ble.n	8006de0 <_dtoa_r+0x8b0>
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f000 fc25 	bl	8007628 <__lshift>
 8006dde:	4607      	mov	r7, r0
 8006de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d05d      	beq.n	8006ea2 <_dtoa_r+0x972>
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 fa0d 	bl	8007208 <_Balloc>
 8006dee:	4680      	mov	r8, r0
 8006df0:	b928      	cbnz	r0, 8006dfe <_dtoa_r+0x8ce>
 8006df2:	4b82      	ldr	r3, [pc, #520]	; (8006ffc <_dtoa_r+0xacc>)
 8006df4:	4602      	mov	r2, r0
 8006df6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006dfa:	f7ff bbb1 	b.w	8006560 <_dtoa_r+0x30>
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	3202      	adds	r2, #2
 8006e02:	0092      	lsls	r2, r2, #2
 8006e04:	f107 010c 	add.w	r1, r7, #12
 8006e08:	300c      	adds	r0, #12
 8006e0a:	f000 fe37 	bl	8007a7c <memcpy>
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4641      	mov	r1, r8
 8006e12:	4630      	mov	r0, r6
 8006e14:	f000 fc08 	bl	8007628 <__lshift>
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	9b01      	ldr	r3, [sp, #4]
 8006e20:	4453      	add	r3, sl
 8006e22:	9308      	str	r3, [sp, #32]
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	46b9      	mov	r9, r7
 8006e2c:	9307      	str	r3, [sp, #28]
 8006e2e:	4607      	mov	r7, r0
 8006e30:	9b04      	ldr	r3, [sp, #16]
 8006e32:	4621      	mov	r1, r4
 8006e34:	3b01      	subs	r3, #1
 8006e36:	4628      	mov	r0, r5
 8006e38:	9302      	str	r3, [sp, #8]
 8006e3a:	f7ff faf1 	bl	8006420 <quorem>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	3330      	adds	r3, #48	; 0x30
 8006e42:	9005      	str	r0, [sp, #20]
 8006e44:	4649      	mov	r1, r9
 8006e46:	4628      	mov	r0, r5
 8006e48:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4a:	f000 fc59 	bl	8007700 <__mcmp>
 8006e4e:	463a      	mov	r2, r7
 8006e50:	4682      	mov	sl, r0
 8006e52:	4621      	mov	r1, r4
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 fc6f 	bl	8007738 <__mdiff>
 8006e5a:	68c2      	ldr	r2, [r0, #12]
 8006e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5e:	4680      	mov	r8, r0
 8006e60:	bb0a      	cbnz	r2, 8006ea6 <_dtoa_r+0x976>
 8006e62:	4601      	mov	r1, r0
 8006e64:	4628      	mov	r0, r5
 8006e66:	f000 fc4b 	bl	8007700 <__mcmp>
 8006e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4641      	mov	r1, r8
 8006e70:	4630      	mov	r0, r6
 8006e72:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006e76:	f000 fa07 	bl	8007288 <_Bfree>
 8006e7a:	9b06      	ldr	r3, [sp, #24]
 8006e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e7e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006e82:	ea43 0102 	orr.w	r1, r3, r2
 8006e86:	9b07      	ldr	r3, [sp, #28]
 8006e88:	4319      	orrs	r1, r3
 8006e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8c:	d10d      	bne.n	8006eaa <_dtoa_r+0x97a>
 8006e8e:	2b39      	cmp	r3, #57	; 0x39
 8006e90:	d029      	beq.n	8006ee6 <_dtoa_r+0x9b6>
 8006e92:	f1ba 0f00 	cmp.w	sl, #0
 8006e96:	dd01      	ble.n	8006e9c <_dtoa_r+0x96c>
 8006e98:	9b05      	ldr	r3, [sp, #20]
 8006e9a:	3331      	adds	r3, #49	; 0x31
 8006e9c:	9a02      	ldr	r2, [sp, #8]
 8006e9e:	7013      	strb	r3, [r2, #0]
 8006ea0:	e775      	b.n	8006d8e <_dtoa_r+0x85e>
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	e7b8      	b.n	8006e18 <_dtoa_r+0x8e8>
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	e7e1      	b.n	8006e6e <_dtoa_r+0x93e>
 8006eaa:	f1ba 0f00 	cmp.w	sl, #0
 8006eae:	db06      	blt.n	8006ebe <_dtoa_r+0x98e>
 8006eb0:	9906      	ldr	r1, [sp, #24]
 8006eb2:	ea41 0a0a 	orr.w	sl, r1, sl
 8006eb6:	9907      	ldr	r1, [sp, #28]
 8006eb8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8006ebc:	d120      	bne.n	8006f00 <_dtoa_r+0x9d0>
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	ddec      	ble.n	8006e9c <_dtoa_r+0x96c>
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	f000 fbad 	bl	8007628 <__lshift>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f000 fc15 	bl	8007700 <__mcmp>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	9b04      	ldr	r3, [sp, #16]
 8006eda:	dc02      	bgt.n	8006ee2 <_dtoa_r+0x9b2>
 8006edc:	d1de      	bne.n	8006e9c <_dtoa_r+0x96c>
 8006ede:	07da      	lsls	r2, r3, #31
 8006ee0:	d5dc      	bpl.n	8006e9c <_dtoa_r+0x96c>
 8006ee2:	2b39      	cmp	r3, #57	; 0x39
 8006ee4:	d1d8      	bne.n	8006e98 <_dtoa_r+0x968>
 8006ee6:	9a02      	ldr	r2, [sp, #8]
 8006ee8:	2339      	movs	r3, #57	; 0x39
 8006eea:	7013      	strb	r3, [r2, #0]
 8006eec:	4643      	mov	r3, r8
 8006eee:	4698      	mov	r8, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006ef6:	2a39      	cmp	r2, #57	; 0x39
 8006ef8:	d051      	beq.n	8006f9e <_dtoa_r+0xa6e>
 8006efa:	3201      	adds	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e746      	b.n	8006d8e <_dtoa_r+0x85e>
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	dd03      	ble.n	8006f0c <_dtoa_r+0x9dc>
 8006f04:	2b39      	cmp	r3, #57	; 0x39
 8006f06:	d0ee      	beq.n	8006ee6 <_dtoa_r+0x9b6>
 8006f08:	3301      	adds	r3, #1
 8006f0a:	e7c7      	b.n	8006e9c <_dtoa_r+0x96c>
 8006f0c:	9a04      	ldr	r2, [sp, #16]
 8006f0e:	9908      	ldr	r1, [sp, #32]
 8006f10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f14:	428a      	cmp	r2, r1
 8006f16:	d02b      	beq.n	8006f70 <_dtoa_r+0xa40>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	220a      	movs	r2, #10
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 f9d4 	bl	80072cc <__multadd>
 8006f24:	45b9      	cmp	r9, r7
 8006f26:	4605      	mov	r5, r0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	f04f 020a 	mov.w	r2, #10
 8006f30:	4649      	mov	r1, r9
 8006f32:	4630      	mov	r0, r6
 8006f34:	d107      	bne.n	8006f46 <_dtoa_r+0xa16>
 8006f36:	f000 f9c9 	bl	80072cc <__multadd>
 8006f3a:	4681      	mov	r9, r0
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	3301      	adds	r3, #1
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	e774      	b.n	8006e30 <_dtoa_r+0x900>
 8006f46:	f000 f9c1 	bl	80072cc <__multadd>
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4681      	mov	r9, r0
 8006f4e:	2300      	movs	r3, #0
 8006f50:	220a      	movs	r2, #10
 8006f52:	4630      	mov	r0, r6
 8006f54:	f000 f9ba 	bl	80072cc <__multadd>
 8006f58:	4607      	mov	r7, r0
 8006f5a:	e7f0      	b.n	8006f3e <_dtoa_r+0xa0e>
 8006f5c:	f1ba 0f00 	cmp.w	sl, #0
 8006f60:	9a01      	ldr	r2, [sp, #4]
 8006f62:	bfcc      	ite	gt
 8006f64:	46d0      	movgt	r8, sl
 8006f66:	f04f 0801 	movle.w	r8, #1
 8006f6a:	4490      	add	r8, r2
 8006f6c:	f04f 0900 	mov.w	r9, #0
 8006f70:	4629      	mov	r1, r5
 8006f72:	2201      	movs	r2, #1
 8006f74:	4630      	mov	r0, r6
 8006f76:	9302      	str	r3, [sp, #8]
 8006f78:	f000 fb56 	bl	8007628 <__lshift>
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4605      	mov	r5, r0
 8006f80:	f000 fbbe 	bl	8007700 <__mcmp>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	dcb1      	bgt.n	8006eec <_dtoa_r+0x9bc>
 8006f88:	d102      	bne.n	8006f90 <_dtoa_r+0xa60>
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	07db      	lsls	r3, r3, #31
 8006f8e:	d4ad      	bmi.n	8006eec <_dtoa_r+0x9bc>
 8006f90:	4643      	mov	r3, r8
 8006f92:	4698      	mov	r8, r3
 8006f94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f98:	2a30      	cmp	r2, #48	; 0x30
 8006f9a:	d0fa      	beq.n	8006f92 <_dtoa_r+0xa62>
 8006f9c:	e6f7      	b.n	8006d8e <_dtoa_r+0x85e>
 8006f9e:	9a01      	ldr	r2, [sp, #4]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d1a4      	bne.n	8006eee <_dtoa_r+0x9be>
 8006fa4:	f10b 0b01 	add.w	fp, fp, #1
 8006fa8:	2331      	movs	r3, #49	; 0x31
 8006faa:	e778      	b.n	8006e9e <_dtoa_r+0x96e>
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <_dtoa_r+0xad0>)
 8006fae:	f7ff bb2a 	b.w	8006606 <_dtoa_r+0xd6>
 8006fb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f47f ab05 	bne.w	80065c4 <_dtoa_r+0x94>
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <_dtoa_r+0xad4>)
 8006fbc:	f7ff bb23 	b.w	8006606 <_dtoa_r+0xd6>
 8006fc0:	f1ba 0f00 	cmp.w	sl, #0
 8006fc4:	dc03      	bgt.n	8006fce <_dtoa_r+0xa9e>
 8006fc6:	9b06      	ldr	r3, [sp, #24]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	f73f aec8 	bgt.w	8006d5e <_dtoa_r+0x82e>
 8006fce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f7ff fa23 	bl	8006420 <quorem>
 8006fda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006fde:	f808 3b01 	strb.w	r3, [r8], #1
 8006fe2:	9a01      	ldr	r2, [sp, #4]
 8006fe4:	eba8 0202 	sub.w	r2, r8, r2
 8006fe8:	4592      	cmp	sl, r2
 8006fea:	ddb7      	ble.n	8006f5c <_dtoa_r+0xa2c>
 8006fec:	4629      	mov	r1, r5
 8006fee:	2300      	movs	r3, #0
 8006ff0:	220a      	movs	r2, #10
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f000 f96a 	bl	80072cc <__multadd>
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	e7ea      	b.n	8006fd2 <_dtoa_r+0xaa2>
 8006ffc:	080084cc 	.word	0x080084cc
 8007000:	0800842c 	.word	0x0800842c
 8007004:	08008450 	.word	0x08008450

08007008 <_free_r>:
 8007008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800700a:	2900      	cmp	r1, #0
 800700c:	d044      	beq.n	8007098 <_free_r+0x90>
 800700e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007012:	9001      	str	r0, [sp, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f1a1 0404 	sub.w	r4, r1, #4
 800701a:	bfb8      	it	lt
 800701c:	18e4      	addlt	r4, r4, r3
 800701e:	f000 f8e7 	bl	80071f0 <__malloc_lock>
 8007022:	4a1e      	ldr	r2, [pc, #120]	; (800709c <_free_r+0x94>)
 8007024:	9801      	ldr	r0, [sp, #4]
 8007026:	6813      	ldr	r3, [r2, #0]
 8007028:	b933      	cbnz	r3, 8007038 <_free_r+0x30>
 800702a:	6063      	str	r3, [r4, #4]
 800702c:	6014      	str	r4, [r2, #0]
 800702e:	b003      	add	sp, #12
 8007030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007034:	f000 b8e2 	b.w	80071fc <__malloc_unlock>
 8007038:	42a3      	cmp	r3, r4
 800703a:	d908      	bls.n	800704e <_free_r+0x46>
 800703c:	6825      	ldr	r5, [r4, #0]
 800703e:	1961      	adds	r1, r4, r5
 8007040:	428b      	cmp	r3, r1
 8007042:	bf01      	itttt	eq
 8007044:	6819      	ldreq	r1, [r3, #0]
 8007046:	685b      	ldreq	r3, [r3, #4]
 8007048:	1949      	addeq	r1, r1, r5
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	e7ed      	b.n	800702a <_free_r+0x22>
 800704e:	461a      	mov	r2, r3
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b10b      	cbz	r3, 8007058 <_free_r+0x50>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d9fa      	bls.n	800704e <_free_r+0x46>
 8007058:	6811      	ldr	r1, [r2, #0]
 800705a:	1855      	adds	r5, r2, r1
 800705c:	42a5      	cmp	r5, r4
 800705e:	d10b      	bne.n	8007078 <_free_r+0x70>
 8007060:	6824      	ldr	r4, [r4, #0]
 8007062:	4421      	add	r1, r4
 8007064:	1854      	adds	r4, r2, r1
 8007066:	42a3      	cmp	r3, r4
 8007068:	6011      	str	r1, [r2, #0]
 800706a:	d1e0      	bne.n	800702e <_free_r+0x26>
 800706c:	681c      	ldr	r4, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	6053      	str	r3, [r2, #4]
 8007072:	440c      	add	r4, r1
 8007074:	6014      	str	r4, [r2, #0]
 8007076:	e7da      	b.n	800702e <_free_r+0x26>
 8007078:	d902      	bls.n	8007080 <_free_r+0x78>
 800707a:	230c      	movs	r3, #12
 800707c:	6003      	str	r3, [r0, #0]
 800707e:	e7d6      	b.n	800702e <_free_r+0x26>
 8007080:	6825      	ldr	r5, [r4, #0]
 8007082:	1961      	adds	r1, r4, r5
 8007084:	428b      	cmp	r3, r1
 8007086:	bf04      	itt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	6063      	str	r3, [r4, #4]
 800708e:	bf04      	itt	eq
 8007090:	1949      	addeq	r1, r1, r5
 8007092:	6021      	streq	r1, [r4, #0]
 8007094:	6054      	str	r4, [r2, #4]
 8007096:	e7ca      	b.n	800702e <_free_r+0x26>
 8007098:	b003      	add	sp, #12
 800709a:	bd30      	pop	{r4, r5, pc}
 800709c:	20000500 	.word	0x20000500

080070a0 <malloc>:
 80070a0:	4b02      	ldr	r3, [pc, #8]	; (80070ac <malloc+0xc>)
 80070a2:	4601      	mov	r1, r0
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	f000 b823 	b.w	80070f0 <_malloc_r>
 80070aa:	bf00      	nop
 80070ac:	20000068 	.word	0x20000068

080070b0 <sbrk_aligned>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4e0e      	ldr	r6, [pc, #56]	; (80070ec <sbrk_aligned+0x3c>)
 80070b4:	460c      	mov	r4, r1
 80070b6:	6831      	ldr	r1, [r6, #0]
 80070b8:	4605      	mov	r5, r0
 80070ba:	b911      	cbnz	r1, 80070c2 <sbrk_aligned+0x12>
 80070bc:	f000 fcce 	bl	8007a5c <_sbrk_r>
 80070c0:	6030      	str	r0, [r6, #0]
 80070c2:	4621      	mov	r1, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 fcc9 	bl	8007a5c <_sbrk_r>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	d00a      	beq.n	80070e4 <sbrk_aligned+0x34>
 80070ce:	1cc4      	adds	r4, r0, #3
 80070d0:	f024 0403 	bic.w	r4, r4, #3
 80070d4:	42a0      	cmp	r0, r4
 80070d6:	d007      	beq.n	80070e8 <sbrk_aligned+0x38>
 80070d8:	1a21      	subs	r1, r4, r0
 80070da:	4628      	mov	r0, r5
 80070dc:	f000 fcbe 	bl	8007a5c <_sbrk_r>
 80070e0:	3001      	adds	r0, #1
 80070e2:	d101      	bne.n	80070e8 <sbrk_aligned+0x38>
 80070e4:	f04f 34ff 	mov.w	r4, #4294967295
 80070e8:	4620      	mov	r0, r4
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	20000504 	.word	0x20000504

080070f0 <_malloc_r>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	1ccd      	adds	r5, r1, #3
 80070f6:	f025 0503 	bic.w	r5, r5, #3
 80070fa:	3508      	adds	r5, #8
 80070fc:	2d0c      	cmp	r5, #12
 80070fe:	bf38      	it	cc
 8007100:	250c      	movcc	r5, #12
 8007102:	2d00      	cmp	r5, #0
 8007104:	4607      	mov	r7, r0
 8007106:	db01      	blt.n	800710c <_malloc_r+0x1c>
 8007108:	42a9      	cmp	r1, r5
 800710a:	d905      	bls.n	8007118 <_malloc_r+0x28>
 800710c:	230c      	movs	r3, #12
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	2600      	movs	r6, #0
 8007112:	4630      	mov	r0, r6
 8007114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007118:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071ec <_malloc_r+0xfc>
 800711c:	f000 f868 	bl	80071f0 <__malloc_lock>
 8007120:	f8d8 3000 	ldr.w	r3, [r8]
 8007124:	461c      	mov	r4, r3
 8007126:	bb5c      	cbnz	r4, 8007180 <_malloc_r+0x90>
 8007128:	4629      	mov	r1, r5
 800712a:	4638      	mov	r0, r7
 800712c:	f7ff ffc0 	bl	80070b0 <sbrk_aligned>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	4604      	mov	r4, r0
 8007134:	d155      	bne.n	80071e2 <_malloc_r+0xf2>
 8007136:	f8d8 4000 	ldr.w	r4, [r8]
 800713a:	4626      	mov	r6, r4
 800713c:	2e00      	cmp	r6, #0
 800713e:	d145      	bne.n	80071cc <_malloc_r+0xdc>
 8007140:	2c00      	cmp	r4, #0
 8007142:	d048      	beq.n	80071d6 <_malloc_r+0xe6>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	4631      	mov	r1, r6
 8007148:	4638      	mov	r0, r7
 800714a:	eb04 0903 	add.w	r9, r4, r3
 800714e:	f000 fc85 	bl	8007a5c <_sbrk_r>
 8007152:	4581      	cmp	r9, r0
 8007154:	d13f      	bne.n	80071d6 <_malloc_r+0xe6>
 8007156:	6821      	ldr	r1, [r4, #0]
 8007158:	1a6d      	subs	r5, r5, r1
 800715a:	4629      	mov	r1, r5
 800715c:	4638      	mov	r0, r7
 800715e:	f7ff ffa7 	bl	80070b0 <sbrk_aligned>
 8007162:	3001      	adds	r0, #1
 8007164:	d037      	beq.n	80071d6 <_malloc_r+0xe6>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	442b      	add	r3, r5
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	f8d8 3000 	ldr.w	r3, [r8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d038      	beq.n	80071e6 <_malloc_r+0xf6>
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	42a2      	cmp	r2, r4
 8007178:	d12b      	bne.n	80071d2 <_malloc_r+0xe2>
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
 800717e:	e00f      	b.n	80071a0 <_malloc_r+0xb0>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	1b52      	subs	r2, r2, r5
 8007184:	d41f      	bmi.n	80071c6 <_malloc_r+0xd6>
 8007186:	2a0b      	cmp	r2, #11
 8007188:	d917      	bls.n	80071ba <_malloc_r+0xca>
 800718a:	1961      	adds	r1, r4, r5
 800718c:	42a3      	cmp	r3, r4
 800718e:	6025      	str	r5, [r4, #0]
 8007190:	bf18      	it	ne
 8007192:	6059      	strne	r1, [r3, #4]
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	bf08      	it	eq
 8007198:	f8c8 1000 	streq.w	r1, [r8]
 800719c:	5162      	str	r2, [r4, r5]
 800719e:	604b      	str	r3, [r1, #4]
 80071a0:	4638      	mov	r0, r7
 80071a2:	f104 060b 	add.w	r6, r4, #11
 80071a6:	f000 f829 	bl	80071fc <__malloc_unlock>
 80071aa:	f026 0607 	bic.w	r6, r6, #7
 80071ae:	1d23      	adds	r3, r4, #4
 80071b0:	1af2      	subs	r2, r6, r3
 80071b2:	d0ae      	beq.n	8007112 <_malloc_r+0x22>
 80071b4:	1b9b      	subs	r3, r3, r6
 80071b6:	50a3      	str	r3, [r4, r2]
 80071b8:	e7ab      	b.n	8007112 <_malloc_r+0x22>
 80071ba:	42a3      	cmp	r3, r4
 80071bc:	6862      	ldr	r2, [r4, #4]
 80071be:	d1dd      	bne.n	800717c <_malloc_r+0x8c>
 80071c0:	f8c8 2000 	str.w	r2, [r8]
 80071c4:	e7ec      	b.n	80071a0 <_malloc_r+0xb0>
 80071c6:	4623      	mov	r3, r4
 80071c8:	6864      	ldr	r4, [r4, #4]
 80071ca:	e7ac      	b.n	8007126 <_malloc_r+0x36>
 80071cc:	4634      	mov	r4, r6
 80071ce:	6876      	ldr	r6, [r6, #4]
 80071d0:	e7b4      	b.n	800713c <_malloc_r+0x4c>
 80071d2:	4613      	mov	r3, r2
 80071d4:	e7cc      	b.n	8007170 <_malloc_r+0x80>
 80071d6:	230c      	movs	r3, #12
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	4638      	mov	r0, r7
 80071dc:	f000 f80e 	bl	80071fc <__malloc_unlock>
 80071e0:	e797      	b.n	8007112 <_malloc_r+0x22>
 80071e2:	6025      	str	r5, [r4, #0]
 80071e4:	e7dc      	b.n	80071a0 <_malloc_r+0xb0>
 80071e6:	605b      	str	r3, [r3, #4]
 80071e8:	deff      	udf	#255	; 0xff
 80071ea:	bf00      	nop
 80071ec:	20000500 	.word	0x20000500

080071f0 <__malloc_lock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	; (80071f8 <__malloc_lock+0x8>)
 80071f2:	f7ff b913 	b.w	800641c <__retarget_lock_acquire_recursive>
 80071f6:	bf00      	nop
 80071f8:	200004fc 	.word	0x200004fc

080071fc <__malloc_unlock>:
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <__malloc_unlock+0x8>)
 80071fe:	f7ff b90e 	b.w	800641e <__retarget_lock_release_recursive>
 8007202:	bf00      	nop
 8007204:	200004fc 	.word	0x200004fc

08007208 <_Balloc>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	69c6      	ldr	r6, [r0, #28]
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	b976      	cbnz	r6, 8007230 <_Balloc+0x28>
 8007212:	2010      	movs	r0, #16
 8007214:	f7ff ff44 	bl	80070a0 <malloc>
 8007218:	4602      	mov	r2, r0
 800721a:	61e0      	str	r0, [r4, #28]
 800721c:	b920      	cbnz	r0, 8007228 <_Balloc+0x20>
 800721e:	4b18      	ldr	r3, [pc, #96]	; (8007280 <_Balloc+0x78>)
 8007220:	4818      	ldr	r0, [pc, #96]	; (8007284 <_Balloc+0x7c>)
 8007222:	216b      	movs	r1, #107	; 0x6b
 8007224:	f000 fc38 	bl	8007a98 <__assert_func>
 8007228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800722c:	6006      	str	r6, [r0, #0]
 800722e:	60c6      	str	r6, [r0, #12]
 8007230:	69e6      	ldr	r6, [r4, #28]
 8007232:	68f3      	ldr	r3, [r6, #12]
 8007234:	b183      	cbz	r3, 8007258 <_Balloc+0x50>
 8007236:	69e3      	ldr	r3, [r4, #28]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800723e:	b9b8      	cbnz	r0, 8007270 <_Balloc+0x68>
 8007240:	2101      	movs	r1, #1
 8007242:	fa01 f605 	lsl.w	r6, r1, r5
 8007246:	1d72      	adds	r2, r6, #5
 8007248:	0092      	lsls	r2, r2, #2
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fc42 	bl	8007ad4 <_calloc_r>
 8007250:	b160      	cbz	r0, 800726c <_Balloc+0x64>
 8007252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007256:	e00e      	b.n	8007276 <_Balloc+0x6e>
 8007258:	2221      	movs	r2, #33	; 0x21
 800725a:	2104      	movs	r1, #4
 800725c:	4620      	mov	r0, r4
 800725e:	f000 fc39 	bl	8007ad4 <_calloc_r>
 8007262:	69e3      	ldr	r3, [r4, #28]
 8007264:	60f0      	str	r0, [r6, #12]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e4      	bne.n	8007236 <_Balloc+0x2e>
 800726c:	2000      	movs	r0, #0
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	6802      	ldr	r2, [r0, #0]
 8007272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007276:	2300      	movs	r3, #0
 8007278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800727c:	e7f7      	b.n	800726e <_Balloc+0x66>
 800727e:	bf00      	nop
 8007280:	0800845d 	.word	0x0800845d
 8007284:	080084dd 	.word	0x080084dd

08007288 <_Bfree>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	69c6      	ldr	r6, [r0, #28]
 800728c:	4605      	mov	r5, r0
 800728e:	460c      	mov	r4, r1
 8007290:	b976      	cbnz	r6, 80072b0 <_Bfree+0x28>
 8007292:	2010      	movs	r0, #16
 8007294:	f7ff ff04 	bl	80070a0 <malloc>
 8007298:	4602      	mov	r2, r0
 800729a:	61e8      	str	r0, [r5, #28]
 800729c:	b920      	cbnz	r0, 80072a8 <_Bfree+0x20>
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <_Bfree+0x3c>)
 80072a0:	4809      	ldr	r0, [pc, #36]	; (80072c8 <_Bfree+0x40>)
 80072a2:	218f      	movs	r1, #143	; 0x8f
 80072a4:	f000 fbf8 	bl	8007a98 <__assert_func>
 80072a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072ac:	6006      	str	r6, [r0, #0]
 80072ae:	60c6      	str	r6, [r0, #12]
 80072b0:	b13c      	cbz	r4, 80072c2 <_Bfree+0x3a>
 80072b2:	69eb      	ldr	r3, [r5, #28]
 80072b4:	6862      	ldr	r2, [r4, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072bc:	6021      	str	r1, [r4, #0]
 80072be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	0800845d 	.word	0x0800845d
 80072c8:	080084dd 	.word	0x080084dd

080072cc <__multadd>:
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	690d      	ldr	r5, [r1, #16]
 80072d2:	4607      	mov	r7, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	461e      	mov	r6, r3
 80072d8:	f101 0c14 	add.w	ip, r1, #20
 80072dc:	2000      	movs	r0, #0
 80072de:	f8dc 3000 	ldr.w	r3, [ip]
 80072e2:	b299      	uxth	r1, r3
 80072e4:	fb02 6101 	mla	r1, r2, r1, r6
 80072e8:	0c1e      	lsrs	r6, r3, #16
 80072ea:	0c0b      	lsrs	r3, r1, #16
 80072ec:	fb02 3306 	mla	r3, r2, r6, r3
 80072f0:	b289      	uxth	r1, r1
 80072f2:	3001      	adds	r0, #1
 80072f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072f8:	4285      	cmp	r5, r0
 80072fa:	f84c 1b04 	str.w	r1, [ip], #4
 80072fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007302:	dcec      	bgt.n	80072de <__multadd+0x12>
 8007304:	b30e      	cbz	r6, 800734a <__multadd+0x7e>
 8007306:	68a3      	ldr	r3, [r4, #8]
 8007308:	42ab      	cmp	r3, r5
 800730a:	dc19      	bgt.n	8007340 <__multadd+0x74>
 800730c:	6861      	ldr	r1, [r4, #4]
 800730e:	4638      	mov	r0, r7
 8007310:	3101      	adds	r1, #1
 8007312:	f7ff ff79 	bl	8007208 <_Balloc>
 8007316:	4680      	mov	r8, r0
 8007318:	b928      	cbnz	r0, 8007326 <__multadd+0x5a>
 800731a:	4602      	mov	r2, r0
 800731c:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <__multadd+0x84>)
 800731e:	480d      	ldr	r0, [pc, #52]	; (8007354 <__multadd+0x88>)
 8007320:	21ba      	movs	r1, #186	; 0xba
 8007322:	f000 fbb9 	bl	8007a98 <__assert_func>
 8007326:	6922      	ldr	r2, [r4, #16]
 8007328:	3202      	adds	r2, #2
 800732a:	f104 010c 	add.w	r1, r4, #12
 800732e:	0092      	lsls	r2, r2, #2
 8007330:	300c      	adds	r0, #12
 8007332:	f000 fba3 	bl	8007a7c <memcpy>
 8007336:	4621      	mov	r1, r4
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff ffa5 	bl	8007288 <_Bfree>
 800733e:	4644      	mov	r4, r8
 8007340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007344:	3501      	adds	r5, #1
 8007346:	615e      	str	r6, [r3, #20]
 8007348:	6125      	str	r5, [r4, #16]
 800734a:	4620      	mov	r0, r4
 800734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007350:	080084cc 	.word	0x080084cc
 8007354:	080084dd 	.word	0x080084dd

08007358 <__hi0bits>:
 8007358:	0c03      	lsrs	r3, r0, #16
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	b9d3      	cbnz	r3, 8007394 <__hi0bits+0x3c>
 800735e:	0400      	lsls	r0, r0, #16
 8007360:	2310      	movs	r3, #16
 8007362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007366:	bf04      	itt	eq
 8007368:	0200      	lsleq	r0, r0, #8
 800736a:	3308      	addeq	r3, #8
 800736c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007370:	bf04      	itt	eq
 8007372:	0100      	lsleq	r0, r0, #4
 8007374:	3304      	addeq	r3, #4
 8007376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800737a:	bf04      	itt	eq
 800737c:	0080      	lsleq	r0, r0, #2
 800737e:	3302      	addeq	r3, #2
 8007380:	2800      	cmp	r0, #0
 8007382:	db05      	blt.n	8007390 <__hi0bits+0x38>
 8007384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007388:	f103 0301 	add.w	r3, r3, #1
 800738c:	bf08      	it	eq
 800738e:	2320      	moveq	r3, #32
 8007390:	4618      	mov	r0, r3
 8007392:	4770      	bx	lr
 8007394:	2300      	movs	r3, #0
 8007396:	e7e4      	b.n	8007362 <__hi0bits+0xa>

08007398 <__lo0bits>:
 8007398:	6803      	ldr	r3, [r0, #0]
 800739a:	f013 0207 	ands.w	r2, r3, #7
 800739e:	d00c      	beq.n	80073ba <__lo0bits+0x22>
 80073a0:	07d9      	lsls	r1, r3, #31
 80073a2:	d422      	bmi.n	80073ea <__lo0bits+0x52>
 80073a4:	079a      	lsls	r2, r3, #30
 80073a6:	bf49      	itett	mi
 80073a8:	085b      	lsrmi	r3, r3, #1
 80073aa:	089b      	lsrpl	r3, r3, #2
 80073ac:	6003      	strmi	r3, [r0, #0]
 80073ae:	2201      	movmi	r2, #1
 80073b0:	bf5c      	itt	pl
 80073b2:	6003      	strpl	r3, [r0, #0]
 80073b4:	2202      	movpl	r2, #2
 80073b6:	4610      	mov	r0, r2
 80073b8:	4770      	bx	lr
 80073ba:	b299      	uxth	r1, r3
 80073bc:	b909      	cbnz	r1, 80073c2 <__lo0bits+0x2a>
 80073be:	0c1b      	lsrs	r3, r3, #16
 80073c0:	2210      	movs	r2, #16
 80073c2:	b2d9      	uxtb	r1, r3
 80073c4:	b909      	cbnz	r1, 80073ca <__lo0bits+0x32>
 80073c6:	3208      	adds	r2, #8
 80073c8:	0a1b      	lsrs	r3, r3, #8
 80073ca:	0719      	lsls	r1, r3, #28
 80073cc:	bf04      	itt	eq
 80073ce:	091b      	lsreq	r3, r3, #4
 80073d0:	3204      	addeq	r2, #4
 80073d2:	0799      	lsls	r1, r3, #30
 80073d4:	bf04      	itt	eq
 80073d6:	089b      	lsreq	r3, r3, #2
 80073d8:	3202      	addeq	r2, #2
 80073da:	07d9      	lsls	r1, r3, #31
 80073dc:	d403      	bmi.n	80073e6 <__lo0bits+0x4e>
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	f102 0201 	add.w	r2, r2, #1
 80073e4:	d003      	beq.n	80073ee <__lo0bits+0x56>
 80073e6:	6003      	str	r3, [r0, #0]
 80073e8:	e7e5      	b.n	80073b6 <__lo0bits+0x1e>
 80073ea:	2200      	movs	r2, #0
 80073ec:	e7e3      	b.n	80073b6 <__lo0bits+0x1e>
 80073ee:	2220      	movs	r2, #32
 80073f0:	e7e1      	b.n	80073b6 <__lo0bits+0x1e>
	...

080073f4 <__i2b>:
 80073f4:	b510      	push	{r4, lr}
 80073f6:	460c      	mov	r4, r1
 80073f8:	2101      	movs	r1, #1
 80073fa:	f7ff ff05 	bl	8007208 <_Balloc>
 80073fe:	4602      	mov	r2, r0
 8007400:	b928      	cbnz	r0, 800740e <__i2b+0x1a>
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <__i2b+0x24>)
 8007404:	4805      	ldr	r0, [pc, #20]	; (800741c <__i2b+0x28>)
 8007406:	f240 1145 	movw	r1, #325	; 0x145
 800740a:	f000 fb45 	bl	8007a98 <__assert_func>
 800740e:	2301      	movs	r3, #1
 8007410:	6144      	str	r4, [r0, #20]
 8007412:	6103      	str	r3, [r0, #16]
 8007414:	bd10      	pop	{r4, pc}
 8007416:	bf00      	nop
 8007418:	080084cc 	.word	0x080084cc
 800741c:	080084dd 	.word	0x080084dd

08007420 <__multiply>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	4691      	mov	r9, r2
 8007426:	690a      	ldr	r2, [r1, #16]
 8007428:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800742c:	429a      	cmp	r2, r3
 800742e:	bfb8      	it	lt
 8007430:	460b      	movlt	r3, r1
 8007432:	460c      	mov	r4, r1
 8007434:	bfbc      	itt	lt
 8007436:	464c      	movlt	r4, r9
 8007438:	4699      	movlt	r9, r3
 800743a:	6927      	ldr	r7, [r4, #16]
 800743c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007440:	68a3      	ldr	r3, [r4, #8]
 8007442:	6861      	ldr	r1, [r4, #4]
 8007444:	eb07 060a 	add.w	r6, r7, sl
 8007448:	42b3      	cmp	r3, r6
 800744a:	b085      	sub	sp, #20
 800744c:	bfb8      	it	lt
 800744e:	3101      	addlt	r1, #1
 8007450:	f7ff feda 	bl	8007208 <_Balloc>
 8007454:	b930      	cbnz	r0, 8007464 <__multiply+0x44>
 8007456:	4602      	mov	r2, r0
 8007458:	4b44      	ldr	r3, [pc, #272]	; (800756c <__multiply+0x14c>)
 800745a:	4845      	ldr	r0, [pc, #276]	; (8007570 <__multiply+0x150>)
 800745c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007460:	f000 fb1a 	bl	8007a98 <__assert_func>
 8007464:	f100 0514 	add.w	r5, r0, #20
 8007468:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800746c:	462b      	mov	r3, r5
 800746e:	2200      	movs	r2, #0
 8007470:	4543      	cmp	r3, r8
 8007472:	d321      	bcc.n	80074b8 <__multiply+0x98>
 8007474:	f104 0314 	add.w	r3, r4, #20
 8007478:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800747c:	f109 0314 	add.w	r3, r9, #20
 8007480:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007484:	9202      	str	r2, [sp, #8]
 8007486:	1b3a      	subs	r2, r7, r4
 8007488:	3a15      	subs	r2, #21
 800748a:	f022 0203 	bic.w	r2, r2, #3
 800748e:	3204      	adds	r2, #4
 8007490:	f104 0115 	add.w	r1, r4, #21
 8007494:	428f      	cmp	r7, r1
 8007496:	bf38      	it	cc
 8007498:	2204      	movcc	r2, #4
 800749a:	9201      	str	r2, [sp, #4]
 800749c:	9a02      	ldr	r2, [sp, #8]
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d80c      	bhi.n	80074be <__multiply+0x9e>
 80074a4:	2e00      	cmp	r6, #0
 80074a6:	dd03      	ble.n	80074b0 <__multiply+0x90>
 80074a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d05b      	beq.n	8007568 <__multiply+0x148>
 80074b0:	6106      	str	r6, [r0, #16]
 80074b2:	b005      	add	sp, #20
 80074b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b8:	f843 2b04 	str.w	r2, [r3], #4
 80074bc:	e7d8      	b.n	8007470 <__multiply+0x50>
 80074be:	f8b3 a000 	ldrh.w	sl, [r3]
 80074c2:	f1ba 0f00 	cmp.w	sl, #0
 80074c6:	d024      	beq.n	8007512 <__multiply+0xf2>
 80074c8:	f104 0e14 	add.w	lr, r4, #20
 80074cc:	46a9      	mov	r9, r5
 80074ce:	f04f 0c00 	mov.w	ip, #0
 80074d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074d6:	f8d9 1000 	ldr.w	r1, [r9]
 80074da:	fa1f fb82 	uxth.w	fp, r2
 80074de:	b289      	uxth	r1, r1
 80074e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80074e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074e8:	f8d9 2000 	ldr.w	r2, [r9]
 80074ec:	4461      	add	r1, ip
 80074ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80074f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074fa:	b289      	uxth	r1, r1
 80074fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007500:	4577      	cmp	r7, lr
 8007502:	f849 1b04 	str.w	r1, [r9], #4
 8007506:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800750a:	d8e2      	bhi.n	80074d2 <__multiply+0xb2>
 800750c:	9a01      	ldr	r2, [sp, #4]
 800750e:	f845 c002 	str.w	ip, [r5, r2]
 8007512:	9a03      	ldr	r2, [sp, #12]
 8007514:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007518:	3304      	adds	r3, #4
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	d021      	beq.n	8007564 <__multiply+0x144>
 8007520:	6829      	ldr	r1, [r5, #0]
 8007522:	f104 0c14 	add.w	ip, r4, #20
 8007526:	46ae      	mov	lr, r5
 8007528:	f04f 0a00 	mov.w	sl, #0
 800752c:	f8bc b000 	ldrh.w	fp, [ip]
 8007530:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007534:	fb09 220b 	mla	r2, r9, fp, r2
 8007538:	4452      	add	r2, sl
 800753a:	b289      	uxth	r1, r1
 800753c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007540:	f84e 1b04 	str.w	r1, [lr], #4
 8007544:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007548:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800754c:	f8be 1000 	ldrh.w	r1, [lr]
 8007550:	fb09 110a 	mla	r1, r9, sl, r1
 8007554:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007558:	4567      	cmp	r7, ip
 800755a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800755e:	d8e5      	bhi.n	800752c <__multiply+0x10c>
 8007560:	9a01      	ldr	r2, [sp, #4]
 8007562:	50a9      	str	r1, [r5, r2]
 8007564:	3504      	adds	r5, #4
 8007566:	e799      	b.n	800749c <__multiply+0x7c>
 8007568:	3e01      	subs	r6, #1
 800756a:	e79b      	b.n	80074a4 <__multiply+0x84>
 800756c:	080084cc 	.word	0x080084cc
 8007570:	080084dd 	.word	0x080084dd

08007574 <__pow5mult>:
 8007574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007578:	4615      	mov	r5, r2
 800757a:	f012 0203 	ands.w	r2, r2, #3
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	d007      	beq.n	8007594 <__pow5mult+0x20>
 8007584:	4c25      	ldr	r4, [pc, #148]	; (800761c <__pow5mult+0xa8>)
 8007586:	3a01      	subs	r2, #1
 8007588:	2300      	movs	r3, #0
 800758a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800758e:	f7ff fe9d 	bl	80072cc <__multadd>
 8007592:	4607      	mov	r7, r0
 8007594:	10ad      	asrs	r5, r5, #2
 8007596:	d03d      	beq.n	8007614 <__pow5mult+0xa0>
 8007598:	69f4      	ldr	r4, [r6, #28]
 800759a:	b97c      	cbnz	r4, 80075bc <__pow5mult+0x48>
 800759c:	2010      	movs	r0, #16
 800759e:	f7ff fd7f 	bl	80070a0 <malloc>
 80075a2:	4602      	mov	r2, r0
 80075a4:	61f0      	str	r0, [r6, #28]
 80075a6:	b928      	cbnz	r0, 80075b4 <__pow5mult+0x40>
 80075a8:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <__pow5mult+0xac>)
 80075aa:	481e      	ldr	r0, [pc, #120]	; (8007624 <__pow5mult+0xb0>)
 80075ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80075b0:	f000 fa72 	bl	8007a98 <__assert_func>
 80075b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075b8:	6004      	str	r4, [r0, #0]
 80075ba:	60c4      	str	r4, [r0, #12]
 80075bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80075c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075c4:	b94c      	cbnz	r4, 80075da <__pow5mult+0x66>
 80075c6:	f240 2171 	movw	r1, #625	; 0x271
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ff12 	bl	80073f4 <__i2b>
 80075d0:	2300      	movs	r3, #0
 80075d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80075d6:	4604      	mov	r4, r0
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	f04f 0900 	mov.w	r9, #0
 80075de:	07eb      	lsls	r3, r5, #31
 80075e0:	d50a      	bpl.n	80075f8 <__pow5mult+0x84>
 80075e2:	4639      	mov	r1, r7
 80075e4:	4622      	mov	r2, r4
 80075e6:	4630      	mov	r0, r6
 80075e8:	f7ff ff1a 	bl	8007420 <__multiply>
 80075ec:	4639      	mov	r1, r7
 80075ee:	4680      	mov	r8, r0
 80075f0:	4630      	mov	r0, r6
 80075f2:	f7ff fe49 	bl	8007288 <_Bfree>
 80075f6:	4647      	mov	r7, r8
 80075f8:	106d      	asrs	r5, r5, #1
 80075fa:	d00b      	beq.n	8007614 <__pow5mult+0xa0>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	b938      	cbnz	r0, 8007610 <__pow5mult+0x9c>
 8007600:	4622      	mov	r2, r4
 8007602:	4621      	mov	r1, r4
 8007604:	4630      	mov	r0, r6
 8007606:	f7ff ff0b 	bl	8007420 <__multiply>
 800760a:	6020      	str	r0, [r4, #0]
 800760c:	f8c0 9000 	str.w	r9, [r0]
 8007610:	4604      	mov	r4, r0
 8007612:	e7e4      	b.n	80075de <__pow5mult+0x6a>
 8007614:	4638      	mov	r0, r7
 8007616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761a:	bf00      	nop
 800761c:	08008628 	.word	0x08008628
 8007620:	0800845d 	.word	0x0800845d
 8007624:	080084dd 	.word	0x080084dd

08007628 <__lshift>:
 8007628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	460c      	mov	r4, r1
 800762e:	6849      	ldr	r1, [r1, #4]
 8007630:	6923      	ldr	r3, [r4, #16]
 8007632:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007636:	68a3      	ldr	r3, [r4, #8]
 8007638:	4607      	mov	r7, r0
 800763a:	4691      	mov	r9, r2
 800763c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007640:	f108 0601 	add.w	r6, r8, #1
 8007644:	42b3      	cmp	r3, r6
 8007646:	db0b      	blt.n	8007660 <__lshift+0x38>
 8007648:	4638      	mov	r0, r7
 800764a:	f7ff fddd 	bl	8007208 <_Balloc>
 800764e:	4605      	mov	r5, r0
 8007650:	b948      	cbnz	r0, 8007666 <__lshift+0x3e>
 8007652:	4602      	mov	r2, r0
 8007654:	4b28      	ldr	r3, [pc, #160]	; (80076f8 <__lshift+0xd0>)
 8007656:	4829      	ldr	r0, [pc, #164]	; (80076fc <__lshift+0xd4>)
 8007658:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800765c:	f000 fa1c 	bl	8007a98 <__assert_func>
 8007660:	3101      	adds	r1, #1
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	e7ee      	b.n	8007644 <__lshift+0x1c>
 8007666:	2300      	movs	r3, #0
 8007668:	f100 0114 	add.w	r1, r0, #20
 800766c:	f100 0210 	add.w	r2, r0, #16
 8007670:	4618      	mov	r0, r3
 8007672:	4553      	cmp	r3, sl
 8007674:	db33      	blt.n	80076de <__lshift+0xb6>
 8007676:	6920      	ldr	r0, [r4, #16]
 8007678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800767c:	f104 0314 	add.w	r3, r4, #20
 8007680:	f019 091f 	ands.w	r9, r9, #31
 8007684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007688:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800768c:	d02b      	beq.n	80076e6 <__lshift+0xbe>
 800768e:	f1c9 0e20 	rsb	lr, r9, #32
 8007692:	468a      	mov	sl, r1
 8007694:	2200      	movs	r2, #0
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	fa00 f009 	lsl.w	r0, r0, r9
 800769c:	4310      	orrs	r0, r2
 800769e:	f84a 0b04 	str.w	r0, [sl], #4
 80076a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a6:	459c      	cmp	ip, r3
 80076a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80076ac:	d8f3      	bhi.n	8007696 <__lshift+0x6e>
 80076ae:	ebac 0304 	sub.w	r3, ip, r4
 80076b2:	3b15      	subs	r3, #21
 80076b4:	f023 0303 	bic.w	r3, r3, #3
 80076b8:	3304      	adds	r3, #4
 80076ba:	f104 0015 	add.w	r0, r4, #21
 80076be:	4584      	cmp	ip, r0
 80076c0:	bf38      	it	cc
 80076c2:	2304      	movcc	r3, #4
 80076c4:	50ca      	str	r2, [r1, r3]
 80076c6:	b10a      	cbz	r2, 80076cc <__lshift+0xa4>
 80076c8:	f108 0602 	add.w	r6, r8, #2
 80076cc:	3e01      	subs	r6, #1
 80076ce:	4638      	mov	r0, r7
 80076d0:	612e      	str	r6, [r5, #16]
 80076d2:	4621      	mov	r1, r4
 80076d4:	f7ff fdd8 	bl	8007288 <_Bfree>
 80076d8:	4628      	mov	r0, r5
 80076da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076de:	f842 0f04 	str.w	r0, [r2, #4]!
 80076e2:	3301      	adds	r3, #1
 80076e4:	e7c5      	b.n	8007672 <__lshift+0x4a>
 80076e6:	3904      	subs	r1, #4
 80076e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80076f0:	459c      	cmp	ip, r3
 80076f2:	d8f9      	bhi.n	80076e8 <__lshift+0xc0>
 80076f4:	e7ea      	b.n	80076cc <__lshift+0xa4>
 80076f6:	bf00      	nop
 80076f8:	080084cc 	.word	0x080084cc
 80076fc:	080084dd 	.word	0x080084dd

08007700 <__mcmp>:
 8007700:	b530      	push	{r4, r5, lr}
 8007702:	6902      	ldr	r2, [r0, #16]
 8007704:	690c      	ldr	r4, [r1, #16]
 8007706:	1b12      	subs	r2, r2, r4
 8007708:	d10e      	bne.n	8007728 <__mcmp+0x28>
 800770a:	f100 0314 	add.w	r3, r0, #20
 800770e:	3114      	adds	r1, #20
 8007710:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007714:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007718:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800771c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007720:	42a5      	cmp	r5, r4
 8007722:	d003      	beq.n	800772c <__mcmp+0x2c>
 8007724:	d305      	bcc.n	8007732 <__mcmp+0x32>
 8007726:	2201      	movs	r2, #1
 8007728:	4610      	mov	r0, r2
 800772a:	bd30      	pop	{r4, r5, pc}
 800772c:	4283      	cmp	r3, r0
 800772e:	d3f3      	bcc.n	8007718 <__mcmp+0x18>
 8007730:	e7fa      	b.n	8007728 <__mcmp+0x28>
 8007732:	f04f 32ff 	mov.w	r2, #4294967295
 8007736:	e7f7      	b.n	8007728 <__mcmp+0x28>

08007738 <__mdiff>:
 8007738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	460c      	mov	r4, r1
 800773e:	4606      	mov	r6, r0
 8007740:	4611      	mov	r1, r2
 8007742:	4620      	mov	r0, r4
 8007744:	4690      	mov	r8, r2
 8007746:	f7ff ffdb 	bl	8007700 <__mcmp>
 800774a:	1e05      	subs	r5, r0, #0
 800774c:	d110      	bne.n	8007770 <__mdiff+0x38>
 800774e:	4629      	mov	r1, r5
 8007750:	4630      	mov	r0, r6
 8007752:	f7ff fd59 	bl	8007208 <_Balloc>
 8007756:	b930      	cbnz	r0, 8007766 <__mdiff+0x2e>
 8007758:	4b3a      	ldr	r3, [pc, #232]	; (8007844 <__mdiff+0x10c>)
 800775a:	4602      	mov	r2, r0
 800775c:	f240 2137 	movw	r1, #567	; 0x237
 8007760:	4839      	ldr	r0, [pc, #228]	; (8007848 <__mdiff+0x110>)
 8007762:	f000 f999 	bl	8007a98 <__assert_func>
 8007766:	2301      	movs	r3, #1
 8007768:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800776c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007770:	bfa4      	itt	ge
 8007772:	4643      	movge	r3, r8
 8007774:	46a0      	movge	r8, r4
 8007776:	4630      	mov	r0, r6
 8007778:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800777c:	bfa6      	itte	ge
 800777e:	461c      	movge	r4, r3
 8007780:	2500      	movge	r5, #0
 8007782:	2501      	movlt	r5, #1
 8007784:	f7ff fd40 	bl	8007208 <_Balloc>
 8007788:	b920      	cbnz	r0, 8007794 <__mdiff+0x5c>
 800778a:	4b2e      	ldr	r3, [pc, #184]	; (8007844 <__mdiff+0x10c>)
 800778c:	4602      	mov	r2, r0
 800778e:	f240 2145 	movw	r1, #581	; 0x245
 8007792:	e7e5      	b.n	8007760 <__mdiff+0x28>
 8007794:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007798:	6926      	ldr	r6, [r4, #16]
 800779a:	60c5      	str	r5, [r0, #12]
 800779c:	f104 0914 	add.w	r9, r4, #20
 80077a0:	f108 0514 	add.w	r5, r8, #20
 80077a4:	f100 0e14 	add.w	lr, r0, #20
 80077a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80077ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077b0:	f108 0210 	add.w	r2, r8, #16
 80077b4:	46f2      	mov	sl, lr
 80077b6:	2100      	movs	r1, #0
 80077b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80077bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077c0:	fa11 f88b 	uxtah	r8, r1, fp
 80077c4:	b299      	uxth	r1, r3
 80077c6:	0c1b      	lsrs	r3, r3, #16
 80077c8:	eba8 0801 	sub.w	r8, r8, r1
 80077cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077d4:	fa1f f888 	uxth.w	r8, r8
 80077d8:	1419      	asrs	r1, r3, #16
 80077da:	454e      	cmp	r6, r9
 80077dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077e0:	f84a 3b04 	str.w	r3, [sl], #4
 80077e4:	d8e8      	bhi.n	80077b8 <__mdiff+0x80>
 80077e6:	1b33      	subs	r3, r6, r4
 80077e8:	3b15      	subs	r3, #21
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	3304      	adds	r3, #4
 80077f0:	3415      	adds	r4, #21
 80077f2:	42a6      	cmp	r6, r4
 80077f4:	bf38      	it	cc
 80077f6:	2304      	movcc	r3, #4
 80077f8:	441d      	add	r5, r3
 80077fa:	4473      	add	r3, lr
 80077fc:	469e      	mov	lr, r3
 80077fe:	462e      	mov	r6, r5
 8007800:	4566      	cmp	r6, ip
 8007802:	d30e      	bcc.n	8007822 <__mdiff+0xea>
 8007804:	f10c 0203 	add.w	r2, ip, #3
 8007808:	1b52      	subs	r2, r2, r5
 800780a:	f022 0203 	bic.w	r2, r2, #3
 800780e:	3d03      	subs	r5, #3
 8007810:	45ac      	cmp	ip, r5
 8007812:	bf38      	it	cc
 8007814:	2200      	movcc	r2, #0
 8007816:	4413      	add	r3, r2
 8007818:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800781c:	b17a      	cbz	r2, 800783e <__mdiff+0x106>
 800781e:	6107      	str	r7, [r0, #16]
 8007820:	e7a4      	b.n	800776c <__mdiff+0x34>
 8007822:	f856 8b04 	ldr.w	r8, [r6], #4
 8007826:	fa11 f288 	uxtah	r2, r1, r8
 800782a:	1414      	asrs	r4, r2, #16
 800782c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007830:	b292      	uxth	r2, r2
 8007832:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007836:	f84e 2b04 	str.w	r2, [lr], #4
 800783a:	1421      	asrs	r1, r4, #16
 800783c:	e7e0      	b.n	8007800 <__mdiff+0xc8>
 800783e:	3f01      	subs	r7, #1
 8007840:	e7ea      	b.n	8007818 <__mdiff+0xe0>
 8007842:	bf00      	nop
 8007844:	080084cc 	.word	0x080084cc
 8007848:	080084dd 	.word	0x080084dd

0800784c <__d2b>:
 800784c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007850:	460f      	mov	r7, r1
 8007852:	2101      	movs	r1, #1
 8007854:	ec59 8b10 	vmov	r8, r9, d0
 8007858:	4616      	mov	r6, r2
 800785a:	f7ff fcd5 	bl	8007208 <_Balloc>
 800785e:	4604      	mov	r4, r0
 8007860:	b930      	cbnz	r0, 8007870 <__d2b+0x24>
 8007862:	4602      	mov	r2, r0
 8007864:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <__d2b+0xac>)
 8007866:	4825      	ldr	r0, [pc, #148]	; (80078fc <__d2b+0xb0>)
 8007868:	f240 310f 	movw	r1, #783	; 0x30f
 800786c:	f000 f914 	bl	8007a98 <__assert_func>
 8007870:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007878:	bb2d      	cbnz	r5, 80078c6 <__d2b+0x7a>
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	f1b8 0300 	subs.w	r3, r8, #0
 8007880:	d026      	beq.n	80078d0 <__d2b+0x84>
 8007882:	4668      	mov	r0, sp
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	f7ff fd87 	bl	8007398 <__lo0bits>
 800788a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800788e:	b1e8      	cbz	r0, 80078cc <__d2b+0x80>
 8007890:	f1c0 0320 	rsb	r3, r0, #32
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	430b      	orrs	r3, r1
 800789a:	40c2      	lsrs	r2, r0
 800789c:	6163      	str	r3, [r4, #20]
 800789e:	9201      	str	r2, [sp, #4]
 80078a0:	9b01      	ldr	r3, [sp, #4]
 80078a2:	61a3      	str	r3, [r4, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bf14      	ite	ne
 80078a8:	2202      	movne	r2, #2
 80078aa:	2201      	moveq	r2, #1
 80078ac:	6122      	str	r2, [r4, #16]
 80078ae:	b1bd      	cbz	r5, 80078e0 <__d2b+0x94>
 80078b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078b4:	4405      	add	r5, r0
 80078b6:	603d      	str	r5, [r7, #0]
 80078b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078bc:	6030      	str	r0, [r6, #0]
 80078be:	4620      	mov	r0, r4
 80078c0:	b003      	add	sp, #12
 80078c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ca:	e7d6      	b.n	800787a <__d2b+0x2e>
 80078cc:	6161      	str	r1, [r4, #20]
 80078ce:	e7e7      	b.n	80078a0 <__d2b+0x54>
 80078d0:	a801      	add	r0, sp, #4
 80078d2:	f7ff fd61 	bl	8007398 <__lo0bits>
 80078d6:	9b01      	ldr	r3, [sp, #4]
 80078d8:	6163      	str	r3, [r4, #20]
 80078da:	3020      	adds	r0, #32
 80078dc:	2201      	movs	r2, #1
 80078de:	e7e5      	b.n	80078ac <__d2b+0x60>
 80078e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078e8:	6038      	str	r0, [r7, #0]
 80078ea:	6918      	ldr	r0, [r3, #16]
 80078ec:	f7ff fd34 	bl	8007358 <__hi0bits>
 80078f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078f4:	e7e2      	b.n	80078bc <__d2b+0x70>
 80078f6:	bf00      	nop
 80078f8:	080084cc 	.word	0x080084cc
 80078fc:	080084dd 	.word	0x080084dd

08007900 <__sflush_r>:
 8007900:	898a      	ldrh	r2, [r1, #12]
 8007902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007906:	4605      	mov	r5, r0
 8007908:	0710      	lsls	r0, r2, #28
 800790a:	460c      	mov	r4, r1
 800790c:	d458      	bmi.n	80079c0 <__sflush_r+0xc0>
 800790e:	684b      	ldr	r3, [r1, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	dc05      	bgt.n	8007920 <__sflush_r+0x20>
 8007914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	dc02      	bgt.n	8007920 <__sflush_r+0x20>
 800791a:	2000      	movs	r0, #0
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007922:	2e00      	cmp	r6, #0
 8007924:	d0f9      	beq.n	800791a <__sflush_r+0x1a>
 8007926:	2300      	movs	r3, #0
 8007928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800792c:	682f      	ldr	r7, [r5, #0]
 800792e:	6a21      	ldr	r1, [r4, #32]
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	d032      	beq.n	800799a <__sflush_r+0x9a>
 8007934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	075a      	lsls	r2, r3, #29
 800793a:	d505      	bpl.n	8007948 <__sflush_r+0x48>
 800793c:	6863      	ldr	r3, [r4, #4]
 800793e:	1ac0      	subs	r0, r0, r3
 8007940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007942:	b10b      	cbz	r3, 8007948 <__sflush_r+0x48>
 8007944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007946:	1ac0      	subs	r0, r0, r3
 8007948:	2300      	movs	r3, #0
 800794a:	4602      	mov	r2, r0
 800794c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800794e:	6a21      	ldr	r1, [r4, #32]
 8007950:	4628      	mov	r0, r5
 8007952:	47b0      	blx	r6
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	d106      	bne.n	8007968 <__sflush_r+0x68>
 800795a:	6829      	ldr	r1, [r5, #0]
 800795c:	291d      	cmp	r1, #29
 800795e:	d82b      	bhi.n	80079b8 <__sflush_r+0xb8>
 8007960:	4a29      	ldr	r2, [pc, #164]	; (8007a08 <__sflush_r+0x108>)
 8007962:	410a      	asrs	r2, r1
 8007964:	07d6      	lsls	r6, r2, #31
 8007966:	d427      	bmi.n	80079b8 <__sflush_r+0xb8>
 8007968:	2200      	movs	r2, #0
 800796a:	6062      	str	r2, [r4, #4]
 800796c:	04d9      	lsls	r1, r3, #19
 800796e:	6922      	ldr	r2, [r4, #16]
 8007970:	6022      	str	r2, [r4, #0]
 8007972:	d504      	bpl.n	800797e <__sflush_r+0x7e>
 8007974:	1c42      	adds	r2, r0, #1
 8007976:	d101      	bne.n	800797c <__sflush_r+0x7c>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b903      	cbnz	r3, 800797e <__sflush_r+0x7e>
 800797c:	6560      	str	r0, [r4, #84]	; 0x54
 800797e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007980:	602f      	str	r7, [r5, #0]
 8007982:	2900      	cmp	r1, #0
 8007984:	d0c9      	beq.n	800791a <__sflush_r+0x1a>
 8007986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800798a:	4299      	cmp	r1, r3
 800798c:	d002      	beq.n	8007994 <__sflush_r+0x94>
 800798e:	4628      	mov	r0, r5
 8007990:	f7ff fb3a 	bl	8007008 <_free_r>
 8007994:	2000      	movs	r0, #0
 8007996:	6360      	str	r0, [r4, #52]	; 0x34
 8007998:	e7c0      	b.n	800791c <__sflush_r+0x1c>
 800799a:	2301      	movs	r3, #1
 800799c:	4628      	mov	r0, r5
 800799e:	47b0      	blx	r6
 80079a0:	1c41      	adds	r1, r0, #1
 80079a2:	d1c8      	bne.n	8007936 <__sflush_r+0x36>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0c5      	beq.n	8007936 <__sflush_r+0x36>
 80079aa:	2b1d      	cmp	r3, #29
 80079ac:	d001      	beq.n	80079b2 <__sflush_r+0xb2>
 80079ae:	2b16      	cmp	r3, #22
 80079b0:	d101      	bne.n	80079b6 <__sflush_r+0xb6>
 80079b2:	602f      	str	r7, [r5, #0]
 80079b4:	e7b1      	b.n	800791a <__sflush_r+0x1a>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	e7ad      	b.n	800791c <__sflush_r+0x1c>
 80079c0:	690f      	ldr	r7, [r1, #16]
 80079c2:	2f00      	cmp	r7, #0
 80079c4:	d0a9      	beq.n	800791a <__sflush_r+0x1a>
 80079c6:	0793      	lsls	r3, r2, #30
 80079c8:	680e      	ldr	r6, [r1, #0]
 80079ca:	bf08      	it	eq
 80079cc:	694b      	ldreq	r3, [r1, #20]
 80079ce:	600f      	str	r7, [r1, #0]
 80079d0:	bf18      	it	ne
 80079d2:	2300      	movne	r3, #0
 80079d4:	eba6 0807 	sub.w	r8, r6, r7
 80079d8:	608b      	str	r3, [r1, #8]
 80079da:	f1b8 0f00 	cmp.w	r8, #0
 80079de:	dd9c      	ble.n	800791a <__sflush_r+0x1a>
 80079e0:	6a21      	ldr	r1, [r4, #32]
 80079e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079e4:	4643      	mov	r3, r8
 80079e6:	463a      	mov	r2, r7
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b0      	blx	r6
 80079ec:	2800      	cmp	r0, #0
 80079ee:	dc06      	bgt.n	80079fe <__sflush_r+0xfe>
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f6:	81a3      	strh	r3, [r4, #12]
 80079f8:	f04f 30ff 	mov.w	r0, #4294967295
 80079fc:	e78e      	b.n	800791c <__sflush_r+0x1c>
 80079fe:	4407      	add	r7, r0
 8007a00:	eba8 0800 	sub.w	r8, r8, r0
 8007a04:	e7e9      	b.n	80079da <__sflush_r+0xda>
 8007a06:	bf00      	nop
 8007a08:	dfbffffe 	.word	0xdfbffffe

08007a0c <_fflush_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	690b      	ldr	r3, [r1, #16]
 8007a10:	4605      	mov	r5, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	b913      	cbnz	r3, 8007a1c <_fflush_r+0x10>
 8007a16:	2500      	movs	r5, #0
 8007a18:	4628      	mov	r0, r5
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	b118      	cbz	r0, 8007a26 <_fflush_r+0x1a>
 8007a1e:	6a03      	ldr	r3, [r0, #32]
 8007a20:	b90b      	cbnz	r3, 8007a26 <_fflush_r+0x1a>
 8007a22:	f7fe fc05 	bl	8006230 <__sinit>
 8007a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0f3      	beq.n	8007a16 <_fflush_r+0xa>
 8007a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a30:	07d0      	lsls	r0, r2, #31
 8007a32:	d404      	bmi.n	8007a3e <_fflush_r+0x32>
 8007a34:	0599      	lsls	r1, r3, #22
 8007a36:	d402      	bmi.n	8007a3e <_fflush_r+0x32>
 8007a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a3a:	f7fe fcef 	bl	800641c <__retarget_lock_acquire_recursive>
 8007a3e:	4628      	mov	r0, r5
 8007a40:	4621      	mov	r1, r4
 8007a42:	f7ff ff5d 	bl	8007900 <__sflush_r>
 8007a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a48:	07da      	lsls	r2, r3, #31
 8007a4a:	4605      	mov	r5, r0
 8007a4c:	d4e4      	bmi.n	8007a18 <_fflush_r+0xc>
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	059b      	lsls	r3, r3, #22
 8007a52:	d4e1      	bmi.n	8007a18 <_fflush_r+0xc>
 8007a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a56:	f7fe fce2 	bl	800641e <__retarget_lock_release_recursive>
 8007a5a:	e7dd      	b.n	8007a18 <_fflush_r+0xc>

08007a5c <_sbrk_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d06      	ldr	r5, [pc, #24]	; (8007a78 <_sbrk_r+0x1c>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	f7f9 fbfa 	bl	8001260 <_sbrk>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_sbrk_r+0x1a>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_sbrk_r+0x1a>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	200004f8 	.word	0x200004f8

08007a7c <memcpy>:
 8007a7c:	440a      	add	r2, r1
 8007a7e:	4291      	cmp	r1, r2
 8007a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a84:	d100      	bne.n	8007a88 <memcpy+0xc>
 8007a86:	4770      	bx	lr
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a92:	4291      	cmp	r1, r2
 8007a94:	d1f9      	bne.n	8007a8a <memcpy+0xe>
 8007a96:	bd10      	pop	{r4, pc}

08007a98 <__assert_func>:
 8007a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a9a:	4614      	mov	r4, r2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <__assert_func+0x2c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	68d8      	ldr	r0, [r3, #12]
 8007aa6:	b14c      	cbz	r4, 8007abc <__assert_func+0x24>
 8007aa8:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <__assert_func+0x30>)
 8007aaa:	9100      	str	r1, [sp, #0]
 8007aac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ab0:	4906      	ldr	r1, [pc, #24]	; (8007acc <__assert_func+0x34>)
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	f000 f844 	bl	8007b40 <fiprintf>
 8007ab8:	f000 f854 	bl	8007b64 <abort>
 8007abc:	4b04      	ldr	r3, [pc, #16]	; (8007ad0 <__assert_func+0x38>)
 8007abe:	461c      	mov	r4, r3
 8007ac0:	e7f3      	b.n	8007aaa <__assert_func+0x12>
 8007ac2:	bf00      	nop
 8007ac4:	20000068 	.word	0x20000068
 8007ac8:	0800863e 	.word	0x0800863e
 8007acc:	0800864b 	.word	0x0800864b
 8007ad0:	08008679 	.word	0x08008679

08007ad4 <_calloc_r>:
 8007ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ad6:	fba1 2402 	umull	r2, r4, r1, r2
 8007ada:	b94c      	cbnz	r4, 8007af0 <_calloc_r+0x1c>
 8007adc:	4611      	mov	r1, r2
 8007ade:	9201      	str	r2, [sp, #4]
 8007ae0:	f7ff fb06 	bl	80070f0 <_malloc_r>
 8007ae4:	9a01      	ldr	r2, [sp, #4]
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	b930      	cbnz	r0, 8007af8 <_calloc_r+0x24>
 8007aea:	4628      	mov	r0, r5
 8007aec:	b003      	add	sp, #12
 8007aee:	bd30      	pop	{r4, r5, pc}
 8007af0:	220c      	movs	r2, #12
 8007af2:	6002      	str	r2, [r0, #0]
 8007af4:	2500      	movs	r5, #0
 8007af6:	e7f8      	b.n	8007aea <_calloc_r+0x16>
 8007af8:	4621      	mov	r1, r4
 8007afa:	f7fe fc12 	bl	8006322 <memset>
 8007afe:	e7f4      	b.n	8007aea <_calloc_r+0x16>

08007b00 <__ascii_mbtowc>:
 8007b00:	b082      	sub	sp, #8
 8007b02:	b901      	cbnz	r1, 8007b06 <__ascii_mbtowc+0x6>
 8007b04:	a901      	add	r1, sp, #4
 8007b06:	b142      	cbz	r2, 8007b1a <__ascii_mbtowc+0x1a>
 8007b08:	b14b      	cbz	r3, 8007b1e <__ascii_mbtowc+0x1e>
 8007b0a:	7813      	ldrb	r3, [r2, #0]
 8007b0c:	600b      	str	r3, [r1, #0]
 8007b0e:	7812      	ldrb	r2, [r2, #0]
 8007b10:	1e10      	subs	r0, r2, #0
 8007b12:	bf18      	it	ne
 8007b14:	2001      	movne	r0, #1
 8007b16:	b002      	add	sp, #8
 8007b18:	4770      	bx	lr
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	e7fb      	b.n	8007b16 <__ascii_mbtowc+0x16>
 8007b1e:	f06f 0001 	mvn.w	r0, #1
 8007b22:	e7f8      	b.n	8007b16 <__ascii_mbtowc+0x16>

08007b24 <__ascii_wctomb>:
 8007b24:	b149      	cbz	r1, 8007b3a <__ascii_wctomb+0x16>
 8007b26:	2aff      	cmp	r2, #255	; 0xff
 8007b28:	bf85      	ittet	hi
 8007b2a:	238a      	movhi	r3, #138	; 0x8a
 8007b2c:	6003      	strhi	r3, [r0, #0]
 8007b2e:	700a      	strbls	r2, [r1, #0]
 8007b30:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b34:	bf98      	it	ls
 8007b36:	2001      	movls	r0, #1
 8007b38:	4770      	bx	lr
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	4770      	bx	lr
	...

08007b40 <fiprintf>:
 8007b40:	b40e      	push	{r1, r2, r3}
 8007b42:	b503      	push	{r0, r1, lr}
 8007b44:	4601      	mov	r1, r0
 8007b46:	ab03      	add	r3, sp, #12
 8007b48:	4805      	ldr	r0, [pc, #20]	; (8007b60 <fiprintf+0x20>)
 8007b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b4e:	6800      	ldr	r0, [r0, #0]
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	f000 f837 	bl	8007bc4 <_vfiprintf_r>
 8007b56:	b002      	add	sp, #8
 8007b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b5c:	b003      	add	sp, #12
 8007b5e:	4770      	bx	lr
 8007b60:	20000068 	.word	0x20000068

08007b64 <abort>:
 8007b64:	b508      	push	{r3, lr}
 8007b66:	2006      	movs	r0, #6
 8007b68:	f000 fa04 	bl	8007f74 <raise>
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f7f9 faff 	bl	8001170 <_exit>

08007b72 <__sfputc_r>:
 8007b72:	6893      	ldr	r3, [r2, #8]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	b410      	push	{r4}
 8007b7a:	6093      	str	r3, [r2, #8]
 8007b7c:	da08      	bge.n	8007b90 <__sfputc_r+0x1e>
 8007b7e:	6994      	ldr	r4, [r2, #24]
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	db01      	blt.n	8007b88 <__sfputc_r+0x16>
 8007b84:	290a      	cmp	r1, #10
 8007b86:	d103      	bne.n	8007b90 <__sfputc_r+0x1e>
 8007b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b8c:	f000 b934 	b.w	8007df8 <__swbuf_r>
 8007b90:	6813      	ldr	r3, [r2, #0]
 8007b92:	1c58      	adds	r0, r3, #1
 8007b94:	6010      	str	r0, [r2, #0]
 8007b96:	7019      	strb	r1, [r3, #0]
 8007b98:	4608      	mov	r0, r1
 8007b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <__sfputs_r>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	460f      	mov	r7, r1
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	18d5      	adds	r5, r2, r3
 8007baa:	42ac      	cmp	r4, r5
 8007bac:	d101      	bne.n	8007bb2 <__sfputs_r+0x12>
 8007bae:	2000      	movs	r0, #0
 8007bb0:	e007      	b.n	8007bc2 <__sfputs_r+0x22>
 8007bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb6:	463a      	mov	r2, r7
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f7ff ffda 	bl	8007b72 <__sfputc_r>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d1f3      	bne.n	8007baa <__sfputs_r+0xa>
 8007bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bc4 <_vfiprintf_r>:
 8007bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	460d      	mov	r5, r1
 8007bca:	b09d      	sub	sp, #116	; 0x74
 8007bcc:	4614      	mov	r4, r2
 8007bce:	4698      	mov	r8, r3
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	b118      	cbz	r0, 8007bdc <_vfiprintf_r+0x18>
 8007bd4:	6a03      	ldr	r3, [r0, #32]
 8007bd6:	b90b      	cbnz	r3, 8007bdc <_vfiprintf_r+0x18>
 8007bd8:	f7fe fb2a 	bl	8006230 <__sinit>
 8007bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bde:	07d9      	lsls	r1, r3, #31
 8007be0:	d405      	bmi.n	8007bee <_vfiprintf_r+0x2a>
 8007be2:	89ab      	ldrh	r3, [r5, #12]
 8007be4:	059a      	lsls	r2, r3, #22
 8007be6:	d402      	bmi.n	8007bee <_vfiprintf_r+0x2a>
 8007be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bea:	f7fe fc17 	bl	800641c <__retarget_lock_acquire_recursive>
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	071b      	lsls	r3, r3, #28
 8007bf2:	d501      	bpl.n	8007bf8 <_vfiprintf_r+0x34>
 8007bf4:	692b      	ldr	r3, [r5, #16]
 8007bf6:	b99b      	cbnz	r3, 8007c20 <_vfiprintf_r+0x5c>
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 f93a 	bl	8007e74 <__swsetup_r>
 8007c00:	b170      	cbz	r0, 8007c20 <_vfiprintf_r+0x5c>
 8007c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c04:	07dc      	lsls	r4, r3, #31
 8007c06:	d504      	bpl.n	8007c12 <_vfiprintf_r+0x4e>
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	b01d      	add	sp, #116	; 0x74
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	0598      	lsls	r0, r3, #22
 8007c16:	d4f7      	bmi.n	8007c08 <_vfiprintf_r+0x44>
 8007c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c1a:	f7fe fc00 	bl	800641e <__retarget_lock_release_recursive>
 8007c1e:	e7f3      	b.n	8007c08 <_vfiprintf_r+0x44>
 8007c20:	2300      	movs	r3, #0
 8007c22:	9309      	str	r3, [sp, #36]	; 0x24
 8007c24:	2320      	movs	r3, #32
 8007c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c2e:	2330      	movs	r3, #48	; 0x30
 8007c30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007de4 <_vfiprintf_r+0x220>
 8007c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c38:	f04f 0901 	mov.w	r9, #1
 8007c3c:	4623      	mov	r3, r4
 8007c3e:	469a      	mov	sl, r3
 8007c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c44:	b10a      	cbz	r2, 8007c4a <_vfiprintf_r+0x86>
 8007c46:	2a25      	cmp	r2, #37	; 0x25
 8007c48:	d1f9      	bne.n	8007c3e <_vfiprintf_r+0x7a>
 8007c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c4e:	d00b      	beq.n	8007c68 <_vfiprintf_r+0xa4>
 8007c50:	465b      	mov	r3, fp
 8007c52:	4622      	mov	r2, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff ffa2 	bl	8007ba0 <__sfputs_r>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f000 80a9 	beq.w	8007db4 <_vfiprintf_r+0x1f0>
 8007c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c64:	445a      	add	r2, fp
 8007c66:	9209      	str	r2, [sp, #36]	; 0x24
 8007c68:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 80a1 	beq.w	8007db4 <_vfiprintf_r+0x1f0>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c7c:	f10a 0a01 	add.w	sl, sl, #1
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	9307      	str	r3, [sp, #28]
 8007c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c88:	931a      	str	r3, [sp, #104]	; 0x68
 8007c8a:	4654      	mov	r4, sl
 8007c8c:	2205      	movs	r2, #5
 8007c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c92:	4854      	ldr	r0, [pc, #336]	; (8007de4 <_vfiprintf_r+0x220>)
 8007c94:	f7f8 fae4 	bl	8000260 <memchr>
 8007c98:	9a04      	ldr	r2, [sp, #16]
 8007c9a:	b9d8      	cbnz	r0, 8007cd4 <_vfiprintf_r+0x110>
 8007c9c:	06d1      	lsls	r1, r2, #27
 8007c9e:	bf44      	itt	mi
 8007ca0:	2320      	movmi	r3, #32
 8007ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ca6:	0713      	lsls	r3, r2, #28
 8007ca8:	bf44      	itt	mi
 8007caa:	232b      	movmi	r3, #43	; 0x2b
 8007cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb6:	d015      	beq.n	8007ce4 <_vfiprintf_r+0x120>
 8007cb8:	9a07      	ldr	r2, [sp, #28]
 8007cba:	4654      	mov	r4, sl
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f04f 0c0a 	mov.w	ip, #10
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc8:	3b30      	subs	r3, #48	; 0x30
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	d94d      	bls.n	8007d6a <_vfiprintf_r+0x1a6>
 8007cce:	b1b0      	cbz	r0, 8007cfe <_vfiprintf_r+0x13a>
 8007cd0:	9207      	str	r2, [sp, #28]
 8007cd2:	e014      	b.n	8007cfe <_vfiprintf_r+0x13a>
 8007cd4:	eba0 0308 	sub.w	r3, r0, r8
 8007cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	9304      	str	r3, [sp, #16]
 8007ce0:	46a2      	mov	sl, r4
 8007ce2:	e7d2      	b.n	8007c8a <_vfiprintf_r+0xc6>
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	1d19      	adds	r1, r3, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	9103      	str	r1, [sp, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bfbb      	ittet	lt
 8007cf0:	425b      	neglt	r3, r3
 8007cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8007cf6:	9307      	strge	r3, [sp, #28]
 8007cf8:	9307      	strlt	r3, [sp, #28]
 8007cfa:	bfb8      	it	lt
 8007cfc:	9204      	strlt	r2, [sp, #16]
 8007cfe:	7823      	ldrb	r3, [r4, #0]
 8007d00:	2b2e      	cmp	r3, #46	; 0x2e
 8007d02:	d10c      	bne.n	8007d1e <_vfiprintf_r+0x15a>
 8007d04:	7863      	ldrb	r3, [r4, #1]
 8007d06:	2b2a      	cmp	r3, #42	; 0x2a
 8007d08:	d134      	bne.n	8007d74 <_vfiprintf_r+0x1b0>
 8007d0a:	9b03      	ldr	r3, [sp, #12]
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	9203      	str	r2, [sp, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bfb8      	it	lt
 8007d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d1a:	3402      	adds	r4, #2
 8007d1c:	9305      	str	r3, [sp, #20]
 8007d1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007df4 <_vfiprintf_r+0x230>
 8007d22:	7821      	ldrb	r1, [r4, #0]
 8007d24:	2203      	movs	r2, #3
 8007d26:	4650      	mov	r0, sl
 8007d28:	f7f8 fa9a 	bl	8000260 <memchr>
 8007d2c:	b138      	cbz	r0, 8007d3e <_vfiprintf_r+0x17a>
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	eba0 000a 	sub.w	r0, r0, sl
 8007d34:	2240      	movs	r2, #64	; 0x40
 8007d36:	4082      	lsls	r2, r0
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	3401      	adds	r4, #1
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d42:	4829      	ldr	r0, [pc, #164]	; (8007de8 <_vfiprintf_r+0x224>)
 8007d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d48:	2206      	movs	r2, #6
 8007d4a:	f7f8 fa89 	bl	8000260 <memchr>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d03f      	beq.n	8007dd2 <_vfiprintf_r+0x20e>
 8007d52:	4b26      	ldr	r3, [pc, #152]	; (8007dec <_vfiprintf_r+0x228>)
 8007d54:	bb1b      	cbnz	r3, 8007d9e <_vfiprintf_r+0x1da>
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	3307      	adds	r3, #7
 8007d5a:	f023 0307 	bic.w	r3, r3, #7
 8007d5e:	3308      	adds	r3, #8
 8007d60:	9303      	str	r3, [sp, #12]
 8007d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d64:	443b      	add	r3, r7
 8007d66:	9309      	str	r3, [sp, #36]	; 0x24
 8007d68:	e768      	b.n	8007c3c <_vfiprintf_r+0x78>
 8007d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d6e:	460c      	mov	r4, r1
 8007d70:	2001      	movs	r0, #1
 8007d72:	e7a6      	b.n	8007cc2 <_vfiprintf_r+0xfe>
 8007d74:	2300      	movs	r3, #0
 8007d76:	3401      	adds	r4, #1
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	f04f 0c0a 	mov.w	ip, #10
 8007d80:	4620      	mov	r0, r4
 8007d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d86:	3a30      	subs	r2, #48	; 0x30
 8007d88:	2a09      	cmp	r2, #9
 8007d8a:	d903      	bls.n	8007d94 <_vfiprintf_r+0x1d0>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0c6      	beq.n	8007d1e <_vfiprintf_r+0x15a>
 8007d90:	9105      	str	r1, [sp, #20]
 8007d92:	e7c4      	b.n	8007d1e <_vfiprintf_r+0x15a>
 8007d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d98:	4604      	mov	r4, r0
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e7f0      	b.n	8007d80 <_vfiprintf_r+0x1bc>
 8007d9e:	ab03      	add	r3, sp, #12
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	462a      	mov	r2, r5
 8007da4:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <_vfiprintf_r+0x22c>)
 8007da6:	a904      	add	r1, sp, #16
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7fd fe1d 	bl	80059e8 <_printf_float>
 8007dae:	4607      	mov	r7, r0
 8007db0:	1c78      	adds	r0, r7, #1
 8007db2:	d1d6      	bne.n	8007d62 <_vfiprintf_r+0x19e>
 8007db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db6:	07d9      	lsls	r1, r3, #31
 8007db8:	d405      	bmi.n	8007dc6 <_vfiprintf_r+0x202>
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	059a      	lsls	r2, r3, #22
 8007dbe:	d402      	bmi.n	8007dc6 <_vfiprintf_r+0x202>
 8007dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dc2:	f7fe fb2c 	bl	800641e <__retarget_lock_release_recursive>
 8007dc6:	89ab      	ldrh	r3, [r5, #12]
 8007dc8:	065b      	lsls	r3, r3, #25
 8007dca:	f53f af1d 	bmi.w	8007c08 <_vfiprintf_r+0x44>
 8007dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd0:	e71c      	b.n	8007c0c <_vfiprintf_r+0x48>
 8007dd2:	ab03      	add	r3, sp, #12
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <_vfiprintf_r+0x22c>)
 8007dda:	a904      	add	r1, sp, #16
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f7fe f88b 	bl	8005ef8 <_printf_i>
 8007de2:	e7e4      	b.n	8007dae <_vfiprintf_r+0x1ea>
 8007de4:	0800877b 	.word	0x0800877b
 8007de8:	08008785 	.word	0x08008785
 8007dec:	080059e9 	.word	0x080059e9
 8007df0:	08007ba1 	.word	0x08007ba1
 8007df4:	08008781 	.word	0x08008781

08007df8 <__swbuf_r>:
 8007df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfa:	460e      	mov	r6, r1
 8007dfc:	4614      	mov	r4, r2
 8007dfe:	4605      	mov	r5, r0
 8007e00:	b118      	cbz	r0, 8007e0a <__swbuf_r+0x12>
 8007e02:	6a03      	ldr	r3, [r0, #32]
 8007e04:	b90b      	cbnz	r3, 8007e0a <__swbuf_r+0x12>
 8007e06:	f7fe fa13 	bl	8006230 <__sinit>
 8007e0a:	69a3      	ldr	r3, [r4, #24]
 8007e0c:	60a3      	str	r3, [r4, #8]
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	071a      	lsls	r2, r3, #28
 8007e12:	d525      	bpl.n	8007e60 <__swbuf_r+0x68>
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	b31b      	cbz	r3, 8007e60 <__swbuf_r+0x68>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	6922      	ldr	r2, [r4, #16]
 8007e1c:	1a98      	subs	r0, r3, r2
 8007e1e:	6963      	ldr	r3, [r4, #20]
 8007e20:	b2f6      	uxtb	r6, r6
 8007e22:	4283      	cmp	r3, r0
 8007e24:	4637      	mov	r7, r6
 8007e26:	dc04      	bgt.n	8007e32 <__swbuf_r+0x3a>
 8007e28:	4621      	mov	r1, r4
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f7ff fdee 	bl	8007a0c <_fflush_r>
 8007e30:	b9e0      	cbnz	r0, 8007e6c <__swbuf_r+0x74>
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	6022      	str	r2, [r4, #0]
 8007e3e:	701e      	strb	r6, [r3, #0]
 8007e40:	6962      	ldr	r2, [r4, #20]
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d004      	beq.n	8007e52 <__swbuf_r+0x5a>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	07db      	lsls	r3, r3, #31
 8007e4c:	d506      	bpl.n	8007e5c <__swbuf_r+0x64>
 8007e4e:	2e0a      	cmp	r6, #10
 8007e50:	d104      	bne.n	8007e5c <__swbuf_r+0x64>
 8007e52:	4621      	mov	r1, r4
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7ff fdd9 	bl	8007a0c <_fflush_r>
 8007e5a:	b938      	cbnz	r0, 8007e6c <__swbuf_r+0x74>
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e60:	4621      	mov	r1, r4
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 f806 	bl	8007e74 <__swsetup_r>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d0d5      	beq.n	8007e18 <__swbuf_r+0x20>
 8007e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e70:	e7f4      	b.n	8007e5c <__swbuf_r+0x64>
	...

08007e74 <__swsetup_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4b2a      	ldr	r3, [pc, #168]	; (8007f20 <__swsetup_r+0xac>)
 8007e78:	4605      	mov	r5, r0
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	b118      	cbz	r0, 8007e88 <__swsetup_r+0x14>
 8007e80:	6a03      	ldr	r3, [r0, #32]
 8007e82:	b90b      	cbnz	r3, 8007e88 <__swsetup_r+0x14>
 8007e84:	f7fe f9d4 	bl	8006230 <__sinit>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e8e:	0718      	lsls	r0, r3, #28
 8007e90:	d422      	bmi.n	8007ed8 <__swsetup_r+0x64>
 8007e92:	06d9      	lsls	r1, r3, #27
 8007e94:	d407      	bmi.n	8007ea6 <__swsetup_r+0x32>
 8007e96:	2309      	movs	r3, #9
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e9e:	81a3      	strh	r3, [r4, #12]
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	e034      	b.n	8007f10 <__swsetup_r+0x9c>
 8007ea6:	0758      	lsls	r0, r3, #29
 8007ea8:	d512      	bpl.n	8007ed0 <__swsetup_r+0x5c>
 8007eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eac:	b141      	cbz	r1, 8007ec0 <__swsetup_r+0x4c>
 8007eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	d002      	beq.n	8007ebc <__swsetup_r+0x48>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff f8a6 	bl	8007008 <_free_r>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	6363      	str	r3, [r4, #52]	; 0x34
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6063      	str	r3, [r4, #4]
 8007ecc:	6923      	ldr	r3, [r4, #16]
 8007ece:	6023      	str	r3, [r4, #0]
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f043 0308 	orr.w	r3, r3, #8
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	6923      	ldr	r3, [r4, #16]
 8007eda:	b94b      	cbnz	r3, 8007ef0 <__swsetup_r+0x7c>
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee6:	d003      	beq.n	8007ef0 <__swsetup_r+0x7c>
 8007ee8:	4621      	mov	r1, r4
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 f884 	bl	8007ff8 <__smakebuf_r>
 8007ef0:	89a0      	ldrh	r0, [r4, #12]
 8007ef2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ef6:	f010 0301 	ands.w	r3, r0, #1
 8007efa:	d00a      	beq.n	8007f12 <__swsetup_r+0x9e>
 8007efc:	2300      	movs	r3, #0
 8007efe:	60a3      	str	r3, [r4, #8]
 8007f00:	6963      	ldr	r3, [r4, #20]
 8007f02:	425b      	negs	r3, r3
 8007f04:	61a3      	str	r3, [r4, #24]
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	b943      	cbnz	r3, 8007f1c <__swsetup_r+0xa8>
 8007f0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f0e:	d1c4      	bne.n	8007e9a <__swsetup_r+0x26>
 8007f10:	bd38      	pop	{r3, r4, r5, pc}
 8007f12:	0781      	lsls	r1, r0, #30
 8007f14:	bf58      	it	pl
 8007f16:	6963      	ldrpl	r3, [r4, #20]
 8007f18:	60a3      	str	r3, [r4, #8]
 8007f1a:	e7f4      	b.n	8007f06 <__swsetup_r+0x92>
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e7f7      	b.n	8007f10 <__swsetup_r+0x9c>
 8007f20:	20000068 	.word	0x20000068

08007f24 <_raise_r>:
 8007f24:	291f      	cmp	r1, #31
 8007f26:	b538      	push	{r3, r4, r5, lr}
 8007f28:	4604      	mov	r4, r0
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	d904      	bls.n	8007f38 <_raise_r+0x14>
 8007f2e:	2316      	movs	r3, #22
 8007f30:	6003      	str	r3, [r0, #0]
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007f3a:	b112      	cbz	r2, 8007f42 <_raise_r+0x1e>
 8007f3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f40:	b94b      	cbnz	r3, 8007f56 <_raise_r+0x32>
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f830 	bl	8007fa8 <_getpid_r>
 8007f48:	462a      	mov	r2, r5
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f52:	f000 b817 	b.w	8007f84 <_kill_r>
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d00a      	beq.n	8007f70 <_raise_r+0x4c>
 8007f5a:	1c59      	adds	r1, r3, #1
 8007f5c:	d103      	bne.n	8007f66 <_raise_r+0x42>
 8007f5e:	2316      	movs	r3, #22
 8007f60:	6003      	str	r3, [r0, #0]
 8007f62:	2001      	movs	r0, #1
 8007f64:	e7e7      	b.n	8007f36 <_raise_r+0x12>
 8007f66:	2400      	movs	r4, #0
 8007f68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	4798      	blx	r3
 8007f70:	2000      	movs	r0, #0
 8007f72:	e7e0      	b.n	8007f36 <_raise_r+0x12>

08007f74 <raise>:
 8007f74:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <raise+0xc>)
 8007f76:	4601      	mov	r1, r0
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	f7ff bfd3 	b.w	8007f24 <_raise_r>
 8007f7e:	bf00      	nop
 8007f80:	20000068 	.word	0x20000068

08007f84 <_kill_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	; (8007fa4 <_kill_r+0x20>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	4611      	mov	r1, r2
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	f7f9 f8dd 	bl	8001150 <_kill>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	d102      	bne.n	8007fa0 <_kill_r+0x1c>
 8007f9a:	682b      	ldr	r3, [r5, #0]
 8007f9c:	b103      	cbz	r3, 8007fa0 <_kill_r+0x1c>
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	bd38      	pop	{r3, r4, r5, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200004f8 	.word	0x200004f8

08007fa8 <_getpid_r>:
 8007fa8:	f7f9 b8ca 	b.w	8001140 <_getpid>

08007fac <__swhatbuf_r>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	460c      	mov	r4, r1
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	b096      	sub	sp, #88	; 0x58
 8007fb8:	4615      	mov	r5, r2
 8007fba:	461e      	mov	r6, r3
 8007fbc:	da0d      	bge.n	8007fda <__swhatbuf_r+0x2e>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fc4:	f04f 0100 	mov.w	r1, #0
 8007fc8:	bf0c      	ite	eq
 8007fca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fce:	2340      	movne	r3, #64	; 0x40
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	6031      	str	r1, [r6, #0]
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	b016      	add	sp, #88	; 0x58
 8007fd8:	bd70      	pop	{r4, r5, r6, pc}
 8007fda:	466a      	mov	r2, sp
 8007fdc:	f000 f848 	bl	8008070 <_fstat_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	dbec      	blt.n	8007fbe <__swhatbuf_r+0x12>
 8007fe4:	9901      	ldr	r1, [sp, #4]
 8007fe6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fee:	4259      	negs	r1, r3
 8007ff0:	4159      	adcs	r1, r3
 8007ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ff6:	e7eb      	b.n	8007fd0 <__swhatbuf_r+0x24>

08007ff8 <__smakebuf_r>:
 8007ff8:	898b      	ldrh	r3, [r1, #12]
 8007ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ffc:	079d      	lsls	r5, r3, #30
 8007ffe:	4606      	mov	r6, r0
 8008000:	460c      	mov	r4, r1
 8008002:	d507      	bpl.n	8008014 <__smakebuf_r+0x1c>
 8008004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	2301      	movs	r3, #1
 800800e:	6163      	str	r3, [r4, #20]
 8008010:	b002      	add	sp, #8
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	ab01      	add	r3, sp, #4
 8008016:	466a      	mov	r2, sp
 8008018:	f7ff ffc8 	bl	8007fac <__swhatbuf_r>
 800801c:	9900      	ldr	r1, [sp, #0]
 800801e:	4605      	mov	r5, r0
 8008020:	4630      	mov	r0, r6
 8008022:	f7ff f865 	bl	80070f0 <_malloc_r>
 8008026:	b948      	cbnz	r0, 800803c <__smakebuf_r+0x44>
 8008028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800802c:	059a      	lsls	r2, r3, #22
 800802e:	d4ef      	bmi.n	8008010 <__smakebuf_r+0x18>
 8008030:	f023 0303 	bic.w	r3, r3, #3
 8008034:	f043 0302 	orr.w	r3, r3, #2
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	e7e3      	b.n	8008004 <__smakebuf_r+0xc>
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	6020      	str	r0, [r4, #0]
 8008040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	6163      	str	r3, [r4, #20]
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	6120      	str	r0, [r4, #16]
 800804e:	b15b      	cbz	r3, 8008068 <__smakebuf_r+0x70>
 8008050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008054:	4630      	mov	r0, r6
 8008056:	f000 f81d 	bl	8008094 <_isatty_r>
 800805a:	b128      	cbz	r0, 8008068 <__smakebuf_r+0x70>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	f043 0301 	orr.w	r3, r3, #1
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	431d      	orrs	r5, r3
 800806c:	81a5      	strh	r5, [r4, #12]
 800806e:	e7cf      	b.n	8008010 <__smakebuf_r+0x18>

08008070 <_fstat_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d07      	ldr	r5, [pc, #28]	; (8008090 <_fstat_r+0x20>)
 8008074:	2300      	movs	r3, #0
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	4611      	mov	r1, r2
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	f7f9 f8c6 	bl	800120e <_fstat>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	d102      	bne.n	800808c <_fstat_r+0x1c>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	b103      	cbz	r3, 800808c <_fstat_r+0x1c>
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	bd38      	pop	{r3, r4, r5, pc}
 800808e:	bf00      	nop
 8008090:	200004f8 	.word	0x200004f8

08008094 <_isatty_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4d06      	ldr	r5, [pc, #24]	; (80080b0 <_isatty_r+0x1c>)
 8008098:	2300      	movs	r3, #0
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	602b      	str	r3, [r5, #0]
 80080a0:	f7f9 f8c5 	bl	800122e <_isatty>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_isatty_r+0x1a>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_isatty_r+0x1a>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	200004f8 	.word	0x200004f8

080080b4 <_init>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	bf00      	nop
 80080b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ba:	bc08      	pop	{r3}
 80080bc:	469e      	mov	lr, r3
 80080be:	4770      	bx	lr

080080c0 <_fini>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	bf00      	nop
 80080c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c6:	bc08      	pop	{r3}
 80080c8:	469e      	mov	lr, r3
 80080ca:	4770      	bx	lr
